
MS5611_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d978  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800db48  0800db48  0000eb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc24  0800dc24  0000f15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc24  0800dc24  0000ec24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc2c  0800dc2c  0000f15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc2c  0800dc2c  0000ec2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc30  0800dc30  0000ec30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800dc34  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000212c  20000160  0800dd90  0000f160  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000228c  0800dd90  0000f28c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226be  00000000  00000000  0000f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057bb  00000000  00000000  0003184a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001597  00000000  00000000  00038c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002910e  00000000  00000000  0003a1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c989  00000000  00000000  000632dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da306  00000000  00000000  0008fc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169f6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007944  00000000  00000000  00169fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001718f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800db30 	.word	0x0800db30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	0800db30 	.word	0x0800db30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295
 80002ce:	f000 b9b5 	b.w	800063c <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <MS5611_Rest>:

/*
 * Function for reseting the sensor
 */
void MS5611_Rest(I2C_HandleTypeDef* I2Cx)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
	uint8_t RESET = (uint8_t)MS5611_CMD_REST;
 8000648:	231e      	movs	r3, #30
 800064a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_SLAVE_ADDR, &RESET, 1, 1000);
 800064c:	f107 020f 	add.w	r2, r7, #15
 8000650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	21ee      	movs	r1, #238	@ 0xee
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f002 fe52 	bl	8003304 <HAL_I2C_Master_Transmit>
	HAL_Delay(4);
 8000660:	2004      	movs	r0, #4
 8000662:	f001 fd67 	bl	8002134 <HAL_Delay>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MS5611_PROM_read>:
/*
 * Function for reading PROM memories of the sensor
 */
uint8_t MS5611_PROM_read(I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct){
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]

	uint8_t i;
	uint8_t data[2];
	uint8_t PROM[8] = {MS5611_PROM_READ_0,
 800067a:	4a4a      	ldr	r2, [pc, #296]	@ (80007a4 <MS5611_PROM_read+0x134>)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000684:	e883 0003 	stmia.w	r3, {r0, r1}
			MS5611_PROM_READ_4,
			MS5611_PROM_READ_5,
			MS5611_PROM_READ_6,
			MS5611_PROM_READ_7
	};
	I2C_HandleTypeDef* Handle = I2Cx;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	61bb      	str	r3, [r7, #24]
	uint8_t address = datastruct->adress;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	75fb      	strb	r3, [r7, #23]

	while(HAL_I2C_Master_Transmit(Handle, address, &PROM[0], 1, 100) != HAL_OK);
 8000692:	bf00      	nop
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	b299      	uxth	r1, r3
 8000698:	f107 020c 	add.w	r2, r7, #12
 800069c:	2364      	movs	r3, #100	@ 0x64
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2301      	movs	r3, #1
 80006a2:	69b8      	ldr	r0, [r7, #24]
 80006a4:	f002 fe2e 	bl	8003304 <HAL_I2C_Master_Transmit>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1f2      	bne.n	8000694 <MS5611_PROM_read+0x24>

	while(HAL_I2C_Master_Receive(Handle, address, data, 2, 100) != HAL_OK);
 80006ae:	bf00      	nop
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	b299      	uxth	r1, r3
 80006b4:	f107 0214 	add.w	r2, r7, #20
 80006b8:	2364      	movs	r3, #100	@ 0x64
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2302      	movs	r3, #2
 80006be:	69b8      	ldr	r0, [r7, #24]
 80006c0:	f002 ff1e 	bl	8003500 <HAL_I2C_Master_Receive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f2      	bne.n	80006b0 <MS5611_PROM_read+0x40>

	datastruct->reserve = (uint16_t)(data[0] << 8 | data[1]);
 80006ca:	7d3b      	ldrb	r3, [r7, #20]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	7d7b      	ldrb	r3, [r7, #21]
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	b29a      	uxth	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	81da      	strh	r2, [r3, #14]

	for (i=1;i<=6;i++){
 80006de:	2301      	movs	r3, #1
 80006e0:	77fb      	strb	r3, [r7, #31]
 80006e2:	e02f      	b.n	8000744 <MS5611_PROM_read+0xd4>

		while(HAL_I2C_Master_Transmit(Handle, address, &PROM[i], 1, 100) != HAL_OK);
 80006e4:	bf00      	nop
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	b299      	uxth	r1, r3
 80006ea:	7ffb      	ldrb	r3, [r7, #31]
 80006ec:	f107 020c 	add.w	r2, r7, #12
 80006f0:	441a      	add	r2, r3
 80006f2:	2364      	movs	r3, #100	@ 0x64
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	69b8      	ldr	r0, [r7, #24]
 80006fa:	f002 fe03 	bl	8003304 <HAL_I2C_Master_Transmit>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f0      	bne.n	80006e6 <MS5611_PROM_read+0x76>

		while(HAL_I2C_Master_Receive(Handle, address, data, 2, 100) != HAL_OK);
 8000704:	bf00      	nop
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	b299      	uxth	r1, r3
 800070a:	f107 0214 	add.w	r2, r7, #20
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2302      	movs	r3, #2
 8000714:	69b8      	ldr	r0, [r7, #24]
 8000716:	f002 fef3 	bl	8003500 <HAL_I2C_Master_Receive>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f2      	bne.n	8000706 <MS5611_PROM_read+0x96>

		datastruct->C[i-1] = (uint16_t )(data[0] << 8 | data[1]);
 8000720:	7d3b      	ldrb	r3, [r7, #20]
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	b21a      	sxth	r2, r3
 8000726:	7d7b      	ldrb	r3, [r7, #21]
 8000728:	b21b      	sxth	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	b21a      	sxth	r2, r3
 800072e:	7ffb      	ldrb	r3, [r7, #31]
 8000730:	3b01      	subs	r3, #1
 8000732:	b291      	uxth	r1, r2
 8000734:	683a      	ldr	r2, [r7, #0]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4413      	add	r3, r2
 800073a:	460a      	mov	r2, r1
 800073c:	805a      	strh	r2, [r3, #2]
	for (i=1;i<=6;i++){
 800073e:	7ffb      	ldrb	r3, [r7, #31]
 8000740:	3301      	adds	r3, #1
 8000742:	77fb      	strb	r3, [r7, #31]
 8000744:	7ffb      	ldrb	r3, [r7, #31]
 8000746:	2b06      	cmp	r3, #6
 8000748:	d9cc      	bls.n	80006e4 <MS5611_PROM_read+0x74>
	}

	while(HAL_I2C_Master_Transmit(Handle, address, &PROM[7], 1, 100) != HAL_OK);
 800074a:	bf00      	nop
 800074c:	7dfb      	ldrb	r3, [r7, #23]
 800074e:	b299      	uxth	r1, r3
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	1dda      	adds	r2, r3, #7
 8000756:	2364      	movs	r3, #100	@ 0x64
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	69b8      	ldr	r0, [r7, #24]
 800075e:	f002 fdd1 	bl	8003304 <HAL_I2C_Master_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f1      	bne.n	800074c <MS5611_PROM_read+0xdc>

	while(HAL_I2C_Master_Receive(Handle, address, data, 2, 100) != HAL_OK);
 8000768:	bf00      	nop
 800076a:	7dfb      	ldrb	r3, [r7, #23]
 800076c:	b299      	uxth	r1, r3
 800076e:	f107 0214 	add.w	r2, r7, #20
 8000772:	2364      	movs	r3, #100	@ 0x64
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2302      	movs	r3, #2
 8000778:	69b8      	ldr	r0, [r7, #24]
 800077a:	f002 fec1 	bl	8003500 <HAL_I2C_Master_Receive>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1f2      	bne.n	800076a <MS5611_PROM_read+0xfa>

	datastruct->crc = (uint16_t)(data[0] << 8 | data[1]);
 8000784:	7d3b      	ldrb	r3, [r7, #20]
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	b21a      	sxth	r2, r3
 800078a:	7d7b      	ldrb	r3, [r7, #21]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b21b      	sxth	r3, r3
 8000792:	b29a      	uxth	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	821a      	strh	r2, [r3, #16]

	return MS5611_OK;
 8000798:	2301      	movs	r3, #1
}
 800079a:	4618      	mov	r0, r3
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	0800db48 	.word	0x0800db48

080007a8 <MS5611_init>:
uint8_t MS5611_init(I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	MS5611_Rest(I2Cx);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff ff44 	bl	8000640 <MS5611_Rest>
	datastruct->adress = MS5611_SLAVE_ADDR; //add slave adress to the datastruct
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	22ee      	movs	r2, #238	@ 0xee
 80007bc:	701a      	strb	r2, [r3, #0]
	MS5611_PROM_read(I2Cx,datastruct);
 80007be:	6839      	ldr	r1, [r7, #0]
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff55 	bl	8000670 <MS5611_PROM_read>
	return MS5611_OK;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MS5611_read_temp>:

/*
 * Function for reading raw temperature of the sensor
 */
uint8_t MS5611_read_temp(I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct, uint8_t resolution)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	4613      	mov	r3, r2
 80007dc:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef* Handle = I2Cx;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	623b      	str	r3, [r7, #32]
	uint8_t address = datastruct->adress;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	77fb      	strb	r3, [r7, #31]
	uint8_t reg = MS6511_ADC_READ;
 80007e8:	2300      	movs	r3, #0
 80007ea:	77bb      	strb	r3, [r7, #30]
	uint8_t data[5];
	uint8_t cmd;
	uint8_t conv_T;

	switch(resolution){
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	3b50      	subs	r3, #80	@ 0x50
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d833      	bhi.n	800085c <MS5611_read_temp+0x8c>
 80007f4:	a201      	add	r2, pc, #4	@ (adr r2, 80007fc <MS5611_read_temp+0x2c>)
 80007f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fa:	bf00      	nop
 80007fc:	08000821 	.word	0x08000821
 8000800:	0800085d 	.word	0x0800085d
 8000804:	0800082d 	.word	0x0800082d
 8000808:	0800085d 	.word	0x0800085d
 800080c:	08000839 	.word	0x08000839
 8000810:	0800085d 	.word	0x0800085d
 8000814:	08000845 	.word	0x08000845
 8000818:	0800085d 	.word	0x0800085d
 800081c:	08000851 	.word	0x08000851
	case MS5611_CMD_CONVERT_D2_256 : cmd = MS5611_CMD_CONVERT_D2_256; conv_T = 1;
 8000820:	2350      	movs	r3, #80	@ 0x50
 8000822:	75fb      	strb	r3, [r7, #23]
 8000824:	2301      	movs	r3, #1
 8000826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800082a:	e01c      	b.n	8000866 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_512 : cmd = MS5611_CMD_CONVERT_D2_512; conv_T = 2;
 800082c:	2352      	movs	r3, #82	@ 0x52
 800082e:	75fb      	strb	r3, [r7, #23]
 8000830:	2302      	movs	r3, #2
 8000832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000836:	e016      	b.n	8000866 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_1024 : cmd = MS5611_CMD_CONVERT_D2_1024; conv_T = 3;
 8000838:	2354      	movs	r3, #84	@ 0x54
 800083a:	75fb      	strb	r3, [r7, #23]
 800083c:	2303      	movs	r3, #3
 800083e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000842:	e010      	b.n	8000866 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_2048 : cmd = MS5611_CMD_CONVERT_D2_2048; conv_T = 5;
 8000844:	2356      	movs	r3, #86	@ 0x56
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	2305      	movs	r3, #5
 800084a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800084e:	e00a      	b.n	8000866 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_4096 : cmd = MS5611_CMD_CONVERT_D2_4096; conv_T = 9;
 8000850:	2358      	movs	r3, #88	@ 0x58
 8000852:	75fb      	strb	r3, [r7, #23]
 8000854:	2309      	movs	r3, #9
 8000856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800085a:	e004      	b.n	8000866 <MS5611_read_temp+0x96>
	default : cmd = MS5611_CMD_CONVERT_D2_4096; conv_T = 9;
 800085c:	2358      	movs	r3, #88	@ 0x58
 800085e:	75fb      	strb	r3, [r7, #23]
 8000860:	2309      	movs	r3, #9
 8000862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	while(HAL_I2C_Master_Transmit(Handle, address, &cmd, 1, 100) != HAL_OK);//asking adc to store data
 8000866:	bf00      	nop
 8000868:	7ffb      	ldrb	r3, [r7, #31]
 800086a:	b299      	uxth	r1, r3
 800086c:	f107 0217 	add.w	r2, r7, #23
 8000870:	2364      	movs	r3, #100	@ 0x64
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2301      	movs	r3, #1
 8000876:	6a38      	ldr	r0, [r7, #32]
 8000878:	f002 fd44 	bl	8003304 <HAL_I2C_Master_Transmit>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f2      	bne.n	8000868 <MS5611_read_temp+0x98>
	HAL_Delay(conv_T); 														//convertion time
 8000882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fc54 	bl	8002134 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle, address, &reg, 1, 100) != HAL_OK);//asking for the data
 800088c:	bf00      	nop
 800088e:	7ffb      	ldrb	r3, [r7, #31]
 8000890:	b299      	uxth	r1, r3
 8000892:	f107 021e 	add.w	r2, r7, #30
 8000896:	2364      	movs	r3, #100	@ 0x64
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	6a38      	ldr	r0, [r7, #32]
 800089e:	f002 fd31 	bl	8003304 <HAL_I2C_Master_Transmit>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f2      	bne.n	800088e <MS5611_read_temp+0xbe>
	while(HAL_I2C_Master_Receive(Handle, address, data, 3, 100) != HAL_OK);//receive the data
 80008a8:	bf00      	nop
 80008aa:	7ffb      	ldrb	r3, [r7, #31]
 80008ac:	b299      	uxth	r1, r3
 80008ae:	f107 0218 	add.w	r2, r7, #24
 80008b2:	2364      	movs	r3, #100	@ 0x64
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2303      	movs	r3, #3
 80008b8:	6a38      	ldr	r0, [r7, #32]
 80008ba:	f002 fe21 	bl	8003500 <HAL_I2C_Master_Receive>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f2      	bne.n	80008aa <MS5611_read_temp+0xda>

	datastruct->D[1] = (data[0] << 16 | data[1] << 8 | data[2]);
 80008c4:	7e3b      	ldrb	r3, [r7, #24]
 80008c6:	041a      	lsls	r2, r3, #16
 80008c8:	7e7b      	ldrb	r3, [r7, #25]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	4313      	orrs	r3, r2
 80008ce:	7eba      	ldrb	r2, [r7, #26]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	461a      	mov	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	619a      	str	r2, [r3, #24]
	return MS5611_OK;
 80008d8:	2301      	movs	r3, #1
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3728      	adds	r7, #40	@ 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop

080008e4 <MS5611_read_press>:

/*
 * Function for reading raw pressure of the sensor
 */
uint8_t MS5611_read_press (I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct, uint8_t resolution)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef* Handle = I2Cx;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	623b      	str	r3, [r7, #32]
	uint8_t address = datastruct->adress;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	77fb      	strb	r3, [r7, #31]
	uint8_t reg = MS6511_ADC_READ;
 80008fc:	2300      	movs	r3, #0
 80008fe:	77bb      	strb	r3, [r7, #30]
	uint8_t data[3];
	uint8_t cmd;
	uint8_t conv_T;

	switch(resolution){
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	3b40      	subs	r3, #64	@ 0x40
 8000904:	2b08      	cmp	r3, #8
 8000906:	d833      	bhi.n	8000970 <MS5611_read_press+0x8c>
 8000908:	a201      	add	r2, pc, #4	@ (adr r2, 8000910 <MS5611_read_press+0x2c>)
 800090a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090e:	bf00      	nop
 8000910:	08000935 	.word	0x08000935
 8000914:	08000971 	.word	0x08000971
 8000918:	08000941 	.word	0x08000941
 800091c:	08000971 	.word	0x08000971
 8000920:	0800094d 	.word	0x0800094d
 8000924:	08000971 	.word	0x08000971
 8000928:	08000959 	.word	0x08000959
 800092c:	08000971 	.word	0x08000971
 8000930:	08000965 	.word	0x08000965
	case MS5611_CMD_CONVERT_D1_256 : cmd = MS5611_CMD_CONVERT_D1_256; conv_T = 1;
 8000934:	2340      	movs	r3, #64	@ 0x40
 8000936:	75fb      	strb	r3, [r7, #23]
 8000938:	2301      	movs	r3, #1
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800093e:	e01c      	b.n	800097a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_512 : cmd = MS5611_CMD_CONVERT_D1_512; conv_T = 2;
 8000940:	2342      	movs	r3, #66	@ 0x42
 8000942:	75fb      	strb	r3, [r7, #23]
 8000944:	2302      	movs	r3, #2
 8000946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800094a:	e016      	b.n	800097a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_1024 : cmd = MS5611_CMD_CONVERT_D1_1024; conv_T = 3;
 800094c:	2344      	movs	r3, #68	@ 0x44
 800094e:	75fb      	strb	r3, [r7, #23]
 8000950:	2303      	movs	r3, #3
 8000952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000956:	e010      	b.n	800097a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_2048 : cmd = MS5611_CMD_CONVERT_D1_2048; conv_T = 5;
 8000958:	2346      	movs	r3, #70	@ 0x46
 800095a:	75fb      	strb	r3, [r7, #23]
 800095c:	2305      	movs	r3, #5
 800095e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000962:	e00a      	b.n	800097a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_4096 : cmd = MS5611_CMD_CONVERT_D1_4096; conv_T = 9;
 8000964:	2348      	movs	r3, #72	@ 0x48
 8000966:	75fb      	strb	r3, [r7, #23]
 8000968:	2309      	movs	r3, #9
 800096a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800096e:	e004      	b.n	800097a <MS5611_read_press+0x96>
	default : cmd = MS5611_CMD_CONVERT_D1_4096; conv_T = 9;
 8000970:	2348      	movs	r3, #72	@ 0x48
 8000972:	75fb      	strb	r3, [r7, #23]
 8000974:	2309      	movs	r3, #9
 8000976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	while(HAL_I2C_Master_Transmit(Handle, address, &cmd, 1, 100) != HAL_OK);//asking adc to store data
 800097a:	bf00      	nop
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	b299      	uxth	r1, r3
 8000980:	f107 0217 	add.w	r2, r7, #23
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	6a38      	ldr	r0, [r7, #32]
 800098c:	f002 fcba 	bl	8003304 <HAL_I2C_Master_Transmit>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1f2      	bne.n	800097c <MS5611_read_press+0x98>
	HAL_Delay(conv_T); 														//convertion time
 8000996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fbca 	bl	8002134 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle, address, &reg, 1, 100) != HAL_OK);//asking for the data
 80009a0:	bf00      	nop
 80009a2:	7ffb      	ldrb	r3, [r7, #31]
 80009a4:	b299      	uxth	r1, r3
 80009a6:	f107 021e 	add.w	r2, r7, #30
 80009aa:	2364      	movs	r3, #100	@ 0x64
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	6a38      	ldr	r0, [r7, #32]
 80009b2:	f002 fca7 	bl	8003304 <HAL_I2C_Master_Transmit>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f2      	bne.n	80009a2 <MS5611_read_press+0xbe>
	while(HAL_I2C_Master_Receive(Handle, address, data, 3, 100) != HAL_OK);//receive the data
 80009bc:	bf00      	nop
 80009be:	7ffb      	ldrb	r3, [r7, #31]
 80009c0:	b299      	uxth	r1, r3
 80009c2:	f107 0218 	add.w	r2, r7, #24
 80009c6:	2364      	movs	r3, #100	@ 0x64
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2303      	movs	r3, #3
 80009cc:	6a38      	ldr	r0, [r7, #32]
 80009ce:	f002 fd97 	bl	8003500 <HAL_I2C_Master_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f2      	bne.n	80009be <MS5611_read_press+0xda>

	datastruct->D[0] = (data[0] << 16 | data[1] << 8 | data[2]);
 80009d8:	7e3b      	ldrb	r3, [r7, #24]
 80009da:	041a      	lsls	r2, r3, #16
 80009dc:	7e7b      	ldrb	r3, [r7, #25]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	4313      	orrs	r3, r2
 80009e2:	7eba      	ldrb	r2, [r7, #26]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	461a      	mov	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	615a      	str	r2, [r3, #20]
	return MS5611_OK;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3728      	adds	r7, #40	@ 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop

080009f8 <MS5611_calculate>:

/*
 * Function for pressure and temperature calculation
 */
uint8_t MS5611_calculate(MS5611_t* datastruct)
{
 80009f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009fc:	b0e0      	sub	sp, #384	@ 0x180
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
	int64_t dT = 0,TEMP = 0,T2 = 0,OFF = 0,OFF2 = 0,SENS2 = 0,SENS = 0,PRES = 0;
 8000a04:	f04f 0200 	mov.w	r2, #0
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	f04f 0300 	mov.w	r3, #0
 8000a30:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 8000a34:	f04f 0200 	mov.w	r2, #0
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
 8000a4c:	f04f 0200 	mov.w	r2, #0
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

	dT = datastruct->D[1] - ((int32_t) (datastruct->C[4])<<8);
 8000a64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a68:	699a      	ldr	r2, [r3, #24]
 8000a6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a6e:	895b      	ldrh	r3, [r3, #10]
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	2200      	movs	r2, #0
 8000a76:	663b      	str	r3, [r7, #96]	@ 0x60
 8000a78:	667a      	str	r2, [r7, #100]	@ 0x64
 8000a7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000a7e:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
	TEMP = 2000 + ((int32_t) (dT*(datastruct->C[5]))>>23);
 8000a82:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8000a86:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a8a:	899b      	ldrh	r3, [r3, #12]
 8000a8c:	fb02 f303 	mul.w	r3, r2, r3
 8000a90:	15db      	asrs	r3, r3, #23
 8000a92:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000a96:	17da      	asrs	r2, r3, #31
 8000a98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000a9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000a9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000aa0:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
	OFF = (((int64_t)(datastruct->C[1])) << 16) + (((datastruct->C[3]) * dT) >> 7);
 8000aa4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000aa8:	889b      	ldrh	r3, [r3, #4]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000ab2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8000ab6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8000aba:	460b      	mov	r3, r1
 8000abc:	0c1b      	lsrs	r3, r3, #16
 8000abe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	041b      	lsls	r3, r3, #16
 8000ac6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000aca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000ace:	891b      	ldrh	r3, [r3, #8]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	4693      	mov	fp, r2
 8000ad8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000adc:	fb0b f203 	mul.w	r2, fp, r3
 8000ae0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000ae4:	fb0a f303 	mul.w	r3, sl, r3
 8000ae8:	441a      	add	r2, r3
 8000aea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000aee:	fba3 450a 	umull	r4, r5, r3, sl
 8000af2:	1953      	adds	r3, r2, r5
 8000af4:	461d      	mov	r5, r3
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	09e2      	lsrs	r2, r4, #7
 8000b00:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8000b04:	11eb      	asrs	r3, r5, #7
 8000b06:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	1889      	adds	r1, r1, r2
 8000b0e:	6539      	str	r1, [r7, #80]	@ 0x50
 8000b10:	4629      	mov	r1, r5
 8000b12:	eb43 0101 	adc.w	r1, r3, r1
 8000b16:	6579      	str	r1, [r7, #84]	@ 0x54
 8000b18:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8000b1c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
	SENS = (((int64_t)(datastruct->C[0])) << 15) + (((datastruct->C[2]) * dT) >> 8);
 8000b20:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000b24:	885b      	ldrh	r3, [r3, #2]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000b2e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	f04f 0100 	mov.w	r1, #0
 8000b3a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b3e:	462b      	mov	r3, r5
 8000b40:	03d9      	lsls	r1, r3, #15
 8000b42:	4623      	mov	r3, r4
 8000b44:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8000b48:	4623      	mov	r3, r4
 8000b4a:	03d8      	lsls	r0, r3, #15
 8000b4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000b50:	88db      	ldrh	r3, [r3, #6]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8000b5e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000b62:	e9d7 ab3a 	ldrd	sl, fp, [r7, #232]	@ 0xe8
 8000b66:	465a      	mov	r2, fp
 8000b68:	fb02 f203 	mul.w	r2, r2, r3
 8000b6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000b70:	4654      	mov	r4, sl
 8000b72:	fb04 f303 	mul.w	r3, r4, r3
 8000b76:	441a      	add	r2, r3
 8000b78:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000b7c:	4654      	mov	r4, sl
 8000b7e:	fba3 8904 	umull	r8, r9, r3, r4
 8000b82:	eb02 0309 	add.w	r3, r2, r9
 8000b86:	4699      	mov	r9, r3
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	f04f 0300 	mov.w	r3, #0
 8000b90:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8000b94:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8000b98:	ea4f 2329 	mov.w	r3, r9, asr #8
 8000b9c:	1884      	adds	r4, r0, r2
 8000b9e:	64bc      	str	r4, [r7, #72]	@ 0x48
 8000ba0:	eb41 0303 	adc.w	r3, r1, r3
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ba6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8000baa:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


	if(TEMP < 2000) { //temperature < 20°C
 8000bae:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000bb2:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8000bb6:	f173 0300 	sbcs.w	r3, r3, #0
 8000bba:	f280 81d2 	bge.w	8000f62 <MS5611_calculate+0x56a>
		T2 = ( dT*dT )>>31;
 8000bbe:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8000bc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bc6:	fb03 f102 	mul.w	r1, r3, r2
 8000bca:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8000bce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	18ca      	adds	r2, r1, r3
 8000bd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bdc:	fba3 1303 	umull	r1, r3, r3, r3
 8000be0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000be4:	460b      	mov	r3, r1
 8000be6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8000c00:	4621      	mov	r1, r4
 8000c02:	0fca      	lsrs	r2, r1, #31
 8000c04:	4629      	mov	r1, r5
 8000c06:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000c0a:	4629      	mov	r1, r5
 8000c0c:	17cb      	asrs	r3, r1, #31
 8000c0e:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 8000c12:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000c16:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000c1a:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8000c1e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c26:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000c2a:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000c2e:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8000c32:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000c36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000c3a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c3e:	462b      	mov	r3, r5
 8000c40:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8000c44:	4642      	mov	r2, r8
 8000c46:	fb02 f203 	mul.w	r2, r2, r3
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	fb01 f303 	mul.w	r3, r1, r3
 8000c52:	4413      	add	r3, r2
 8000c54:	4622      	mov	r2, r4
 8000c56:	4641      	mov	r1, r8
 8000c58:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5c:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8000c60:	460a      	mov	r2, r1
 8000c62:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8000c66:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000c6a:	4413      	add	r3, r2
 8000c6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000c70:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8000c74:	4622      	mov	r2, r4
 8000c76:	462b      	mov	r3, r5
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	f04f 0100 	mov.w	r1, #0
 8000c80:	0099      	lsls	r1, r3, #2
 8000c82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c86:	0090      	lsls	r0, r2, #2
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	1851      	adds	r1, r2, r1
 8000c90:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8000c94:	4629      	mov	r1, r5
 8000c96:	eb43 0101 	adc.w	r1, r3, r1
 8000c9a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8000c9e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	0fdb      	lsrs	r3, r3, #31
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8000caa:	647a      	str	r2, [r7, #68]	@ 0x44
 8000cac:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	189b      	adds	r3, r3, r2
 8000cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cb8:	460b      	mov	r3, r1
 8000cba:	462a      	mov	r2, r5
 8000cbc:	eb42 0303 	adc.w	r3, r2, r3
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000cce:	4621      	mov	r1, r4
 8000cd0:	084a      	lsrs	r2, r1, #1
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000cd8:	4629      	mov	r1, r5
 8000cda:	104b      	asrs	r3, r1, #1
 8000cdc:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4;
 8000ce0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000ce4:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000ce8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8000cec:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000cf4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000cf8:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000cfc:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8000d00:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000d04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000d08:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000d0c:	462b      	mov	r3, r5
 8000d0e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8000d12:	4642      	mov	r2, r8
 8000d14:	fb02 f203 	mul.w	r2, r2, r3
 8000d18:	464b      	mov	r3, r9
 8000d1a:	4621      	mov	r1, r4
 8000d1c:	fb01 f303 	mul.w	r3, r1, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	4622      	mov	r2, r4
 8000d24:	4641      	mov	r1, r8
 8000d26:	fba2 1201 	umull	r1, r2, r2, r1
 8000d2a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8000d2e:	460a      	mov	r2, r1
 8000d30:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8000d34:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000d38:	4413      	add	r3, r2
 8000d3a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000d3e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8000d42:	4622      	mov	r2, r4
 8000d44:	462b      	mov	r3, r5
 8000d46:	f04f 0000 	mov.w	r0, #0
 8000d4a:	f04f 0100 	mov.w	r1, #0
 8000d4e:	0099      	lsls	r1, r3, #2
 8000d50:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d54:	0090      	lsls	r0, r2, #2
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	1851      	adds	r1, r2, r1
 8000d5e:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8000d62:	4629      	mov	r1, r5
 8000d64:	eb43 0101 	adc.w	r1, r3, r1
 8000d68:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 8000d6c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	da06      	bge.n	8000d82 <MS5611_calculate+0x38a>
 8000d74:	1cd1      	adds	r1, r2, #3
 8000d76:	6339      	str	r1, [r7, #48]	@ 0x30
 8000d78:	f143 0300 	adc.w	r3, r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	f04f 0100 	mov.w	r1, #0
 8000d8a:	0890      	lsrs	r0, r2, #2
 8000d8c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8000d90:	1099      	asrs	r1, r3, #2
 8000d92:	e9c7 015a 	strd	r0, r1, [r7, #360]	@ 0x168

		if (TEMP < -1500) { //temperature < -15°C
 8000d96:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000d9a:	49c5      	ldr	r1, [pc, #788]	@ (80010b0 <MS5611_calculate+0x6b8>)
 8000d9c:	428a      	cmp	r2, r1
 8000d9e:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8000da2:	f280 80f0 	bge.w	8000f86 <MS5611_calculate+0x58e>
			OFF2 = OFF2 + (7 * (TEMP + 1500) * (TEMP + 1500));
 8000da6:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000daa:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000dae:	1851      	adds	r1, r2, r1
 8000db0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8000db4:	f143 0300 	adc.w	r3, r3, #0
 8000db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000dbc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000dc0:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000dc4:	1851      	adds	r1, r2, r1
 8000dc6:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8000dca:	f143 0300 	adc.w	r3, r3, #0
 8000dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000dd2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8000ddc:	4642      	mov	r2, r8
 8000dde:	fb02 f203 	mul.w	r2, r2, r3
 8000de2:	464b      	mov	r3, r9
 8000de4:	4621      	mov	r1, r4
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	4622      	mov	r2, r4
 8000dee:	4641      	mov	r1, r8
 8000df0:	fba2 1201 	umull	r1, r2, r2, r1
 8000df4:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000df8:	460a      	mov	r2, r1
 8000dfa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8000dfe:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000e02:	4413      	add	r3, r2
 8000e04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000e08:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	462b      	mov	r3, r5
 8000e10:	f04f 0000 	mov.w	r0, #0
 8000e14:	f04f 0100 	mov.w	r1, #0
 8000e18:	00d9      	lsls	r1, r3, #3
 8000e1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000e1e:	00d0      	lsls	r0, r2, #3
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4621      	mov	r1, r4
 8000e26:	1a51      	subs	r1, r2, r1
 8000e28:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8000e32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e36:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8000e3a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8000e3e:	4621      	mov	r1, r4
 8000e40:	1851      	adds	r1, r2, r1
 8000e42:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000e44:	4629      	mov	r1, r5
 8000e46:	eb43 0101 	adc.w	r1, r3, r1
 8000e4a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000e4c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e50:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
			SENS2 = SENS2 + (11 * (TEMP + 1500) * (TEMP + 1500) / 2);
 8000e54:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000e58:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000e5c:	1851      	adds	r1, r2, r1
 8000e5e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8000e62:	f143 0300 	adc.w	r3, r3, #0
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000e6a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000e6e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000e72:	1851      	adds	r1, r2, r1
 8000e74:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8000e78:	f143 0300 	adc.w	r3, r3, #0
 8000e7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e80:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8000e84:	462b      	mov	r3, r5
 8000e86:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8000e8a:	4642      	mov	r2, r8
 8000e8c:	fb02 f203 	mul.w	r2, r2, r3
 8000e90:	464b      	mov	r3, r9
 8000e92:	4621      	mov	r1, r4
 8000e94:	fb01 f303 	mul.w	r3, r1, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	4622      	mov	r2, r4
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	fba2 1201 	umull	r1, r2, r2, r1
 8000ea2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8000ea6:	460a      	mov	r2, r1
 8000ea8:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8000eac:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000eb6:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8000eba:	4622      	mov	r2, r4
 8000ebc:	462b      	mov	r3, r5
 8000ebe:	1891      	adds	r1, r2, r2
 8000ec0:	6239      	str	r1, [r7, #32]
 8000ec2:	415b      	adcs	r3, r3
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000eca:	4621      	mov	r1, r4
 8000ecc:	1851      	adds	r1, r2, r1
 8000ece:	61b9      	str	r1, [r7, #24]
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	414b      	adcs	r3, r1
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	008b      	lsls	r3, r1, #2
 8000ee6:	4641      	mov	r1, r8
 8000ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000eec:	4641      	mov	r1, r8
 8000eee:	008a      	lsls	r2, r1, #2
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000efe:	460b      	mov	r3, r1
 8000f00:	462a      	mov	r2, r5
 8000f02:	eb63 0302 	sbc.w	r3, r3, r2
 8000f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f0a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8000f0e:	460b      	mov	r3, r1
 8000f10:	0fdb      	lsrs	r3, r3, #31
 8000f12:	2200      	movs	r2, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	617a      	str	r2, [r7, #20]
 8000f18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000f1c:	4623      	mov	r3, r4
 8000f1e:	4602      	mov	r2, r0
 8000f20:	189b      	adds	r3, r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	460b      	mov	r3, r1
 8000f26:	462a      	mov	r2, r5
 8000f28:	eb42 0303 	adc.w	r3, r2, r3
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	084a      	lsrs	r2, r1, #1
 8000f3e:	4629      	mov	r1, r5
 8000f40:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000f44:	4629      	mov	r1, r5
 8000f46:	104b      	asrs	r3, r1, #1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8000f50:	1814      	adds	r4, r2, r0
 8000f52:	603c      	str	r4, [r7, #0]
 8000f54:	414b      	adcs	r3, r1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f5c:	e9c7 345a 	strd	r3, r4, [r7, #360]	@ 0x168
 8000f60:	e011      	b.n	8000f86 <MS5611_calculate+0x58e>
		}
	}
	else { //temperature > 20°C
		T2 = 0;
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		OFF2 = 0;
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		SENS2 = 0;
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	}

	datastruct->dT = dT;
 8000f86:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8000f8a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f8e:	61da      	str	r2, [r3, #28]
	datastruct->OFF = OFF - OFF2;
 8000f90:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8000f94:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8000f98:	1a84      	subs	r4, r0, r2
 8000f9a:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8000f9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000fa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000fa6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000faa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8000fae:	e9c3 1208 	strd	r1, r2, [r3, #32]
	datastruct->TEMP = TEMP - T2;
 8000fb2:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000fb6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000fc2:	631a      	str	r2, [r3, #48]	@ 0x30
	datastruct->SENS = SENS - SENS2;
 8000fc4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8000fc8:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8000fcc:	1a84      	subs	r4, r0, r2
 8000fce:	67bc      	str	r4, [r7, #120]	@ 0x78
 8000fd0:	eb61 0303 	sbc.w	r3, r1, r3
 8000fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000fd6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000fda:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8000fde:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
	datastruct->end_temp = (TEMP/100);
 8000fe2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8000fe6:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	f7ff f95f 	bl	80002b0 <__aeabi_ldivmod>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34

	PRES = ((((int32_t)(datastruct->D[0]) * (datastruct->SENS))>>21) - (datastruct->OFF))>>15;
 8000ffc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	17da      	asrs	r2, r3, #31
 8001004:	673b      	str	r3, [r7, #112]	@ 0x70
 8001006:	677a      	str	r2, [r7, #116]	@ 0x74
 8001008:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800100c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001010:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001014:	4629      	mov	r1, r5
 8001016:	fb02 f001 	mul.w	r0, r2, r1
 800101a:	4621      	mov	r1, r4
 800101c:	fb01 f103 	mul.w	r1, r1, r3
 8001020:	4401      	add	r1, r0
 8001022:	4620      	mov	r0, r4
 8001024:	fba0 2302 	umull	r2, r3, r0, r2
 8001028:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800102c:	4613      	mov	r3, r2
 800102e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001036:	18cb      	adds	r3, r1, r3
 8001038:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001048:	4621      	mov	r1, r4
 800104a:	0d4a      	lsrs	r2, r1, #21
 800104c:	4629      	mov	r1, r5
 800104e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001052:	4629      	mov	r1, r5
 8001054:	154b      	asrs	r3, r1, #21
 8001056:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800105a:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800105e:	1a14      	subs	r4, r2, r0
 8001060:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001062:	eb63 0301 	sbc.w	r3, r3, r1
 8001066:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001074:	4621      	mov	r1, r4
 8001076:	0bca      	lsrs	r2, r1, #15
 8001078:	4629      	mov	r1, r5
 800107a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800107e:	4629      	mov	r1, r5
 8001080:	13cb      	asrs	r3, r1, #15
 8001082:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

	datastruct->end_pres = (PRES / 100);
 8001086:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800108a:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f7ff f90d 	bl	80002b0 <__aeabi_ldivmod>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800109e:	63da      	str	r2, [r3, #60]	@ 0x3c
	return MS5611_OK;
 80010a0:	2301      	movs	r3, #1
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80010a8:	46bd      	mov	sp, r7
 80010aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010ae:	bf00      	nop
 80010b0:	fffffa24 	.word	0xfffffa24

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_DMA_Init+0x4c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001100 <MX_DMA_Init+0x4c>)
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001100 <MX_DMA_Init+0x4c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	203b      	movs	r0, #59	@ 0x3b
 80010dc:	f001 f929 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010e0:	203b      	movs	r0, #59	@ 0x3b
 80010e2:	f001 f942 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2045      	movs	r0, #69	@ 0x45
 80010ec:	f001 f921 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010f0:	2045      	movs	r0, #69	@ 0x45
 80010f2:	f001 f93a 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <MX_FMPI2C1_Init>:

FMPI2C_HandleTypeDef hfmpi2c1;

/* FMPI2C1 init function */
void MX_FMPI2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <MX_FMPI2C1_Init+0x64>)
 800110c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00808CD2;
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 8001110:	4a16      	ldr	r2, [pc, #88]	@ (800116c <MX_FMPI2C1_Init+0x68>)
 8001112:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 800111c:	2201      	movs	r2, #1
 800111e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001132:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001138:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800113e:	4809      	ldr	r0, [pc, #36]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 8001140:	f001 fccc 	bl	8002adc <HAL_FMPI2C_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800114a:	f000 fbcd 	bl	80018e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MX_FMPI2C1_Init+0x60>)
 8001152:	f001 fd5e 	bl	8002c12 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 800115c:	f000 fbc4 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000017c 	.word	0x2000017c
 8001168:	40006000 	.word	0x40006000
 800116c:	00808cd2 	.word	0x00808cd2

08001170 <HAL_FMPI2C_MspInit>:

void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* fmpi2cHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0a0      	sub	sp, #128	@ 0x80
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	225c      	movs	r2, #92	@ 0x5c
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f00c f84d 	bl	800d230 <memset>
  if(fmpi2cHandle->Instance==FMPI2C1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a20      	ldr	r2, [pc, #128]	@ (800121c <HAL_FMPI2C_MspInit+0xac>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d139      	bne.n	8001214 <HAL_FMPI2C_MspInit+0xa4>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80011a4:	2300      	movs	r3, #0
 80011a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4618      	mov	r0, r3
 80011ae:	f004 fb15 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 80011b8:	f000 fb96 	bl	80018e8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <HAL_FMPI2C_MspInit+0xb0>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c4:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <HAL_FMPI2C_MspInit+0xb0>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80011cc:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <HAL_FMPI2C_MspInit+0xb0>)
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011d8:	23c0      	movs	r3, #192	@ 0xc0
 80011da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	@ (8001224 <HAL_FMPI2C_MspInit+0xb4>)
 80011f4:	f001 fd58 	bl	8002ca8 <HAL_GPIO_Init>

    /* FMPI2C1 clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_FMPI2C_MspInit+0xb0>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_FMPI2C_MspInit+0xb0>)
 8001202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_FMPI2C_MspInit+0xb0>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }
}
 8001214:	bf00      	nop
 8001216:	3780      	adds	r7, #128	@ 0x80
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40006000 	.word	0x40006000
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800

08001228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	@ 0x28
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b78      	ldr	r3, [pc, #480]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a77      	ldr	r2, [pc, #476]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b75      	ldr	r3, [pc, #468]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b71      	ldr	r3, [pc, #452]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a70      	ldr	r2, [pc, #448]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b6e      	ldr	r3, [pc, #440]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b6a      	ldr	r3, [pc, #424]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a69      	ldr	r2, [pc, #420]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b67      	ldr	r3, [pc, #412]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b63      	ldr	r3, [pc, #396]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a62      	ldr	r2, [pc, #392]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b60      	ldr	r3, [pc, #384]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
 80012b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b59      	ldr	r3, [pc, #356]	@ (8001424 <MX_GPIO_Init+0x1fc>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, N_USERL1_Pin|N_USERL2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2106      	movs	r1, #6
 80012ce:	4856      	ldr	r0, [pc, #344]	@ (8001428 <MX_GPIO_Init+0x200>)
 80012d0:	f001 fe96 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, N_98PW_RST_Pin|N_98PW_NSS_Pin|N_BUZZER_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f248 0118 	movw	r1, #32792	@ 0x8018
 80012da:	4854      	ldr	r0, [pc, #336]	@ (800142c <MX_GPIO_Init+0x204>)
 80012dc:	f001 fe90 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|N_fire_b_Pin|N_fire_a_Pin, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 80012e6:	4852      	ldr	r0, [pc, #328]	@ (8001430 <MX_GPIO_Init+0x208>)
 80012e8:	f001 fe8a 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_INPUT_Pin;
 80012ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_INPUT_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	4849      	ldr	r0, [pc, #292]	@ (8001428 <MX_GPIO_Init+0x200>)
 8001302:	f001 fcd1 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_sense_b_Pin;
 8001306:	2301      	movs	r3, #1
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_sense_b_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4843      	ldr	r0, [pc, #268]	@ (8001428 <MX_GPIO_Init+0x200>)
 800131a:	f001 fcc5 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = N_USERL1_Pin|N_USERL2_Pin;
 800131e:	2306      	movs	r3, #6
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001326:	2302      	movs	r3, #2
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	483c      	ldr	r0, [pc, #240]	@ (8001428 <MX_GPIO_Init+0x200>)
 8001336:	f001 fcb7 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_sense_a_Pin;
 800133a:	2304      	movs	r3, #4
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_sense_a_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4837      	ldr	r0, [pc, #220]	@ (800142c <MX_GPIO_Init+0x204>)
 800134e:	f001 fcab 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = N_98PW_RST_Pin|N_98PW_NSS_Pin;
 8001352:	2318      	movs	r3, #24
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135a:	2301      	movs	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4830      	ldr	r0, [pc, #192]	@ (800142c <MX_GPIO_Init+0x204>)
 800136a:	f001 fc9d 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = N_98PW_DIO0_Pin|N_98PW_DIO1_Pin;
 800136e:	2330      	movs	r3, #48	@ 0x30
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001372:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	4829      	ldr	r0, [pc, #164]	@ (8001428 <MX_GPIO_Init+0x200>)
 8001384:	f001 fc90 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4823      	ldr	r0, [pc, #140]	@ (8001430 <MX_GPIO_Init+0x208>)
 80013a2:	f001 fc81 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_BUZZER_Pin;
 80013a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N_BUZZER_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	481b      	ldr	r0, [pc, #108]	@ (800142c <MX_GPIO_Init+0x204>)
 80013c0:	f001 fc72 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_USER_BUTTON_Pin;
 80013c4:	2320      	movs	r3, #32
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4816      	ldr	r0, [pc, #88]	@ (8001430 <MX_GPIO_Init+0x208>)
 80013d8:	f001 fc66 	bl	8002ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = N_fire_b_Pin|N_fire_a_Pin;
 80013dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480e      	ldr	r0, [pc, #56]	@ (8001430 <MX_GPIO_Init+0x208>)
 80013f6:	f001 fc57 	bl	8002ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	200a      	movs	r0, #10
 8001400:	f000 ff97 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001404:	200a      	movs	r0, #10
 8001406:	f000 ffb0 	bl	800236a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2017      	movs	r0, #23
 8001410:	f000 ff8f 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001414:	2017      	movs	r0, #23
 8001416:	f000 ffa8 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	@ 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40020800 	.word	0x40020800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400

08001434 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <MX_I2C1_Init+0x50>)
 800143a:	4a13      	ldr	r2, [pc, #76]	@ (8001488 <MX_I2C1_Init+0x54>)
 800143c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001440:	4a12      	ldr	r2, [pc, #72]	@ (800148c <MX_I2C1_Init+0x58>)
 8001442:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001452:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001456:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <MX_I2C1_Init+0x50>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <MX_I2C1_Init+0x50>)
 8001472:	f001 fe03 	bl	800307c <HAL_I2C_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800147c:	f000 fa34 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200001d0 	.word	0x200001d0
 8001488:	40005400 	.word	0x40005400
 800148c:	000186a0 	.word	0x000186a0

08001490 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_I2C2_Init+0x50>)
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <MX_I2C2_Init+0x54>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_I2C2_Init+0x50>)
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_I2C2_Init+0x58>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_I2C2_Init+0x50>)
 80014ce:	f001 fdd5 	bl	800307c <HAL_I2C_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014d8:	f000 fa06 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000224 	.word	0x20000224
 80014e4:	40005800 	.word	0x40005800
 80014e8:	000186a0 	.word	0x000186a0

080014ec <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <MX_I2C3_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	@ (8001540 <MX_I2C3_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_I2C3_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_I2C3_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_I2C3_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_I2C3_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_I2C3_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <MX_I2C3_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_I2C3_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <MX_I2C3_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_I2C3_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_I2C3_Init+0x50>)
 800152a:	f001 fda7 	bl	800307c <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 f9d8 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000278 	.word	0x20000278
 8001540:	40005c00 	.word	0x40005c00
 8001544:	000186a0 	.word	0x000186a0

08001548 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b090      	sub	sp, #64	@ 0x40
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6b      	ldr	r2, [pc, #428]	@ (8001714 <HAL_I2C_MspInit+0x1cc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12c      	bne.n	80015c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800156e:	4b6a      	ldr	r3, [pc, #424]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a69      	ldr	r2, [pc, #420]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b67      	ldr	r3, [pc, #412]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001586:	23c0      	movs	r3, #192	@ 0xc0
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158a:	2312      	movs	r3, #18
 800158c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001596:	2304      	movs	r3, #4
 8001598:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800159e:	4619      	mov	r1, r3
 80015a0:	485e      	ldr	r0, [pc, #376]	@ (800171c <HAL_I2C_MspInit+0x1d4>)
 80015a2:	f001 fb81 	bl	8002ca8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b58      	ldr	r3, [pc, #352]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015c2:	e0a2      	b.n	800170a <HAL_I2C_MspInit+0x1c2>
  else if(i2cHandle->Instance==I2C2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a55      	ldr	r2, [pc, #340]	@ (8001720 <HAL_I2C_MspInit+0x1d8>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d14c      	bne.n	8001668 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
 80015d2:	4b51      	ldr	r3, [pc, #324]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a50      	ldr	r2, [pc, #320]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b4e      	ldr	r3, [pc, #312]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
 80015e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a49      	ldr	r2, [pc, #292]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b47      	ldr	r3, [pc, #284]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	2312      	movs	r3, #18
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001618:	2304      	movs	r3, #4
 800161a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001620:	4619      	mov	r1, r3
 8001622:	483e      	ldr	r0, [pc, #248]	@ (800171c <HAL_I2C_MspInit+0x1d4>)
 8001624:	f001 fb40 	bl	8002ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162e:	2312      	movs	r3, #18
 8001630:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800163a:	2304      	movs	r3, #4
 800163c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001642:	4619      	mov	r1, r3
 8001644:	4837      	ldr	r0, [pc, #220]	@ (8001724 <HAL_I2C_MspInit+0x1dc>)
 8001646:	f001 fb2f 	bl	8002ca8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	4b32      	ldr	r3, [pc, #200]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	4a31      	ldr	r2, [pc, #196]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001654:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001658:	6413      	str	r3, [r2, #64]	@ 0x40
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]
}
 8001666:	e050      	b.n	800170a <HAL_I2C_MspInit+0x1c2>
  else if(i2cHandle->Instance==I2C3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a2e      	ldr	r2, [pc, #184]	@ (8001728 <HAL_I2C_MspInit+0x1e0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d14b      	bne.n	800170a <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a27      	ldr	r2, [pc, #156]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a20      	ldr	r2, [pc, #128]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b0:	2312      	movs	r3, #18
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016bc:	2304      	movs	r3, #4
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4817      	ldr	r0, [pc, #92]	@ (8001724 <HAL_I2C_MspInit+0x1dc>)
 80016c8:	f001 faee 	bl	8002ca8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016de:	2304      	movs	r3, #4
 80016e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e6:	4619      	mov	r1, r3
 80016e8:	4810      	ldr	r0, [pc, #64]	@ (800172c <HAL_I2C_MspInit+0x1e4>)
 80016ea:	f001 fadd 	bl	8002ca8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 80016f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_I2C_MspInit+0x1d0>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3740      	adds	r7, #64	@ 0x40
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005400 	.word	0x40005400
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400
 8001720:	40005800 	.word	0x40005800
 8001724:	40020800 	.word	0x40020800
 8001728:	40005c00 	.word	0x40005c00
 800172c:	40020000 	.word	0x40020000

08001730 <USB_VCP_ProcessData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_VCP_ProcessData(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b092      	sub	sp, #72	@ 0x48
 8001734:	af02      	add	r7, sp, #8
    // Sıcaklık ve basınç verilerini oku
    if (MS5611_read_temp(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D2_4096) == MS5611_OK &&
 8001736:	2258      	movs	r2, #88	@ 0x58
 8001738:	4919      	ldr	r1, [pc, #100]	@ (80017a0 <USB_VCP_ProcessData+0x70>)
 800173a:	481a      	ldr	r0, [pc, #104]	@ (80017a4 <USB_VCP_ProcessData+0x74>)
 800173c:	f7ff f848 	bl	80007d0 <MS5611_read_temp>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	d127      	bne.n	8001796 <USB_VCP_ProcessData+0x66>
        MS5611_read_press(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D1_4096) == MS5611_OK &&
 8001746:	2248      	movs	r2, #72	@ 0x48
 8001748:	4915      	ldr	r1, [pc, #84]	@ (80017a0 <USB_VCP_ProcessData+0x70>)
 800174a:	4816      	ldr	r0, [pc, #88]	@ (80017a4 <USB_VCP_ProcessData+0x74>)
 800174c:	f7ff f8ca 	bl	80008e4 <MS5611_read_press>
 8001750:	4603      	mov	r3, r0
    if (MS5611_read_temp(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D2_4096) == MS5611_OK &&
 8001752:	2b01      	cmp	r3, #1
 8001754:	d11f      	bne.n	8001796 <USB_VCP_ProcessData+0x66>
        MS5611_calculate(&ms5611_data) == MS5611_OK)
 8001756:	4812      	ldr	r0, [pc, #72]	@ (80017a0 <USB_VCP_ProcessData+0x70>)
 8001758:	f7ff f94e 	bl	80009f8 <MS5611_calculate>
 800175c:	4603      	mov	r3, r0
        MS5611_read_press(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D1_4096) == MS5611_OK &&
 800175e:	2b01      	cmp	r3, #1
 8001760:	d119      	bne.n	8001796 <USB_VCP_ProcessData+0x66>
    {
        int32_t pressure = ms5611_data.end_pres;
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <USB_VCP_ProcessData+0x70>)
 8001764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int32_t temperature = ms5611_data.end_temp;
 8001768:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <USB_VCP_ProcessData+0x70>)
 800176a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800176c:	63bb      	str	r3, [r7, #56]	@ 0x38

        char buffer[50];
            int len = snprintf(buffer, sizeof(buffer), "Pressure: %ld mB, Temperature: %ld C\n", pressure, temperature);
 800176e:	4638      	mov	r0, r7
 8001770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001776:	4a0c      	ldr	r2, [pc, #48]	@ (80017a8 <USB_VCP_ProcessData+0x78>)
 8001778:	2132      	movs	r1, #50	@ 0x32
 800177a:	f00b fd25 	bl	800d1c8 <sniprintf>
 800177e:	6378      	str	r0, [r7, #52]	@ 0x34

          

                 // Sıcaklık ve basınç verilerini gönder
                 while (CDC_Transmit_FS((uint8_t*)buffer, len))
 8001780:	bf00      	nop
 8001782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001784:	b29a      	uxth	r2, r3
 8001786:	463b      	mov	r3, r7
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f00b f84a 	bl	800c824 <CDC_Transmit_FS>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f5      	bne.n	8001782 <USB_VCP_ProcessData+0x52>

    }



}
 8001796:	bf00      	nop
 8001798:	3740      	adds	r7, #64	@ 0x40
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002d0 	.word	0x200002d0
 80017a4:	200001d0 	.word	0x200001d0
 80017a8:	0800db50 	.word	0x0800db50

080017ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b0:	f000 fc4e 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b4:	f000 f82c 	bl	8001810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017b8:	f7ff fd36 	bl	8001228 <MX_GPIO_Init>
  MX_DMA_Init();
 80017bc:	f7ff fc7a 	bl	80010b4 <MX_DMA_Init>
  MX_FMPI2C1_Init();
 80017c0:	f7ff fca0 	bl	8001104 <MX_FMPI2C1_Init>
  MX_I2C1_Init();
 80017c4:	f7ff fe36 	bl	8001434 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017c8:	f7ff fe62 	bl	8001490 <MX_I2C2_Init>
  MX_I2C3_Init();
 80017cc:	f7ff fe8e 	bl	80014ec <MX_I2C3_Init>
  MX_SDIO_SD_Init();
 80017d0:	f000 f890 	bl	80018f4 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80017d4:	f000 f9ee 	bl	8001bb4 <MX_SPI1_Init>
  MX_UART4_Init();
 80017d8:	f000 fb40 	bl	8001e5c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017dc:	f000 fb68 	bl	8001eb0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80017e0:	f008 fcca 	bl	800a178 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80017e4:	f00a ff60 	bl	800c6a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
      MS5611_Rest(&hi2c1);
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <main+0x5c>)
 80017ea:	f7fe ff29 	bl	8000640 <MS5611_Rest>
      MS5611_init(&hi2c1, &ms5611_data);
 80017ee:	4907      	ldr	r1, [pc, #28]	@ (800180c <main+0x60>)
 80017f0:	4805      	ldr	r0, [pc, #20]	@ (8001808 <main+0x5c>)
 80017f2:	f7fe ffd9 	bl	80007a8 <MS5611_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  USB_VCP_ProcessData();  // Sıcaklık ve basınç verilerini al ve USB VCP üzerinden gönder
 80017f6:	f7ff ff9b 	bl	8001730 <USB_VCP_ProcessData>
	       HAL_Delay(1000);
 80017fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017fe:	f000 fc99 	bl	8002134 <HAL_Delay>
	  USB_VCP_ProcessData();  // Sıcaklık ve basınç verilerini al ve USB VCP üzerinden gönder
 8001802:	bf00      	nop
 8001804:	e7f7      	b.n	80017f6 <main+0x4a>
 8001806:	bf00      	nop
 8001808:	200001d0 	.word	0x200001d0
 800180c:	200002d0 	.word	0x200002d0

08001810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b094      	sub	sp, #80	@ 0x50
 8001814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	2234      	movs	r2, #52	@ 0x34
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f00b fd06 	bl	800d230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	4b29      	ldr	r3, [pc, #164]	@ (80018e0 <SystemClock_Config+0xd0>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <SystemClock_Config+0xd0>)
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001842:	6413      	str	r3, [r2, #64]	@ 0x40
 8001844:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <SystemClock_Config+0xd0>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001850:	2300      	movs	r3, #0
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <SystemClock_Config+0xd4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800185c:	4a21      	ldr	r2, [pc, #132]	@ (80018e4 <SystemClock_Config+0xd4>)
 800185e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <SystemClock_Config+0xd4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001870:	2301      	movs	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187a:	2302      	movs	r3, #2
 800187c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800187e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001882:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001884:	2304      	movs	r3, #4
 8001886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001888:	2348      	movs	r3, #72	@ 0x48
 800188a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800188c:	2302      	movs	r3, #2
 800188e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001890:	2303      	movs	r3, #3
 8001892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001894:	2302      	movs	r3, #2
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4618      	mov	r0, r3
 800189e:	f004 fcf7 	bl	8006290 <HAL_RCC_OscConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80018a8:	f000 f81e 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ac:	230f      	movs	r3, #15
 80018ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80018b0:	2303      	movs	r3, #3
 80018b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2102      	movs	r1, #2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fe6d 	bl	80055a8 <HAL_RCC_ClockConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80018d4:	f000 f808 	bl	80018e8 <Error_Handler>
  }
}
 80018d8:	bf00      	nop
 80018da:	3750      	adds	r7, #80	@ 0x50
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <Error_Handler+0x8>

080018f4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <MX_SDIO_SD_Init+0x38>)
 80018fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <MX_SDIO_SD_Init+0x3c>)
 80018fc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <MX_SDIO_SD_Init+0x38>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <MX_SDIO_SD_Init+0x38>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800190a:	4b08      	ldr	r3, [pc, #32]	@ (800192c <MX_SDIO_SD_Init+0x38>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <MX_SDIO_SD_Init+0x38>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001916:	4b05      	ldr	r3, [pc, #20]	@ (800192c <MX_SDIO_SD_Init+0x38>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <MX_SDIO_SD_Init+0x38>)
 800191e:	2204      	movs	r2, #4
 8001920:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	20000310 	.word	0x20000310
 8001930:	40012c00 	.word	0x40012c00

08001934 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0a2      	sub	sp, #136	@ 0x88
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	225c      	movs	r2, #92	@ 0x5c
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f00b fc6b 	bl	800d230 <memset>
  if(sdHandle->Instance==SDIO)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a8c      	ldr	r2, [pc, #560]	@ (8001b90 <HAL_SD_MspInit+0x25c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	f040 8111 	bne.w	8001b88 <HAL_SD_MspInit+0x254>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001966:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800196a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800196c:	2300      	movs	r3, #0
 800196e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001970:	2300      	movs	r3, #0
 8001972:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	4618      	mov	r0, r3
 800197a:	f003 ff2f 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001984:	f7ff ffb0 	bl	80018e8 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	4b81      	ldr	r3, [pc, #516]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 800198e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001990:	4a80      	ldr	r2, [pc, #512]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 8001992:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001996:	6453      	str	r3, [r2, #68]	@ 0x44
 8001998:	4b7e      	ldr	r3, [pc, #504]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ac:	4a79      	ldr	r2, [pc, #484]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b4:	4b77      	ldr	r3, [pc, #476]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4b73      	ldr	r3, [pc, #460]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	4a72      	ldr	r2, [pc, #456]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d0:	4b70      	ldr	r3, [pc, #448]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	4a6b      	ldr	r2, [pc, #428]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ec:	4b69      	ldr	r3, [pc, #420]	@ (8001b94 <HAL_SD_MspInit+0x260>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80019f8:	2307      	movs	r3, #7
 80019fa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a14:	4619      	mov	r1, r3
 8001a16:	4860      	ldr	r0, [pc, #384]	@ (8001b98 <HAL_SD_MspInit+0x264>)
 8001a18:	f001 f946 	bl	8002ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a20:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a30:	230c      	movs	r3, #12
 8001a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4857      	ldr	r0, [pc, #348]	@ (8001b9c <HAL_SD_MspInit+0x268>)
 8001a3e:	f001 f933 	bl	8002ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a46:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a50:	2303      	movs	r3, #3
 8001a52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a56:	230c      	movs	r3, #12
 8001a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a60:	4619      	mov	r1, r3
 8001a62:	484e      	ldr	r0, [pc, #312]	@ (8001b9c <HAL_SD_MspInit+0x268>)
 8001a64:	f001 f920 	bl	8002ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a84:	4619      	mov	r1, r3
 8001a86:	4846      	ldr	r0, [pc, #280]	@ (8001ba0 <HAL_SD_MspInit+0x26c>)
 8001a88:	f001 f90e 	bl	8002ca8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001a8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001a8e:	4a46      	ldr	r2, [pc, #280]	@ (8001ba8 <HAL_SD_MspInit+0x274>)
 8001a90:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001a92:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001a94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a98:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa0:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001aa8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aac:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ab0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ab4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ab8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001abc:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001abe:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac4:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001aca:	4b36      	ldr	r3, [pc, #216]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001acc:	2204      	movs	r2, #4
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ad0:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001ad6:	4b33      	ldr	r3, [pc, #204]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ad8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001adc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001ade:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ae0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001ae6:	482f      	ldr	r0, [pc, #188]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001ae8:	f000 fc5a 	bl	80023a0 <HAL_DMA_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_SD_MspInit+0x1c2>
    {
      Error_Handler();
 8001af2:	f7ff fef9 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001afa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001afc:	4a29      	ldr	r2, [pc, #164]	@ (8001ba4 <HAL_SD_MspInit+0x270>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001b02:	4b2a      	ldr	r3, [pc, #168]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b04:	4a2a      	ldr	r2, [pc, #168]	@ (8001bb0 <HAL_SD_MspInit+0x27c>)
 8001b06:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001b08:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b0e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b10:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b12:	2240      	movs	r2, #64	@ 0x40
 8001b14:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b16:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b22:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b24:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b2a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b32:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b36:	2220      	movs	r2, #32
 8001b38:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b42:	2204      	movs	r2, #4
 8001b44:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b46:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b48:	2203      	movs	r2, #3
 8001b4a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b56:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001b5c:	4813      	ldr	r0, [pc, #76]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b5e:	f000 fc1f 	bl	80023a0 <HAL_DMA_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_SD_MspInit+0x238>
    {
      Error_Handler();
 8001b68:	f7ff febe 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b72:	4a0e      	ldr	r2, [pc, #56]	@ (8001bac <HAL_SD_MspInit+0x278>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2031      	movs	r0, #49	@ 0x31
 8001b7e:	f000 fbd8 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001b82:	2031      	movs	r0, #49	@ 0x31
 8001b84:	f000 fbf1 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3788      	adds	r7, #136	@ 0x88
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	20000394 	.word	0x20000394
 8001ba8:	40026458 	.word	0x40026458
 8001bac:	200003f4 	.word	0x200003f4
 8001bb0:	400264a0 	.word	0x400264a0

08001bb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bba:	4a18      	ldr	r2, [pc, #96]	@ (8001c1c <MX_SPI1_Init+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001be6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001be8:	2210      	movs	r2, #16
 8001bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001c00:	220a      	movs	r2, #10
 8001c02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	@ (8001c18 <MX_SPI1_Init+0x64>)
 8001c06:	f005 fefb 	bl	8007a00 <HAL_SPI_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c10:	f7ff fe6a 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000454 	.word	0x20000454
 8001c1c:	40013000 	.word	0x40013000

08001c20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	@ 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ca4 <HAL_SPI_MspInit+0x84>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d12b      	bne.n	8001c9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c52:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a10      	ldr	r2, [pc, #64]	@ (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_SPI_MspInit+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = N_98PW_SCK_Pin|N_98PW_MISO_Pin|N_98PW_MOSI_Pin;
 8001c7a:	23e0      	movs	r3, #224	@ 0xe0
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <HAL_SPI_MspInit+0x8c>)
 8001c96:	f001 f807 	bl	8002ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	@ 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40013000 	.word	0x40013000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <NMI_Handler+0x4>

08001d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <MemManage_Handler+0x4>

08001d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d56:	f000 f9cd 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_98PW_DIO0_Pin);
 8001d62:	2010      	movs	r0, #16
 8001d64:	f001 f966 	bl	8003034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_98PW_DIO1_Pin);
 8001d70:	2020      	movs	r0, #32
 8001d72:	f001 f95f 	bl	8003034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <SDIO_IRQHandler+0x10>)
 8001d82:	f004 ff95 	bl	8006cb0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000310 	.word	0x20000310

08001d90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <DMA2_Stream3_IRQHandler+0x10>)
 8001d96:	f000 fc2b 	bl	80025f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000394 	.word	0x20000394

08001da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <OTG_FS_IRQHandler+0x10>)
 8001daa:	f002 faac 	bl	8004306 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20001a40 	.word	0x20001a40

08001db8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <DMA2_Stream6_IRQHandler+0x10>)
 8001dbe:	f000 fc17 	bl	80025f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200003f4 	.word	0x200003f4

08001dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd4:	4a14      	ldr	r2, [pc, #80]	@ (8001e28 <_sbrk+0x5c>)
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <_sbrk+0x60>)
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <_sbrk+0x64>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	@ (8001e34 <_sbrk+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <_sbrk+0x64>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d207      	bcs.n	8001e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dfc:	f00b fa20 	bl	800d240 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	220c      	movs	r2, #12
 8001e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e009      	b.n	8001e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <_sbrk+0x64>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	4a05      	ldr	r2, [pc, #20]	@ (8001e30 <_sbrk+0x64>)
 8001e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20020000 	.word	0x20020000
 8001e2c:	00000400 	.word	0x00000400
 8001e30:	200004ac 	.word	0x200004ac
 8001e34:	20002290 	.word	0x20002290

08001e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <SystemInit+0x20>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e42:	4a05      	ldr	r2, [pc, #20]	@ (8001e58 <SystemInit+0x20>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <MX_UART4_Init+0x50>)
 8001e64:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e6c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e82:	220c      	movs	r2, #12
 8001e84:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_UART4_Init+0x4c>)
 8001e94:	f005 fe3d 	bl	8007b12 <HAL_UART_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e9e:	f7ff fd23 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200004b0 	.word	0x200004b0
 8001eac:	40004c00 	.word	0x40004c00

08001eb0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001eb6:	4a12      	ldr	r2, [pc, #72]	@ (8001f00 <MX_USART1_UART_Init+0x50>)
 8001eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <MX_USART1_UART_Init+0x4c>)
 8001ee8:	f005 fe13 	bl	8007b12 <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ef2:	f7ff fcf9 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200004f8 	.word	0x200004f8
 8001f00:	40011000 	.word	0x40011000

08001f04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	@ 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a32      	ldr	r2, [pc, #200]	@ (8001fec <HAL_UART_MspInit+0xe8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d12c      	bne.n	8001f80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a30      	ldr	r2, [pc, #192]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a29      	ldr	r2, [pc, #164]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f6e:	2308      	movs	r3, #8
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	4619      	mov	r1, r3
 8001f78:	481e      	ldr	r0, [pc, #120]	@ (8001ff4 <HAL_UART_MspInit+0xf0>)
 8001f7a:	f000 fe95 	bl	8002ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f7e:	e031      	b.n	8001fe4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_UART_MspInit+0xf4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12c      	bne.n	8001fe4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <HAL_UART_MspInit+0xec>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <HAL_UART_MspInit+0xf0>)
 8001fe0:	f000 fe62 	bl	8002ca8 <HAL_GPIO_Init>
}
 8001fe4:	bf00      	nop
 8001fe6:	3730      	adds	r7, #48	@ 0x30
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40004c00 	.word	0x40004c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40011000 	.word	0x40011000

08001ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002034 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002000:	f7ff ff1a 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480c      	ldr	r0, [pc, #48]	@ (8002038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002006:	490d      	ldr	r1, [pc, #52]	@ (800203c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800201c:	4c0a      	ldr	r4, [pc, #40]	@ (8002048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800202a:	f00b f90f 	bl	800d24c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202e:	f7ff fbbd 	bl	80017ac <main>
  bx  lr    
 8002032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8002040:	0800dc34 	.word	0x0800dc34
  ldr r2, =_sbss
 8002044:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002048:	2000228c 	.word	0x2000228c

0800204c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002054:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <HAL_Init+0x40>)
 800205a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <HAL_Init+0x40>)
 8002066:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800206a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a07      	ldr	r2, [pc, #28]	@ (8002090 <HAL_Init+0x40>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 f94f 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207e:	200f      	movs	r0, #15
 8002080:	f000 f808 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002084:	f7ff fe14 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_InitTick+0x54>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <HAL_InitTick+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f967 	bl	8002386 <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 f92f 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	@ (80020f0 <HAL_InitTick+0x5c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000008 	.word	0x20000008
 8002118:	20000540 	.word	0x20000540

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000540 	.word	0x20000540

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	@ (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff feb6 	bl	800211c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e099      	b.n	80024f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023dc:	e00f      	b.n	80023fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023de:	f7ff fe9d 	bl	800211c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d908      	bls.n	80023fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e078      	b.n	80024f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e8      	bne.n	80023de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <HAL_DMA_Init+0x158>)
 8002418:	4013      	ands	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	2b04      	cmp	r3, #4
 8002456:	d107      	bne.n	8002468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	4313      	orrs	r3, r2
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0307 	bic.w	r3, r3, #7
 800247e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	2b04      	cmp	r3, #4
 8002490:	d117      	bne.n	80024c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fa9d 	bl	80029e4 <DMA_CheckFifoParam>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024be:	2301      	movs	r3, #1
 80024c0:	e016      	b.n	80024f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa54 	bl	8002978 <DMA_CalcBaseAndBitshift>
 80024d0:	4603      	mov	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	223f      	movs	r2, #63	@ 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	f010803f 	.word	0xf010803f

080024fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_DMA_Start_IT+0x26>
 800251e:	2302      	movs	r3, #2
 8002520:	e040      	b.n	80025a4 <HAL_DMA_Start_IT+0xa8>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d12f      	bne.n	8002596 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2202      	movs	r2, #2
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f9e6 	bl	800291c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	223f      	movs	r2, #63	@ 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0216 	orr.w	r2, r2, #22
 800256a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e005      	b.n	80025a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d004      	beq.n	80025ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00c      	b.n	80025e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2205      	movs	r2, #5
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002838 <HAL_DMA_IRQHandler+0x248>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a8e      	ldr	r2, [pc, #568]	@ (800283c <HAL_DMA_IRQHandler+0x24c>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a9b      	lsrs	r3, r3, #10
 8002608:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261a:	2208      	movs	r2, #8
 800261c:	409a      	lsls	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01a      	beq.n	800265c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0204 	bic.w	r2, r2, #4
 8002642:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	2208      	movs	r2, #8
 800264a:	409a      	lsls	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2201      	movs	r2, #1
 8002680:	409a      	lsls	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	f043 0202 	orr.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	2204      	movs	r2, #4
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d012      	beq.n	80026c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00b      	beq.n	80026c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	2204      	movs	r2, #4
 80026b6:	409a      	lsls	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	f043 0204 	orr.w	r2, r3, #4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2210      	movs	r2, #16
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d043      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d03c      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	2210      	movs	r2, #16
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d024      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
 800271e:	e01f      	b.n	8002760 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
 8002730:	e016      	b.n	8002760 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0208 	bic.w	r2, r2, #8
 800274e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	2220      	movs	r2, #32
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 808f 	beq.w	8002890 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8087 	beq.w	8002890 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	2220      	movs	r2, #32
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b05      	cmp	r3, #5
 8002798:	d136      	bne.n	8002808 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0216 	bic.w	r2, r2, #22
 80027a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_DMA_IRQHandler+0x1da>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0208 	bic.w	r2, r2, #8
 80027d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	223f      	movs	r2, #63	@ 0x3f
 80027e0:	409a      	lsls	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d07e      	beq.n	80028fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
        }
        return;
 8002806:	e079      	b.n	80028fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	2b00      	cmp	r3, #0
 800282a:	d031      	beq.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e02c      	b.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
 8002836:	bf00      	nop
 8002838:	20000000 	.word	0x20000000
 800283c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d023      	beq.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
 8002850:	e01e      	b.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0210 	bic.w	r2, r2, #16
 800286e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	2b00      	cmp	r3, #0
 8002896:	d032      	beq.n	80028fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2205      	movs	r2, #5
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	3301      	adds	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d307      	bcc.n	80028d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f2      	bne.n	80028bc <HAL_DMA_IRQHandler+0x2cc>
 80028d6:	e000      	b.n	80028da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
 80028fa:	e000      	b.n	80028fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80028fc:	bf00      	nop
    }
  }
}
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002938:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b40      	cmp	r3, #64	@ 0x40
 8002948:	d108      	bne.n	800295c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800295a:	e007      	b.n	800296c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3b10      	subs	r3, #16
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <DMA_CalcBaseAndBitshift+0x64>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002992:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d909      	bls.n	80029ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	1d1a      	adds	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80029b8:	e007      	b.n	80029ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	aaaaaaab 	.word	0xaaaaaaab
 80029e0:	0800dbd4 	.word	0x0800dbd4

080029e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d11f      	bne.n	8002a3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d856      	bhi.n	8002ab2 <DMA_CheckFifoParam+0xce>
 8002a04:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <DMA_CheckFifoParam+0x28>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a2f 	.word	0x08002a2f
 8002a14:	08002a1d 	.word	0x08002a1d
 8002a18:	08002ab3 	.word	0x08002ab3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d046      	beq.n	8002ab6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2c:	e043      	b.n	8002ab6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a36:	d140      	bne.n	8002aba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3c:	e03d      	b.n	8002aba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a46:	d121      	bne.n	8002a8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d837      	bhi.n	8002abe <DMA_CheckFifoParam+0xda>
 8002a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a54 <DMA_CheckFifoParam+0x70>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a6b 	.word	0x08002a6b
 8002a5c:	08002a65 	.word	0x08002a65
 8002a60:	08002a7d 	.word	0x08002a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
      break;
 8002a68:	e030      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d025      	beq.n	8002ac2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7a:	e022      	b.n	8002ac2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a84:	d11f      	bne.n	8002ac6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a8a:	e01c      	b.n	8002ac6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d903      	bls.n	8002a9a <DMA_CheckFifoParam+0xb6>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d003      	beq.n	8002aa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a98:	e018      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9e:	e015      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00e      	beq.n	8002aca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab0:	e00b      	b.n	8002aca <DMA_CheckFifoParam+0xe6>
      break;
 8002ab2:	bf00      	nop
 8002ab4:	e00a      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e008      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e006      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e004      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;   
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
    }
  } 
  
  return status; 
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop

08002adc <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e08d      	b.n	8002c0a <HAL_FMPI2C_Init+0x12e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fb34 	bl	8001170 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2224      	movs	r2, #36	@ 0x24
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b3c:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	e006      	b.n	8002b64 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d108      	bne.n	8002b7e <HAL_FMPI2C_Init+0xa2>
  {
    SET_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	e007      	b.n	8002b8e <HAL_FMPI2C_Init+0xb2>
  }
  else
  {
    /* Clear the FMPI2C ADD10 bit */
    CLEAR_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba0:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69d9      	ldr	r1, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d138      	bne.n	8002c9a <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e032      	b.n	8002c9c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2224      	movs	r2, #36	@ 0x24
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c64:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e165      	b.n	8002f90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	f040 8154 	bne.w	8002f8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d005      	beq.n	8002cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d130      	bne.n	8002d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	2203      	movs	r2, #3
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 0201 	and.w	r2, r3, #1
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d017      	beq.n	8002d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d123      	bne.n	8002dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	08da      	lsrs	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3208      	adds	r2, #8
 8002dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	2203      	movs	r2, #3
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0203 	and.w	r2, r3, #3
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80ae 	beq.w	8002f8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa8 <HAL_GPIO_Init+0x300>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4a:	4a58      	ldr	r2, [pc, #352]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	220f      	movs	r2, #15
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <HAL_GPIO_Init+0x308>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d025      	beq.n	8002ec2 <HAL_GPIO_Init+0x21a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4e      	ldr	r2, [pc, #312]	@ (8002fb4 <HAL_GPIO_Init+0x30c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d01f      	beq.n	8002ebe <HAL_GPIO_Init+0x216>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb8 <HAL_GPIO_Init+0x310>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d019      	beq.n	8002eba <HAL_GPIO_Init+0x212>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4c      	ldr	r2, [pc, #304]	@ (8002fbc <HAL_GPIO_Init+0x314>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_GPIO_Init+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc0 <HAL_GPIO_Init+0x318>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00d      	beq.n	8002eb2 <HAL_GPIO_Init+0x20a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <HAL_GPIO_Init+0x31c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <HAL_GPIO_Init+0x206>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a49      	ldr	r2, [pc, #292]	@ (8002fc8 <HAL_GPIO_Init+0x320>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d101      	bne.n	8002eaa <HAL_GPIO_Init+0x202>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x21c>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	@ (8002fac <HAL_GPIO_Init+0x304>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f06:	4a31      	ldr	r2, [pc, #196]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f30:	4a26      	ldr	r2, [pc, #152]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f36:	4b25      	ldr	r3, [pc, #148]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f84:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <HAL_GPIO_Init+0x324>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae96 	bls.w	8002cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	@ 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	887b      	ldrh	r3, [r7, #2]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	e001      	b.n	8002ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
 800300c:	4613      	mov	r3, r2
 800300e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003010:	787b      	ldrb	r3, [r7, #1]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800301c:	e003      	b.n	8003026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	619a      	str	r2, [r3, #24]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304a:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 f806 	bl	8003064 <HAL_GPIO_EXTI_Callback>
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e12b      	b.n	80032e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe fa50 	bl	8001548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e0:	f002 fb54 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a81      	ldr	r2, [pc, #516]	@ (80032f0 <HAL_I2C_Init+0x274>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d807      	bhi.n	8003100 <HAL_I2C_Init+0x84>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a80      	ldr	r2, [pc, #512]	@ (80032f4 <HAL_I2C_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bf94      	ite	ls
 80030f8:	2301      	movls	r3, #1
 80030fa:	2300      	movhi	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e006      	b.n	800310e <HAL_I2C_Init+0x92>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a7d      	ldr	r2, [pc, #500]	@ (80032f8 <HAL_I2C_Init+0x27c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0e7      	b.n	80032e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a78      	ldr	r2, [pc, #480]	@ (80032fc <HAL_I2C_Init+0x280>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0c9b      	lsrs	r3, r3, #18
 8003120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a6a      	ldr	r2, [pc, #424]	@ (80032f0 <HAL_I2C_Init+0x274>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d802      	bhi.n	8003150 <HAL_I2C_Init+0xd4>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3301      	adds	r3, #1
 800314e:	e009      	b.n	8003164 <HAL_I2C_Init+0xe8>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	4a69      	ldr	r2, [pc, #420]	@ (8003300 <HAL_I2C_Init+0x284>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	3301      	adds	r3, #1
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	430b      	orrs	r3, r1
 800316a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003176:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	495c      	ldr	r1, [pc, #368]	@ (80032f0 <HAL_I2C_Init+0x274>)
 8003180:	428b      	cmp	r3, r1
 8003182:	d819      	bhi.n	80031b8 <HAL_I2C_Init+0x13c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e59      	subs	r1, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003198:	400b      	ands	r3, r1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_I2C_Init+0x138>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e59      	subs	r1, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	e051      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 80031b4:	2304      	movs	r3, #4
 80031b6:	e04f      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <HAL_I2C_Init+0x168>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e012      	b.n	800320a <HAL_I2C_Init+0x18e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e58      	subs	r0, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	0099      	lsls	r1, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Init+0x196>
 800320e:	2301      	movs	r3, #1
 8003210:	e022      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10e      	bne.n	8003238 <HAL_I2C_Init+0x1bc>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1e58      	subs	r0, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	440b      	add	r3, r1
 8003228:	fbb0 f3f3 	udiv	r3, r0, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003236:	e00f      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	6809      	ldr	r1, [r1, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003286:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6911      	ldr	r1, [r2, #16]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68d2      	ldr	r2, [r2, #12]
 8003292:	4311      	orrs	r1, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	430b      	orrs	r3, r1
 800329a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	000186a0 	.word	0x000186a0
 80032f4:	001e847f 	.word	0x001e847f
 80032f8:	003d08ff 	.word	0x003d08ff
 80032fc:	431bde83 	.word	0x431bde83
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	460b      	mov	r3, r1
 8003312:	817b      	strh	r3, [r7, #10]
 8003314:	4613      	mov	r3, r2
 8003316:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003318:	f7fe ff00 	bl	800211c <HAL_GetTick>
 800331c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b20      	cmp	r3, #32
 8003328:	f040 80e0 	bne.w	80034ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2319      	movs	r3, #25
 8003332:	2201      	movs	r2, #1
 8003334:	4970      	ldr	r1, [pc, #448]	@ (80034f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fc64 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	e0d3      	b.n	80034ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_I2C_Master_Transmit+0x50>
 8003350:	2302      	movs	r3, #2
 8003352:	e0cc      	b.n	80034ee <HAL_I2C_Master_Transmit+0x1ea>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d007      	beq.n	800337a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003388:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2221      	movs	r2, #33	@ 0x21
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2210      	movs	r2, #16
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	893a      	ldrh	r2, [r7, #8]
 80033aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a50      	ldr	r2, [pc, #320]	@ (80034fc <HAL_I2C_Master_Transmit+0x1f8>)
 80033ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033bc:	8979      	ldrh	r1, [r7, #10]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 face 	bl	8003964 <I2C_MasterRequestWrite>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e08d      	b.n	80034ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033e8:	e066      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	6a39      	ldr	r1, [r7, #32]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fd22 	bl	8003e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00d      	beq.n	8003416 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003410:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e06b      	b.n	80034ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d11b      	bne.n	800348c <HAL_I2C_Master_Transmit+0x188>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d017      	beq.n	800348c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	6a39      	ldr	r1, [r7, #32]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fd19 	bl	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00d      	beq.n	80034b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d107      	bne.n	80034b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e01a      	b.n	80034ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d194      	bne.n	80033ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	00100002 	.word	0x00100002
 80034fc:	ffff0000 	.word	0xffff0000

08003500 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	@ 0x30
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
 8003510:	4613      	mov	r3, r2
 8003512:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7fe fe02 	bl	800211c <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b20      	cmp	r3, #32
 8003524:	f040 8217 	bne.w	8003956 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2319      	movs	r3, #25
 800352e:	2201      	movs	r2, #1
 8003530:	497c      	ldr	r1, [pc, #496]	@ (8003724 <HAL_I2C_Master_Receive+0x224>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fb66 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800353e:	2302      	movs	r3, #2
 8003540:	e20a      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_I2C_Master_Receive+0x50>
 800354c:	2302      	movs	r3, #2
 800354e:	e203      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d007      	beq.n	8003576 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2222      	movs	r2, #34	@ 0x22
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2210      	movs	r2, #16
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003728 <HAL_I2C_Master_Receive+0x228>)
 80035b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035b8:	8979      	ldrh	r1, [r7, #10]
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa52 	bl	8003a68 <I2C_MasterRequestRead>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1c4      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d113      	bne.n	80035fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d6:	2300      	movs	r3, #0
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e198      	b.n	8003930 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003602:	2b01      	cmp	r3, #1
 8003604:	d11b      	bne.n	800363e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e178      	b.n	8003930 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	2b02      	cmp	r3, #2
 8003644:	d11b      	bne.n	800367e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003654:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	e158      	b.n	8003930 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800368c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036a4:	e144      	b.n	8003930 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	f200 80f1 	bhi.w	8003892 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d123      	bne.n	8003700 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fc4b 	bl	8003f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e145      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036fe:	e117      	b.n	8003930 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	2b02      	cmp	r3, #2
 8003706:	d14e      	bne.n	80037a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	2200      	movs	r2, #0
 8003710:	4906      	ldr	r1, [pc, #24]	@ (800372c <HAL_I2C_Master_Receive+0x22c>)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa76 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e11a      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
 8003722:	bf00      	nop
 8003724:	00100002 	.word	0x00100002
 8003728:	ffff0000 	.word	0xffff0000
 800372c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800373e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a4:	e0c4      	b.n	8003930 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	2200      	movs	r2, #0
 80037ae:	496c      	ldr	r1, [pc, #432]	@ (8003960 <HAL_I2C_Master_Receive+0x460>)
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fa27 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0cb      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	2200      	movs	r2, #0
 800380a:	4955      	ldr	r1, [pc, #340]	@ (8003960 <HAL_I2C_Master_Receive+0x460>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9f9 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e09d      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003890:	e04e      	b.n	8003930 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003894:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fb5e 	bl	8003f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e058      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d124      	bne.n	8003930 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	f47f aeb6 	bne.w	80036a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3728      	adds	r7, #40	@ 0x28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	00010004 	.word	0x00010004

08003964 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	607a      	str	r2, [r7, #4]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	460b      	mov	r3, r1
 8003972:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b08      	cmp	r3, #8
 800397e:	d006      	beq.n	800398e <I2C_MasterRequestWrite+0x2a>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d003      	beq.n	800398e <I2C_MasterRequestWrite+0x2a>
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800398c:	d108      	bne.n	80039a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e00b      	b.n	80039b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	2b12      	cmp	r3, #18
 80039a6:	d107      	bne.n	80039b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f91d 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00d      	beq.n	80039ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039de:	d103      	bne.n	80039e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e035      	b.n	8003a58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039f4:	d108      	bne.n	8003a08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f6:	897b      	ldrh	r3, [r7, #10]
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	e01b      	b.n	8003a40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a08:	897b      	ldrh	r3, [r7, #10]
 8003a0a:	11db      	asrs	r3, r3, #7
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0306 	and.w	r3, r3, #6
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f063 030f 	orn	r3, r3, #15
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	490e      	ldr	r1, [pc, #56]	@ (8003a60 <I2C_MasterRequestWrite+0xfc>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f966 	bl	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e010      	b.n	8003a58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a36:	897b      	ldrh	r3, [r7, #10]
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4907      	ldr	r1, [pc, #28]	@ (8003a64 <I2C_MasterRequestWrite+0x100>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f956 	bl	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	00010008 	.word	0x00010008
 8003a64:	00010002 	.word	0x00010002

08003a68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	460b      	mov	r3, r1
 8003a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d006      	beq.n	8003aa2 <I2C_MasterRequestRead+0x3a>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d003      	beq.n	8003aa2 <I2C_MasterRequestRead+0x3a>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003aa0:	d108      	bne.n	8003ab4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e00b      	b.n	8003acc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	2b11      	cmp	r3, #17
 8003aba:	d107      	bne.n	8003acc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 f893 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af2:	d103      	bne.n	8003afc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003afa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e079      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b08:	d108      	bne.n	8003b1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]
 8003b1a:	e05f      	b.n	8003bdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b1c:	897b      	ldrh	r3, [r7, #10]
 8003b1e:	11db      	asrs	r3, r3, #7
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 0306 	and.w	r3, r3, #6
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f063 030f 	orn	r3, r3, #15
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4930      	ldr	r1, [pc, #192]	@ (8003bfc <I2C_MasterRequestRead+0x194>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f8dc 	bl	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e054      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4929      	ldr	r1, [pc, #164]	@ (8003c00 <I2C_MasterRequestRead+0x198>)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f8cc 	bl	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e044      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f831 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb6:	d103      	bne.n	8003bc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e017      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	11db      	asrs	r3, r3, #7
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f063 030e 	orn	r3, r3, #14
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4907      	ldr	r1, [pc, #28]	@ (8003c00 <I2C_MasterRequestRead+0x198>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f888 	bl	8003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	00010008 	.word	0x00010008
 8003c00:	00010002 	.word	0x00010002

08003c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c14:	e048      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d044      	beq.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fe fa7d 	bl	800211c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d139      	bne.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	0c1b      	lsrs	r3, r3, #16
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10d      	bne.n	8003c5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	43da      	mvns	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	e00c      	b.n	8003c74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	43da      	mvns	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4013      	ands	r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d116      	bne.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e023      	b.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10d      	bne.n	8003cce <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	e00c      	b.n	8003ce8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d093      	beq.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d06:	e071      	b.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d16:	d123      	bne.n	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	f043 0204 	orr.w	r2, r3, #4
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e067      	b.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d041      	beq.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d68:	f7fe f9d8 	bl	800211c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d136      	bne.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10c      	bne.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf14      	ite	ne
 8003d9a:	2301      	movne	r3, #1
 8003d9c:	2300      	moveq	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	e00b      	b.n	8003dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	43da      	mvns	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4013      	ands	r3, r2
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e021      	b.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	0c1b      	lsrs	r3, r3, #16
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d10c      	bne.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e00b      	b.n	8003e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	bf14      	ite	ne
 8003e22:	2301      	movne	r3, #1
 8003e24:	2300      	moveq	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f47f af6d 	bne.w	8003d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f8e3 	bl	8004012 <I2C_IsAcknowledgeFailed>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e034      	b.n	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d028      	beq.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe f95d 	bl	800211c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11d      	bne.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7e:	2b80      	cmp	r3, #128	@ 0x80
 8003e80:	d016      	beq.n	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	f043 0220 	orr.w	r2, r3, #32
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e007      	b.n	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	2b80      	cmp	r3, #128	@ 0x80
 8003ebc:	d1c3      	bne.n	8003e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ed4:	e034      	b.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f89b 	bl	8004012 <I2C_IsAcknowledgeFailed>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e034      	b.n	8003f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d028      	beq.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe f915 	bl	800211c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11d      	bne.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d016      	beq.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	f043 0220 	orr.w	r2, r3, #32
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d1c3      	bne.n	8003ed6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f64:	e049      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b10      	cmp	r3, #16
 8003f72:	d119      	bne.n	8003fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f06f 0210 	mvn.w	r2, #16
 8003f7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e030      	b.n	800400a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa8:	f7fe f8b8 	bl	800211c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d302      	bcc.n	8003fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11d      	bne.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc8:	2b40      	cmp	r3, #64	@ 0x40
 8003fca:	d016      	beq.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e007      	b.n	800400a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004004:	2b40      	cmp	r3, #64	@ 0x40
 8004006:	d1ae      	bne.n	8003f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004012:	b480      	push	{r7}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004028:	d11b      	bne.n	8004062 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004032:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e108      	b.n	8004294 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f008 fd1b 	bl	800cad8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2203      	movs	r2, #3
 80040a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b0:	d102      	bne.n	80040b8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f004 fe36 	bl	8008d2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7c1a      	ldrb	r2, [r3, #16]
 80040ca:	f88d 2000 	strb.w	r2, [sp]
 80040ce:	3304      	adds	r3, #4
 80040d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040d2:	f004 fd15 	bl	8008b00 <USB_CoreInit>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0d5      	b.n	8004294 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f004 fe2e 	bl	8008d50 <USB_SetCurrentMode>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e0c6      	b.n	8004294 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e04a      	b.n	80041a2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800410c:	7bfa      	ldrb	r2, [r7, #15]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3315      	adds	r3, #21
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	3314      	adds	r3, #20
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	b298      	uxth	r0, r3
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	332e      	adds	r3, #46	@ 0x2e
 8004148:	4602      	mov	r2, r0
 800414a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	3318      	adds	r3, #24
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	331c      	adds	r3, #28
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004174:	7bfa      	ldrb	r2, [r7, #15]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3320      	adds	r3, #32
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	3324      	adds	r3, #36	@ 0x24
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	3301      	adds	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	791b      	ldrb	r3, [r3, #4]
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d3af      	bcc.n	800410c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e044      	b.n	800423c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80041da:	7bfa      	ldrb	r2, [r7, #15]
 80041dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041de:	7bfa      	ldrb	r2, [r7, #15]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041f4:	7bfa      	ldrb	r2, [r7, #15]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004220:	7bfa      	ldrb	r2, [r7, #15]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4413      	add	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	3301      	adds	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	791b      	ldrb	r3, [r3, #4]
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	429a      	cmp	r2, r3
 8004244:	d3b5      	bcc.n	80041b2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7c1a      	ldrb	r2, [r3, #16]
 800424e:	f88d 2000 	strb.w	r2, [sp]
 8004252:	3304      	adds	r3, #4
 8004254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004256:	f004 fdc7 	bl	8008de8 <USB_DevInit>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e013      	b.n	8004294 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	7b1b      	ldrb	r3, [r3, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f001 f96c 	bl	8005560 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f005 fdfe 	bl	8009e8e <USB_DevDisconnect>

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_PCD_Start+0x1c>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e022      	b.n	80042fe <HAL_PCD_Start+0x62>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d009      	beq.n	80042e0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 fd11 	bl	8008d0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f005 fdac 	bl	8009e4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004306:	b590      	push	{r4, r7, lr}
 8004308:	b08d      	sub	sp, #52	@ 0x34
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f005 fe6a 	bl	8009ff6 <USB_GetMode>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 84b9 	bne.w	8004c9c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f005 fdce 	bl	8009ed0 <USB_ReadInterrupts>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 84af 	beq.w	8004c9a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f005 fdbb 	bl	8009ed0 <USB_ReadInterrupts>
 800435a:	4603      	mov	r3, r0
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d107      	bne.n	8004374 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f002 0202 	and.w	r2, r2, #2
 8004372:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f005 fda9 	bl	8009ed0 <USB_ReadInterrupts>
 800437e:	4603      	mov	r3, r0
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d161      	bne.n	800444c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0210 	bic.w	r2, r2, #16
 8004396:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f003 020f 	and.w	r2, r3, #15
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	4413      	add	r3, r2
 80043b4:	3304      	adds	r3, #4
 80043b6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	0c5b      	lsrs	r3, r3, #17
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d124      	bne.n	800440e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d035      	beq.n	800443c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043de:	b29b      	uxth	r3, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	6a38      	ldr	r0, [r7, #32]
 80043e4:	f005 fbe0 	bl	8009ba8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043f4:	441a      	add	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004406:	441a      	add	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	615a      	str	r2, [r3, #20]
 800440c:	e016      	b.n	800443c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	0c5b      	lsrs	r3, r3, #17
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	2b06      	cmp	r3, #6
 8004418:	d110      	bne.n	800443c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004420:	2208      	movs	r2, #8
 8004422:	4619      	mov	r1, r3
 8004424:	6a38      	ldr	r0, [r7, #32]
 8004426:	f005 fbbf 	bl	8009ba8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004436:	441a      	add	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0210 	orr.w	r2, r2, #16
 800444a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f005 fd3d 	bl	8009ed0 <USB_ReadInterrupts>
 8004456:	4603      	mov	r3, r0
 8004458:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800445c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004460:	f040 80a7 	bne.w	80045b2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f005 fd42 	bl	8009ef6 <USB_ReadDevAllOutEpInterrupt>
 8004472:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004474:	e099      	b.n	80045aa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 808e 	beq.w	800459e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f005 fd66 	bl	8009f5e <USB_ReadDevOutEPInterrupt>
 8004492:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	2301      	movs	r3, #1
 80044ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80044b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fece 	bl	8005254 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ce:	461a      	mov	r2, r3
 80044d0:	2308      	movs	r3, #8
 80044d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 ffa4 	bl	8005424 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	2310      	movs	r3, #16
 80044f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d030      	beq.n	8004564 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450a:	2b80      	cmp	r3, #128	@ 0x80
 800450c:	d109      	bne.n	8004522 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800451c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004520:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	3304      	adds	r3, #4
 8004536:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	78db      	ldrb	r3, [r3, #3]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d108      	bne.n	8004552 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2200      	movs	r2, #0
 8004544:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	b2db      	uxtb	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f008 fbdf 	bl	800cd10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	2302      	movs	r3, #2
 8004562:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d008      	beq.n	8004580 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	2320      	movs	r3, #32
 800457e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004596:	461a      	mov	r2, r3
 8004598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800459c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	3301      	adds	r3, #1
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	085b      	lsrs	r3, r3, #1
 80045a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f47f af62 	bne.w	8004476 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f005 fc8a 	bl	8009ed0 <USB_ReadInterrupts>
 80045bc:	4603      	mov	r3, r0
 80045be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045c6:	f040 80db 	bne.w	8004780 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f005 fcab 	bl	8009f2a <USB_ReadDevAllInEpInterrupt>
 80045d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80045da:	e0cd      	b.n	8004778 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80c2 	beq.w	800476c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f005 fcd1 	bl	8009f9a <USB_ReadDevInEPInterrupt>
 80045f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d057      	beq.n	80046b4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	2201      	movs	r2, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	43db      	mvns	r3, r3
 800461e:	69f9      	ldr	r1, [r7, #28]
 8004620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004624:	4013      	ands	r3, r2
 8004626:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004634:	461a      	mov	r2, r3
 8004636:	2301      	movs	r3, #1
 8004638:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	799b      	ldrb	r3, [r3, #6]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d132      	bne.n	80046a8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004646:	4613      	mov	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	3320      	adds	r3, #32
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4403      	add	r3, r0
 8004662:	331c      	adds	r3, #28
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4419      	add	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4403      	add	r3, r0
 8004676:	3320      	adds	r3, #32
 8004678:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d113      	bne.n	80046a8 <HAL_PCD_IRQHandler+0x3a2>
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	3324      	adds	r3, #36	@ 0x24
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d108      	bne.n	80046a8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046a0:	461a      	mov	r2, r3
 80046a2:	2101      	movs	r1, #1
 80046a4:	f005 fcd8 	bl	800a058 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f008 faa9 	bl	800cc06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	2308      	movs	r3, #8
 80046ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e6:	461a      	mov	r2, r3
 80046e8:	2310      	movs	r3, #16
 80046ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004702:	461a      	mov	r2, r3
 8004704:	2340      	movs	r3, #64	@ 0x40
 8004706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d023      	beq.n	800475a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004712:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004714:	6a38      	ldr	r0, [r7, #32]
 8004716:	f004 fcc5 	bl	80090a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800471a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3310      	adds	r3, #16
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	78db      	ldrb	r3, [r3, #3]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d108      	bne.n	8004748 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2200      	movs	r2, #0
 800473a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	b2db      	uxtb	r3, r3
 8004740:	4619      	mov	r1, r3
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f008 faf6 	bl	800cd34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004754:	461a      	mov	r2, r3
 8004756:	2302      	movs	r3, #2
 8004758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fce8 	bl	800513c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	3301      	adds	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	f47f af2e 	bne.w	80045dc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f005 fba3 	bl	8009ed0 <USB_ReadInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004794:	d122      	bne.n	80047dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d108      	bne.n	80047c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047bc:	2100      	movs	r1, #0
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f008 fc70 	bl	800d0a4 <HAL_PCDEx_LPM_Callback>
 80047c4:	e002      	b.n	80047cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f008 fa94 	bl	800ccf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80047da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f005 fb75 	bl	8009ed0 <USB_ReadInterrupts>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047f0:	d112      	bne.n	8004818 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f008 fa50 	bl	800cca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004816:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f005 fb57 	bl	8009ed0 <USB_ReadInterrupts>
 8004822:	4603      	mov	r3, r0
 8004824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800482c:	d121      	bne.n	8004872 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800483c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004844:	2b00      	cmp	r3, #0
 8004846:	d111      	bne.n	800486c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	089b      	lsrs	r3, r3, #2
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004862:	2101      	movs	r1, #1
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f008 fc1d 	bl	800d0a4 <HAL_PCDEx_LPM_Callback>
 800486a:	e002      	b.n	8004872 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f008 fa1b 	bl	800cca8 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f005 fb2a 	bl	8009ed0 <USB_ReadInterrupts>
 800487c:	4603      	mov	r3, r0
 800487e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004886:	f040 80b7 	bne.w	80049f8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004898:	f023 0301 	bic.w	r3, r3, #1
 800489c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2110      	movs	r1, #16
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 fbfd 	bl	80090a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ae:	e046      	b.n	800493e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f0:	461a      	mov	r2, r3
 80048f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80048f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004908:	0151      	lsls	r1, r2, #5
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	440a      	add	r2, r1
 800490e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	440a      	add	r2, r1
 800492e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004932:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004936:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	3301      	adds	r3, #1
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	791b      	ldrb	r3, [r3, #4]
 8004942:	461a      	mov	r2, r3
 8004944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004946:	4293      	cmp	r3, r2
 8004948:	d3b2      	bcc.n	80048b0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004958:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800495c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7bdb      	ldrb	r3, [r3, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004976:	f043 030b 	orr.w	r3, r3, #11
 800497a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800498c:	f043 030b 	orr.w	r3, r3, #11
 8004990:	6453      	str	r3, [r2, #68]	@ 0x44
 8004992:	e015      	b.n	80049c0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049a6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80049aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ba:	f043 030b 	orr.w	r3, r3, #11
 80049be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80049d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049e2:	461a      	mov	r2, r3
 80049e4:	f005 fb38 	bl	800a058 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80049f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f005 fa67 	bl	8009ed0 <USB_ReadInterrupts>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0c:	d123      	bne.n	8004a56 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f005 fafd 	bl	800a012 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f004 fbba 	bl	8009196 <USB_GetDevSpeed>
 8004a22:	4603      	mov	r3, r0
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681c      	ldr	r4, [r3, #0]
 8004a2e:	f000 fea1 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8004a32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	f004 f8c4 	bl	8008bc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f008 f908 	bl	800cc56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695a      	ldr	r2, [r3, #20]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f005 fa38 	bl	8009ed0 <USB_ReadInterrupts>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d10a      	bne.n	8004a80 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f008 f8e5 	bl	800cc3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f002 0208 	and.w	r2, r2, #8
 8004a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f005 fa23 	bl	8009ed0 <USB_ReadInterrupts>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a90:	2b80      	cmp	r3, #128	@ 0x80
 8004a92:	d123      	bne.n	8004adc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa4:	e014      	b.n	8004ad0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d105      	bne.n	8004aca <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fb08 	bl	80050da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	3301      	adds	r3, #1
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	791b      	ldrb	r3, [r3, #4]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d3e4      	bcc.n	8004aa6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f005 f9f5 	bl	8009ed0 <USB_ReadInterrupts>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af0:	d13c      	bne.n	8004b6c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004af2:	2301      	movs	r3, #1
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af6:	e02b      	b.n	8004b50 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	3318      	adds	r3, #24
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d115      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	da12      	bge.n	8004b4a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3317      	adds	r3, #23
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fac8 	bl	80050da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	791b      	ldrb	r3, [r3, #4]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d3cd      	bcc.n	8004af8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f005 f9ad 	bl	8009ed0 <USB_ReadInterrupts>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b80:	d156      	bne.n	8004c30 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b82:	2301      	movs	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b86:	e045      	b.n	8004c14 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d12e      	bne.n	8004c0e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da2b      	bge.n	8004c0e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004bc2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d121      	bne.n	8004c0e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bce:	4613      	mov	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c0a:	6053      	str	r3, [r2, #4]
            break;
 8004c0c:	e008      	b.n	8004c20 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	3301      	adds	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	791b      	ldrb	r3, [r3, #4]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d3b3      	bcc.n	8004b88 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f005 f94b 	bl	8009ed0 <USB_ReadInterrupts>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c44:	d10a      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f008 f886 	bl	800cd58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f005 f935 	bl	8009ed0 <USB_ReadInterrupts>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d115      	bne.n	8004c9c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f008 f876 	bl	800cd74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6859      	ldr	r1, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	e000      	b.n	8004c9c <HAL_PCD_IRQHandler+0x996>
      return;
 8004c9a:	bf00      	nop
    }
  }
}
 8004c9c:	3734      	adds	r7, #52	@ 0x34
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd90      	pop	{r4, r7, pc}

08004ca2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_PCD_SetAddress+0x1a>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e012      	b.n	8004ce2 <HAL_PCD_SetAddress+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f005 f894 	bl	8009e00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	4608      	mov	r0, r1
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	70fb      	strb	r3, [r7, #3]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	803b      	strh	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	da0f      	bge.n	8004d30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	3310      	adds	r3, #16
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	3304      	adds	r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	705a      	strb	r2, [r3, #1]
 8004d2e:	e00f      	b.n	8004d50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	3304      	adds	r3, #4
 8004d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d5c:	883a      	ldrh	r2, [r7, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	78ba      	ldrb	r2, [r7, #2]
 8004d66:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d7a:	78bb      	ldrb	r3, [r7, #2]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d102      	bne.n	8004d86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_PCD_EP_Open+0xaa>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e00e      	b.n	8004db2 <HAL_PCD_EP_Open+0xc8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f004 fa1c 	bl	80091e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004db0:	7afb      	ldrb	r3, [r7, #11]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da0f      	bge.n	8004dee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	3310      	adds	r3, #16
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	3304      	adds	r3, #4
 8004de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	705a      	strb	r2, [r3, #1]
 8004dec:	e00f      	b.n	8004e0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 020f 	and.w	r2, r3, #15
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	3304      	adds	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <HAL_PCD_EP_Close+0x6e>
 8004e24:	2302      	movs	r3, #2
 8004e26:	e00e      	b.n	8004e46 <HAL_PCD_EP_Close+0x8c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 fa5a 	bl	80092f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e5e:	7afb      	ldrb	r3, [r7, #11]
 8004e60:	f003 020f 	and.w	r2, r3, #15
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	3304      	adds	r3, #4
 8004e76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e90:	7afb      	ldrb	r3, [r7, #11]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	799b      	ldrb	r3, [r3, #6]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d102      	bne.n	8004eaa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	799b      	ldrb	r3, [r3, #6]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6979      	ldr	r1, [r7, #20]
 8004eb6:	f004 faf7 	bl	80094a8 <USB_EPStartXfer>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	f003 020f 	and.w	r2, r3, #15
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004ee6:	681b      	ldr	r3, [r3, #0]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	607a      	str	r2, [r7, #4]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	460b      	mov	r3, r1
 8004f02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f04:	7afb      	ldrb	r3, [r7, #11]
 8004f06:	f003 020f 	and.w	r2, r3, #15
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	3310      	adds	r3, #16
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	3304      	adds	r3, #4
 8004f1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2201      	movs	r2, #1
 8004f32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f34:	7afb      	ldrb	r3, [r7, #11]
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	799b      	ldrb	r3, [r3, #6]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d102      	bne.n	8004f4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	799b      	ldrb	r3, [r3, #6]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	f004 faa5 	bl	80094a8 <USB_EPStartXfer>

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	7912      	ldrb	r2, [r2, #4]
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e04f      	b.n	8005026 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da0f      	bge.n	8004fae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	4613      	mov	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	3310      	adds	r3, #16
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	705a      	strb	r2, [r3, #1]
 8004fac:	e00d      	b.n	8004fca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_PCD_EP_SetStall+0x82>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e01d      	b.n	8005026 <HAL_PCD_EP_SetStall+0xbe>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68f9      	ldr	r1, [r7, #12]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f004 fe2d 	bl	8009c58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	2b00      	cmp	r3, #0
 8005006:	d109      	bne.n	800501c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	7999      	ldrb	r1, [r3, #6]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005016:	461a      	mov	r2, r3
 8005018:	f005 f81e 	bl	800a058 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	7912      	ldrb	r2, [r2, #4]
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e042      	b.n	80050d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800504c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	da0f      	bge.n	8005074 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	f003 020f 	and.w	r2, r3, #15
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	3310      	adds	r3, #16
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	4413      	add	r3, r2
 8005068:	3304      	adds	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	705a      	strb	r2, [r3, #1]
 8005072:	e00f      	b.n	8005094 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	4413      	add	r3, r2
 800508a:	3304      	adds	r3, #4
 800508c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_PCD_EP_ClrStall+0x86>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e00e      	b.n	80050d2 <HAL_PCD_EP_ClrStall+0xa4>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68f9      	ldr	r1, [r7, #12]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f004 fe36 	bl	8009d34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	460b      	mov	r3, r1
 80050e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80050e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da0c      	bge.n	8005108 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	3310      	adds	r3, #16
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	3304      	adds	r3, #4
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e00c      	b.n	8005122 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	f003 020f 	and.w	r2, r3, #15
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	4618      	mov	r0, r3
 800512a:	f004 fc55 	bl	80099d8 <USB_EPStopXfer>
 800512e:	4603      	mov	r3, r0
 8005130:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005132:	7afb      	ldrb	r3, [r7, #11]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	@ 0x28
 8005140:	af02      	add	r7, sp, #8
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	3310      	adds	r3, #16
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	3304      	adds	r3, #4
 8005162:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	429a      	cmp	r2, r3
 800516e:	d901      	bls.n	8005174 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e06b      	b.n	800524c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	429a      	cmp	r2, r3
 8005188:	d902      	bls.n	8005190 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3303      	adds	r3, #3
 8005194:	089b      	lsrs	r3, r3, #2
 8005196:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005198:	e02a      	b.n	80051f0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d902      	bls.n	80051b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3303      	adds	r3, #3
 80051ba:	089b      	lsrs	r3, r3, #2
 80051bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68d9      	ldr	r1, [r3, #12]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	4603      	mov	r3, r0
 80051d2:	6978      	ldr	r0, [r7, #20]
 80051d4:	f004 fcaa 	bl	8009b2c <USB_WritePacket>

    ep->xfer_buff  += len;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	441a      	add	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	441a      	add	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	429a      	cmp	r2, r3
 8005204:	d809      	bhi.n	800521a <PCD_WriteEmptyTxFifo+0xde>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800520e:	429a      	cmp	r2, r3
 8005210:	d203      	bcs.n	800521a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1bf      	bne.n	800519a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	429a      	cmp	r2, r3
 8005224:	d811      	bhi.n	800524a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	2201      	movs	r2, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	43db      	mvns	r3, r3
 8005240:	6939      	ldr	r1, [r7, #16]
 8005242:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005246:	4013      	ands	r3, r2
 8005248:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	333c      	adds	r3, #60	@ 0x3c
 800526c:	3304      	adds	r3, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	799b      	ldrb	r3, [r3, #6]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d17b      	bne.n	8005382 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d015      	beq.n	80052c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4a61      	ldr	r2, [pc, #388]	@ (800541c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	f240 80b9 	bls.w	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80b3 	beq.w	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b6:	461a      	mov	r2, r3
 80052b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052bc:	6093      	str	r3, [r2, #8]
 80052be:	e0a7      	b.n	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d6:	461a      	mov	r2, r3
 80052d8:	2320      	movs	r3, #32
 80052da:	6093      	str	r3, [r2, #8]
 80052dc:	e098      	b.n	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 8093 	bne.w	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4a4b      	ldr	r2, [pc, #300]	@ (800541c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d90f      	bls.n	8005312 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800530e:	6093      	str	r3, [r2, #8]
 8005310:	e07e      	b.n	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4413      	add	r3, r2
 8005324:	3304      	adds	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	0159      	lsls	r1, r3, #5
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	440b      	add	r3, r1
 8005334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d114      	bne.n	8005374 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800535c:	461a      	mov	r2, r3
 800535e:	2101      	movs	r1, #1
 8005360:	f004 fe7a 	bl	800a058 <USB_EP0_OutStart>
 8005364:	e006      	b.n	8005374 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	441a      	add	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f007 fc28 	bl	800cbd0 <HAL_PCD_DataOutStageCallback>
 8005380:	e046      	b.n	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	4a26      	ldr	r2, [pc, #152]	@ (8005420 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d124      	bne.n	80053d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a0:	461a      	mov	r2, r3
 80053a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053a6:	6093      	str	r3, [r2, #8]
 80053a8:	e032      	b.n	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c0:	461a      	mov	r2, r3
 80053c2:	2320      	movs	r3, #32
 80053c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f007 fbff 	bl	800cbd0 <HAL_PCD_DataOutStageCallback>
 80053d2:	e01d      	b.n	8005410 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d114      	bne.n	8005404 <PCD_EP_OutXfrComplete_int+0x1b0>
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	4613      	mov	r3, r2
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	440b      	add	r3, r1
 80053e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d108      	bne.n	8005404 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053fc:	461a      	mov	r2, r3
 80053fe:	2100      	movs	r1, #0
 8005400:	f004 fe2a 	bl	800a058 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f007 fbe0 	bl	800cbd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	4f54300a 	.word	0x4f54300a
 8005420:	4f54310a 	.word	0x4f54310a

08005424 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	333c      	adds	r3, #60	@ 0x3c
 800543c:	3304      	adds	r3, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d90e      	bls.n	8005478 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005470:	461a      	mov	r2, r3
 8005472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005476:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f007 fb97 	bl	800cbac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a0a      	ldr	r2, [pc, #40]	@ (80054ac <PCD_EP_OutSetupPacket_int+0x88>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d90c      	bls.n	80054a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	799b      	ldrb	r3, [r3, #6]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d108      	bne.n	80054a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005498:	461a      	mov	r2, r3
 800549a:	2101      	movs	r1, #1
 800549c:	f004 fddc 	bl	800a058 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	4f54300a 	.word	0x4f54300a

080054b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	460b      	mov	r3, r1
 80054ba:	70fb      	strb	r3, [r7, #3]
 80054bc:	4613      	mov	r3, r2
 80054be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d107      	bne.n	80054de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054ce:	883b      	ldrh	r3, [r7, #0]
 80054d0:	0419      	lsls	r1, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	430a      	orrs	r2, r1
 80054da:	629a      	str	r2, [r3, #40]	@ 0x28
 80054dc:	e028      	b.n	8005530 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
 80054f0:	e00d      	b.n	800550e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	3340      	adds	r3, #64	@ 0x40
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	3301      	adds	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
 800550e:	7bfa      	ldrb	r2, [r7, #15]
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	3b01      	subs	r3, #1
 8005514:	429a      	cmp	r2, r3
 8005516:	d3ec      	bcc.n	80054f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005518:	883b      	ldrh	r3, [r7, #0]
 800551a:	0418      	lsls	r0, r3, #16
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	3b01      	subs	r3, #1
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	4302      	orrs	r2, r0
 8005528:	3340      	adds	r3, #64	@ 0x40
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	460b      	mov	r3, r1
 8005548:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	887a      	ldrh	r2, [r7, #2]
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005592:	f043 0303 	orr.w	r3, r3, #3
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0cc      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b68      	ldr	r3, [pc, #416]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d90c      	bls.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b65      	ldr	r3, [pc, #404]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b63      	ldr	r3, [pc, #396]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0b8      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055fc:	4b59      	ldr	r3, [pc, #356]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a58      	ldr	r2, [pc, #352]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005614:	4b53      	ldr	r3, [pc, #332]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a52      	ldr	r2, [pc, #328]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800561e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b50      	ldr	r3, [pc, #320]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	494d      	ldr	r1, [pc, #308]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d044      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005646:	4b47      	ldr	r3, [pc, #284]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d119      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e07f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d003      	beq.n	8005666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005662:	2b03      	cmp	r3, #3
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005666:	4b3f      	ldr	r3, [pc, #252]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e06f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005676:	4b3b      	ldr	r3, [pc, #236]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e067      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005686:	4b37      	ldr	r3, [pc, #220]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4934      	ldr	r1, [pc, #208]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	4313      	orrs	r3, r2
 8005696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005698:	f7fc fd40 	bl	800211c <HAL_GetTick>
 800569c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569e:	e00a      	b.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a0:	f7fc fd3c 	bl	800211c <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e04f      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 020c 	and.w	r2, r3, #12
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1eb      	bne.n	80056a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c8:	4b25      	ldr	r3, [pc, #148]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d20c      	bcs.n	80056f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	4b22      	ldr	r3, [pc, #136]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	683a      	ldr	r2, [r7, #0]
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b20      	ldr	r3, [pc, #128]	@ (8005760 <HAL_RCC_ClockConfig+0x1b8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e032      	b.n	8005756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056fc:	4b19      	ldr	r3, [pc, #100]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4916      	ldr	r1, [pc, #88]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571a:	4b12      	ldr	r3, [pc, #72]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	490e      	ldr	r1, [pc, #56]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800572e:	f000 fb7f 	bl	8005e30 <HAL_RCC_GetSysClockFreq>
 8005732:	4602      	mov	r2, r0
 8005734:	4b0b      	ldr	r3, [pc, #44]	@ (8005764 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	490a      	ldr	r1, [pc, #40]	@ (8005768 <HAL_RCC_ClockConfig+0x1c0>)
 8005740:	5ccb      	ldrb	r3, [r1, r3]
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	4a09      	ldr	r2, [pc, #36]	@ (800576c <HAL_RCC_ClockConfig+0x1c4>)
 8005748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800574a:	4b09      	ldr	r3, [pc, #36]	@ (8005770 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4618      	mov	r0, r3
 8005750:	f7fc fca0 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40023c00 	.word	0x40023c00
 8005764:	40023800 	.word	0x40023800
 8005768:	0800dbbc 	.word	0x0800dbbc
 800576c:	20000000 	.word	0x20000000
 8005770:	20000004 	.word	0x20000004

08005774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <HAL_RCC_GetHCLKFreq+0x14>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20000000 	.word	0x20000000

0800578c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005790:	f7ff fff0 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	0a9b      	lsrs	r3, r3, #10
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	@ (80057b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	0800dbcc 	.word	0x0800dbcc

080057b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057b8:	f7ff ffdc 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0b5b      	lsrs	r3, r3, #13
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4903      	ldr	r1, [pc, #12]	@ (80057d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800
 80057d8:	0800dbcc 	.word	0x0800dbcc

080057dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	@ 0x30
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d010      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005814:	4b6f      	ldr	r3, [pc, #444]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800581a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	496c      	ldr	r1, [pc, #432]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005832:	2301      	movs	r3, #1
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d010      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005842:	4b64      	ldr	r3, [pc, #400]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005848:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005850:	4960      	ldr	r1, [pc, #384]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005860:	2301      	movs	r3, #1
 8005862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d017      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005870:	4b58      	ldr	r3, [pc, #352]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	4955      	ldr	r1, [pc, #340]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800588e:	d101      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005890:	2301      	movs	r3, #1
 8005892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800589c:	2301      	movs	r3, #1
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d017      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058ac:	4b49      	ldr	r3, [pc, #292]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ba:	4946      	ldr	r1, [pc, #280]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ca:	d101      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80058cc:	2301      	movs	r3, #1
 80058ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80058d8:	2301      	movs	r3, #1
 80058da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 808a 	beq.w	80059fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058ea:	2300      	movs	r3, #0
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	4b39      	ldr	r3, [pc, #228]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f2:	4a38      	ldr	r2, [pc, #224]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80058fa:	4b36      	ldr	r3, [pc, #216]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005906:	4b34      	ldr	r3, [pc, #208]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a33      	ldr	r2, [pc, #204]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800590c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005910:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005912:	f7fc fc03 	bl	800211c <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005918:	e008      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800591a:	f7fc fbff 	bl	800211c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e278      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800592c:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005938:	4b26      	ldr	r3, [pc, #152]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005940:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02f      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	429a      	cmp	r2, r3
 8005954:	d028      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005956:	4b1f      	ldr	r3, [pc, #124]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005960:	4b1e      	ldr	r3, [pc, #120]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005962:	2201      	movs	r2, #1
 8005964:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005966:	4b1d      	ldr	r3, [pc, #116]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800596c:	4a19      	ldr	r2, [pc, #100]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005972:	4b18      	ldr	r3, [pc, #96]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d114      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800597e:	f7fc fbcd 	bl	800211c <HAL_GetTick>
 8005982:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	e00a      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fc fbc9 	bl	800211c <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e240      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599c:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ee      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059b4:	d114      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80059b6:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ca:	4902      	ldr	r1, [pc, #8]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	608b      	str	r3, [r1, #8]
 80059d0:	e00c      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800
 80059d8:	40007000 	.word	0x40007000
 80059dc:	42470e40 	.word	0x42470e40
 80059e0:	4b4a      	ldr	r3, [pc, #296]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a49      	ldr	r2, [pc, #292]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059ea:	6093      	str	r3, [r2, #8]
 80059ec:	4b47      	ldr	r3, [pc, #284]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f8:	4944      	ldr	r1, [pc, #272]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005a10:	4b3f      	ldr	r3, [pc, #252]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005a12:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005a20:	4b3a      	ldr	r3, [pc, #232]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a2e:	4937      	ldr	r1, [pc, #220]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a42:	4b32      	ldr	r3, [pc, #200]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a48:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a50:	492e      	ldr	r1, [pc, #184]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d011      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a64:	4b29      	ldr	r3, [pc, #164]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a6a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a72:	4926      	ldr	r1, [pc, #152]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a82:	d101      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005a84:	2301      	movs	r3, #1
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005a94:	4b1d      	ldr	r3, [pc, #116]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a9a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	491a      	ldr	r1, [pc, #104]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d011      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005ab6:	4b15      	ldr	r3, [pc, #84]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005abc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac4:	4911      	ldr	r1, [pc, #68]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad4:	d101      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d005      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae8:	f040 80ff 	bne.w	8005cea <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005aec:	4b09      	ldr	r3, [pc, #36]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005af2:	f7fc fb13 	bl	800211c <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005af8:	e00e      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005afa:	f7fc fb0f 	bl	800211c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d907      	bls.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e188      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	424711e0 	.word	0x424711e0
 8005b14:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b18:	4b7e      	ldr	r3, [pc, #504]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ea      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d028      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d124      	bne.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005b4c:	4b71      	ldr	r3, [pc, #452]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	f003 0303 	and.w	r3, r3, #3
 8005b58:	3301      	adds	r3, #1
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b64:	0e1b      	lsrs	r3, r3, #24
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	019b      	lsls	r3, r3, #6
 8005b76:	431a      	orrs	r2, r3
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	431a      	orrs	r2, r3
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	071b      	lsls	r3, r3, #28
 8005b8e:	4961      	ldr	r1, [pc, #388]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d004      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005baa:	d00a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d035      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bc0:	d130      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005bc2:	4b54      	ldr	r3, [pc, #336]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc8:	0c1b      	lsrs	r3, r3, #16
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	3301      	adds	r3, #1
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bda:	0f1b      	lsrs	r3, r3, #28
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	019b      	lsls	r3, r3, #6
 8005bec:	431a      	orrs	r2, r3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	071b      	lsls	r3, r3, #28
 8005c04:	4943      	ldr	r1, [pc, #268]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c0c:	4b41      	ldr	r3, [pc, #260]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c12:	f023 021f 	bic.w	r2, r3, #31
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	493d      	ldr	r1, [pc, #244]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d029      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c38:	d124      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005c3a:	4b36      	ldr	r3, [pc, #216]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c40:	0c1b      	lsrs	r3, r3, #16
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	3301      	adds	r3, #1
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c4c:	4b31      	ldr	r3, [pc, #196]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c52:	0f1b      	lsrs	r3, r3, #28
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	019b      	lsls	r3, r3, #6
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	041b      	lsls	r3, r3, #16
 8005c70:	431a      	orrs	r2, r3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	431a      	orrs	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	071b      	lsls	r3, r3, #28
 8005c7c:	4925      	ldr	r1, [pc, #148]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	061b      	lsls	r3, r3, #24
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	071b      	lsls	r3, r3, #28
 8005cb6:	4917      	ldr	r1, [pc, #92]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cbe:	4b16      	ldr	r3, [pc, #88]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc4:	f7fc fa2a 	bl	800211c <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ccc:	f7fc fa26 	bl	800211c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e09f      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cde:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	f040 8095 	bne.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf8:	f7fc fa10 	bl	800211c <HAL_GetTick>
 8005cfc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cfe:	e00f      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d00:	f7fc fa0c 	bl	800211c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d908      	bls.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e085      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800
 8005d18:	42470068 	.word	0x42470068
 8005d1c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d20:	4b41      	ldr	r3, [pc, #260]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d2c:	d0e8      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d02b      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d127      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005d56:	4b34      	ldr	r3, [pc, #208]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	3301      	adds	r3, #1
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	431a      	orrs	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	061b      	lsls	r3, r3, #24
 8005d84:	4928      	ldr	r1, [pc, #160]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d8c:	4b26      	ldr	r3, [pc, #152]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d92:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	4922      	ldr	r1, [pc, #136]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01d      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dba:	d118      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	0e1b      	lsrs	r3, r3, #24
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	019b      	lsls	r3, r3, #6
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	041b      	lsls	r3, r3, #16
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	061b      	lsls	r3, r3, #24
 8005de6:	4910      	ldr	r1, [pc, #64]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dee:	4b0f      	ldr	r3, [pc, #60]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005df4:	f7fc f992 	bl	800211c <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005dfc:	f7fc f98e 	bl	800211c <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e007      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e0e:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e1a:	d1ef      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3730      	adds	r7, #48	@ 0x30
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	42470070 	.word	0x42470070

08005e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e34:	b0ae      	sub	sp, #184	@ 0xb8
 8005e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e56:	4bcb      	ldr	r3, [pc, #812]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	f200 8206 	bhi.w	8006270 <HAL_RCC_GetSysClockFreq+0x440>
 8005e64:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005ea1 	.word	0x08005ea1
 8005e70:	08006271 	.word	0x08006271
 8005e74:	08006271 	.word	0x08006271
 8005e78:	08006271 	.word	0x08006271
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	08006271 	.word	0x08006271
 8005e84:	08006271 	.word	0x08006271
 8005e88:	08006271 	.word	0x08006271
 8005e8c:	08005eb1 	.word	0x08005eb1
 8005e90:	08006271 	.word	0x08006271
 8005e94:	08006271 	.word	0x08006271
 8005e98:	08006271 	.word	0x08006271
 8005e9c:	080060a1 	.word	0x080060a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ea0:	4bb9      	ldr	r3, [pc, #740]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8005ea6:	e1e7      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ea8:	4bb8      	ldr	r3, [pc, #736]	@ (800618c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005eae:	e1e3      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eb0:	4bb4      	ldr	r3, [pc, #720]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ebc:	4bb1      	ldr	r3, [pc, #708]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d071      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec8:	4bae      	ldr	r3, [pc, #696]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	099b      	lsrs	r3, r3, #6
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ed4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005eee:	4622      	mov	r2, r4
 8005ef0:	462b      	mov	r3, r5
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f04f 0100 	mov.w	r1, #0
 8005efa:	0159      	lsls	r1, r3, #5
 8005efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f00:	0150      	lsls	r0, r2, #5
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4621      	mov	r1, r4
 8005f08:	1a51      	subs	r1, r2, r1
 8005f0a:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f0c:	4629      	mov	r1, r5
 8005f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005f20:	4649      	mov	r1, r9
 8005f22:	018b      	lsls	r3, r1, #6
 8005f24:	4641      	mov	r1, r8
 8005f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	018a      	lsls	r2, r1, #6
 8005f2e:	4641      	mov	r1, r8
 8005f30:	1a51      	subs	r1, r2, r1
 8005f32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f34:	4649      	mov	r1, r9
 8005f36:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005f48:	4649      	mov	r1, r9
 8005f4a:	00cb      	lsls	r3, r1, #3
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f52:	4641      	mov	r1, r8
 8005f54:	00ca      	lsls	r2, r1, #3
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	189b      	adds	r3, r3, r2
 8005f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f62:	462b      	mov	r3, r5
 8005f64:	460a      	mov	r2, r1
 8005f66:	eb42 0303 	adc.w	r3, r2, r3
 8005f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f78:	4629      	mov	r1, r5
 8005f7a:	024b      	lsls	r3, r1, #9
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f82:	4621      	mov	r1, r4
 8005f84:	024a      	lsls	r2, r1, #9
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005f9c:	f7fa f9d8 	bl	8000350 <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005faa:	e067      	b.n	800607c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fac:	4b75      	ldr	r3, [pc, #468]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fb8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005fbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005fce:	4622      	mov	r2, r4
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	0159      	lsls	r1, r3, #5
 8005fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fe0:	0150      	lsls	r0, r2, #5
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	1a51      	subs	r1, r2, r1
 8005fea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005fec:	4629      	mov	r1, r5
 8005fee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006000:	4649      	mov	r1, r9
 8006002:	018b      	lsls	r3, r1, #6
 8006004:	4641      	mov	r1, r8
 8006006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800600a:	4641      	mov	r1, r8
 800600c:	018a      	lsls	r2, r1, #6
 800600e:	4641      	mov	r1, r8
 8006010:	ebb2 0a01 	subs.w	sl, r2, r1
 8006014:	4649      	mov	r1, r9
 8006016:	eb63 0b01 	sbc.w	fp, r3, r1
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800602a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800602e:	4692      	mov	sl, r2
 8006030:	469b      	mov	fp, r3
 8006032:	4623      	mov	r3, r4
 8006034:	eb1a 0303 	adds.w	r3, sl, r3
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	462b      	mov	r3, r5
 800603c:	eb4b 0303 	adc.w	r3, fp, r3
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800604e:	4629      	mov	r1, r5
 8006050:	028b      	lsls	r3, r1, #10
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006058:	4621      	mov	r1, r4
 800605a:	028a      	lsls	r2, r1, #10
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006064:	2200      	movs	r2, #0
 8006066:	673b      	str	r3, [r7, #112]	@ 0x70
 8006068:	677a      	str	r2, [r7, #116]	@ 0x74
 800606a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800606e:	f7fa f96f 	bl	8000350 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4613      	mov	r3, r2
 8006078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800607c:	4b41      	ldr	r3, [pc, #260]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	3301      	adds	r3, #1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800608e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006092:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006096:	fbb2 f3f3 	udiv	r3, r2, r3
 800609a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800609e:	e0eb      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060a0:	4b38      	ldr	r3, [pc, #224]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ac:	4b35      	ldr	r3, [pc, #212]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d06b      	beq.n	8006190 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b8:	4b32      	ldr	r3, [pc, #200]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	099b      	lsrs	r3, r3, #6
 80060be:	2200      	movs	r2, #0
 80060c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80060cc:	2300      	movs	r3, #0
 80060ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80060d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80060d4:	4622      	mov	r2, r4
 80060d6:	462b      	mov	r3, r5
 80060d8:	f04f 0000 	mov.w	r0, #0
 80060dc:	f04f 0100 	mov.w	r1, #0
 80060e0:	0159      	lsls	r1, r3, #5
 80060e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e6:	0150      	lsls	r0, r2, #5
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4621      	mov	r1, r4
 80060ee:	1a51      	subs	r1, r2, r1
 80060f0:	61b9      	str	r1, [r7, #24]
 80060f2:	4629      	mov	r1, r5
 80060f4:	eb63 0301 	sbc.w	r3, r3, r1
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006106:	4659      	mov	r1, fp
 8006108:	018b      	lsls	r3, r1, #6
 800610a:	4651      	mov	r1, sl
 800610c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006110:	4651      	mov	r1, sl
 8006112:	018a      	lsls	r2, r1, #6
 8006114:	4651      	mov	r1, sl
 8006116:	ebb2 0801 	subs.w	r8, r2, r1
 800611a:	4659      	mov	r1, fp
 800611c:	eb63 0901 	sbc.w	r9, r3, r1
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800612c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006130:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006134:	4690      	mov	r8, r2
 8006136:	4699      	mov	r9, r3
 8006138:	4623      	mov	r3, r4
 800613a:	eb18 0303 	adds.w	r3, r8, r3
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	462b      	mov	r3, r5
 8006142:	eb49 0303 	adc.w	r3, r9, r3
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006154:	4629      	mov	r1, r5
 8006156:	024b      	lsls	r3, r1, #9
 8006158:	4621      	mov	r1, r4
 800615a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800615e:	4621      	mov	r1, r4
 8006160:	024a      	lsls	r2, r1, #9
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800616a:	2200      	movs	r2, #0
 800616c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800616e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006170:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006174:	f7fa f8ec 	bl	8000350 <__aeabi_uldivmod>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4613      	mov	r3, r2
 800617e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006182:	e065      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x420>
 8006184:	40023800 	.word	0x40023800
 8006188:	00f42400 	.word	0x00f42400
 800618c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006190:	4b3d      	ldr	r3, [pc, #244]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x458>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	099b      	lsrs	r3, r3, #6
 8006196:	2200      	movs	r2, #0
 8006198:	4618      	mov	r0, r3
 800619a:	4611      	mov	r1, r2
 800619c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80061a2:	2300      	movs	r3, #0
 80061a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80061a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80061aa:	4642      	mov	r2, r8
 80061ac:	464b      	mov	r3, r9
 80061ae:	f04f 0000 	mov.w	r0, #0
 80061b2:	f04f 0100 	mov.w	r1, #0
 80061b6:	0159      	lsls	r1, r3, #5
 80061b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061bc:	0150      	lsls	r0, r2, #5
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4641      	mov	r1, r8
 80061c4:	1a51      	subs	r1, r2, r1
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	4649      	mov	r1, r9
 80061ca:	eb63 0301 	sbc.w	r3, r3, r1
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80061dc:	4659      	mov	r1, fp
 80061de:	018b      	lsls	r3, r1, #6
 80061e0:	4651      	mov	r1, sl
 80061e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061e6:	4651      	mov	r1, sl
 80061e8:	018a      	lsls	r2, r1, #6
 80061ea:	4651      	mov	r1, sl
 80061ec:	1a54      	subs	r4, r2, r1
 80061ee:	4659      	mov	r1, fp
 80061f0:	eb63 0501 	sbc.w	r5, r3, r1
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	00eb      	lsls	r3, r5, #3
 80061fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006202:	00e2      	lsls	r2, r4, #3
 8006204:	4614      	mov	r4, r2
 8006206:	461d      	mov	r5, r3
 8006208:	4643      	mov	r3, r8
 800620a:	18e3      	adds	r3, r4, r3
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	464b      	mov	r3, r9
 8006210:	eb45 0303 	adc.w	r3, r5, r3
 8006214:	607b      	str	r3, [r7, #4]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006222:	4629      	mov	r1, r5
 8006224:	028b      	lsls	r3, r1, #10
 8006226:	4621      	mov	r1, r4
 8006228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800622c:	4621      	mov	r1, r4
 800622e:	028a      	lsls	r2, r1, #10
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
 8006234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006238:	2200      	movs	r2, #0
 800623a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800623e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006242:	f7fa f885 	bl	8000350 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4613      	mov	r3, r2
 800624c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006250:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x458>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	0f1b      	lsrs	r3, r3, #28
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800625e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006266:	fbb2 f3f3 	udiv	r3, r2, r3
 800626a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800626e:	e003      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006270:	4b06      	ldr	r3, [pc, #24]	@ (800628c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006272:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006276:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800627c:	4618      	mov	r0, r3
 800627e:	37b8      	adds	r7, #184	@ 0xb8
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	00f42400 	.word	0x00f42400

08006290 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e28d      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8083 	beq.w	80063b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062b0:	4b94      	ldr	r3, [pc, #592]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d019      	beq.n	80062f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062bc:	4b91      	ldr	r3, [pc, #580]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d106      	bne.n	80062d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062c8:	4b8e      	ldr	r3, [pc, #568]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062d4:	d00c      	beq.n	80062f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062d6:	4b8b      	ldr	r3, [pc, #556]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d112      	bne.n	8006308 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062e2:	4b88      	ldr	r3, [pc, #544]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ee:	d10b      	bne.n	8006308 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f0:	4b84      	ldr	r3, [pc, #528]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d05b      	beq.n	80063b4 <HAL_RCC_OscConfig+0x124>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d157      	bne.n	80063b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e25a      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006310:	d106      	bne.n	8006320 <HAL_RCC_OscConfig+0x90>
 8006312:	4b7c      	ldr	r3, [pc, #496]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a7b      	ldr	r2, [pc, #492]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e01d      	b.n	800635c <HAL_RCC_OscConfig+0xcc>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006328:	d10c      	bne.n	8006344 <HAL_RCC_OscConfig+0xb4>
 800632a:	4b76      	ldr	r3, [pc, #472]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a75      	ldr	r2, [pc, #468]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4b73      	ldr	r3, [pc, #460]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a72      	ldr	r2, [pc, #456]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 800633c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e00b      	b.n	800635c <HAL_RCC_OscConfig+0xcc>
 8006344:	4b6f      	ldr	r3, [pc, #444]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a6e      	ldr	r2, [pc, #440]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 800634a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	4b6c      	ldr	r3, [pc, #432]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a6b      	ldr	r2, [pc, #428]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800635a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d013      	beq.n	800638c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fb feda 	bl	800211c <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800636c:	f7fb fed6 	bl	800211c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b64      	cmp	r3, #100	@ 0x64
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e21f      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	4b61      	ldr	r3, [pc, #388]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0f0      	beq.n	800636c <HAL_RCC_OscConfig+0xdc>
 800638a:	e014      	b.n	80063b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fb fec6 	bl	800211c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006394:	f7fb fec2 	bl	800211c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	@ 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e20b      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a6:	4b57      	ldr	r3, [pc, #348]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x104>
 80063b2:	e000      	b.n	80063b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d06f      	beq.n	80064a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063c2:	4b50      	ldr	r3, [pc, #320]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 030c 	and.w	r3, r3, #12
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d017      	beq.n	80063fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d105      	bne.n	80063e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063da:	4b4a      	ldr	r3, [pc, #296]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b47      	ldr	r3, [pc, #284]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d11c      	bne.n	800642c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063f2:	4b44      	ldr	r3, [pc, #272]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d116      	bne.n	800642c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fe:	4b41      	ldr	r3, [pc, #260]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_RCC_OscConfig+0x186>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e1d3      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006416:	4b3b      	ldr	r3, [pc, #236]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4937      	ldr	r1, [pc, #220]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006426:	4313      	orrs	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642a:	e03a      	b.n	80064a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d020      	beq.n	8006476 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006434:	4b34      	ldr	r3, [pc, #208]	@ (8006508 <HAL_RCC_OscConfig+0x278>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7fb fe6f 	bl	800211c <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006442:	f7fb fe6b 	bl	800211c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e1b4      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006454:	4b2b      	ldr	r3, [pc, #172]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0f0      	beq.n	8006442 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006460:	4b28      	ldr	r3, [pc, #160]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4925      	ldr	r1, [pc, #148]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006470:	4313      	orrs	r3, r2
 8006472:	600b      	str	r3, [r1, #0]
 8006474:	e015      	b.n	80064a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006476:	4b24      	ldr	r3, [pc, #144]	@ (8006508 <HAL_RCC_OscConfig+0x278>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fb fe4e 	bl	800211c <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006484:	f7fb fe4a 	bl	800211c <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e193      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006496:	4b1b      	ldr	r3, [pc, #108]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d036      	beq.n	800651c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b6:	4b15      	ldr	r3, [pc, #84]	@ (800650c <HAL_RCC_OscConfig+0x27c>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064bc:	f7fb fe2e 	bl	800211c <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c4:	f7fb fe2a 	bl	800211c <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e173      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <HAL_RCC_OscConfig+0x274>)
 80064d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0x234>
 80064e2:	e01b      	b.n	800651c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064e4:	4b09      	ldr	r3, [pc, #36]	@ (800650c <HAL_RCC_OscConfig+0x27c>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ea:	f7fb fe17 	bl	800211c <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f0:	e00e      	b.n	8006510 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f2:	f7fb fe13 	bl	800211c <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d907      	bls.n	8006510 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e15c      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
 8006504:	40023800 	.word	0x40023800
 8006508:	42470000 	.word	0x42470000
 800650c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006510:	4b8a      	ldr	r3, [pc, #552]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ea      	bne.n	80064f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8097 	beq.w	8006658 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800652e:	4b83      	ldr	r3, [pc, #524]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	4b7f      	ldr	r3, [pc, #508]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	4a7e      	ldr	r2, [pc, #504]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006548:	6413      	str	r3, [r2, #64]	@ 0x40
 800654a:	4b7c      	ldr	r3, [pc, #496]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655a:	4b79      	ldr	r3, [pc, #484]	@ (8006740 <HAL_RCC_OscConfig+0x4b0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d118      	bne.n	8006598 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006566:	4b76      	ldr	r3, [pc, #472]	@ (8006740 <HAL_RCC_OscConfig+0x4b0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a75      	ldr	r2, [pc, #468]	@ (8006740 <HAL_RCC_OscConfig+0x4b0>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006572:	f7fb fdd3 	bl	800211c <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800657a:	f7fb fdcf 	bl	800211c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e118      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658c:	4b6c      	ldr	r3, [pc, #432]	@ (8006740 <HAL_RCC_OscConfig+0x4b0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <HAL_RCC_OscConfig+0x31e>
 80065a0:	4b66      	ldr	r3, [pc, #408]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a4:	4a65      	ldr	r2, [pc, #404]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ac:	e01c      	b.n	80065e8 <HAL_RCC_OscConfig+0x358>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d10c      	bne.n	80065d0 <HAL_RCC_OscConfig+0x340>
 80065b6:	4b61      	ldr	r3, [pc, #388]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	4a60      	ldr	r2, [pc, #384]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065bc:	f043 0304 	orr.w	r3, r3, #4
 80065c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c2:	4b5e      	ldr	r3, [pc, #376]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c6:	4a5d      	ldr	r2, [pc, #372]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ce:	e00b      	b.n	80065e8 <HAL_RCC_OscConfig+0x358>
 80065d0:	4b5a      	ldr	r3, [pc, #360]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d4:	4a59      	ldr	r2, [pc, #356]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	@ 0x70
 80065dc:	4b57      	ldr	r3, [pc, #348]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e0:	4a56      	ldr	r2, [pc, #344]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80065e2:	f023 0304 	bic.w	r3, r3, #4
 80065e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7fb fd94 	bl	800211c <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f6:	e00a      	b.n	800660e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7fb fd90 	bl	800211c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0d7      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660e:	4b4b      	ldr	r3, [pc, #300]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0ee      	beq.n	80065f8 <HAL_RCC_OscConfig+0x368>
 800661a:	e014      	b.n	8006646 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800661c:	f7fb fd7e 	bl	800211c <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006622:	e00a      	b.n	800663a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006624:	f7fb fd7a 	bl	800211c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e0c1      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663a:	4b40      	ldr	r3, [pc, #256]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ee      	bne.n	8006624 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d105      	bne.n	8006658 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664c:	4b3b      	ldr	r3, [pc, #236]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 800664e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006650:	4a3a      	ldr	r2, [pc, #232]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006656:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80ad 	beq.w	80067bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006662:	4b36      	ldr	r3, [pc, #216]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 030c 	and.w	r3, r3, #12
 800666a:	2b08      	cmp	r3, #8
 800666c:	d060      	beq.n	8006730 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d145      	bne.n	8006702 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006676:	4b33      	ldr	r3, [pc, #204]	@ (8006744 <HAL_RCC_OscConfig+0x4b4>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667c:	f7fb fd4e 	bl	800211c <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006684:	f7fb fd4a 	bl	800211c <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e093      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006696:	4b29      	ldr	r3, [pc, #164]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	071b      	lsls	r3, r3, #28
 80066ce:	491b      	ldr	r1, [pc, #108]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006744 <HAL_RCC_OscConfig+0x4b4>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066da:	f7fb fd1f 	bl	800211c <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066e2:	f7fb fd1b 	bl	800211c <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e064      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f4:	4b11      	ldr	r3, [pc, #68]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0f0      	beq.n	80066e2 <HAL_RCC_OscConfig+0x452>
 8006700:	e05c      	b.n	80067bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <HAL_RCC_OscConfig+0x4b4>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fb fd08 	bl	800211c <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006710:	f7fb fd04 	bl	800211c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e04d      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006722:	4b06      	ldr	r3, [pc, #24]	@ (800673c <HAL_RCC_OscConfig+0x4ac>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x480>
 800672e:	e045      	b.n	80067bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d107      	bne.n	8006748 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e040      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
 800673c:	40023800 	.word	0x40023800
 8006740:	40007000 	.word	0x40007000
 8006744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006748:	4b1f      	ldr	r3, [pc, #124]	@ (80067c8 <HAL_RCC_OscConfig+0x538>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d030      	beq.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006760:	429a      	cmp	r2, r3
 8006762:	d129      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800676e:	429a      	cmp	r2, r3
 8006770:	d122      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006778:	4013      	ands	r3, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800677e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006780:	4293      	cmp	r3, r2
 8006782:	d119      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	3b01      	subs	r3, #1
 8006792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006794:	429a      	cmp	r2, r3
 8006796:	d10f      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d001      	beq.n	80067bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800

080067cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e022      	b.n	8006824 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7fb f89f 	bl	8001934 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2203      	movs	r2, #3
 80067fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f814 	bl	800682c <HAL_SD_InitCard>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e00a      	b.n	8006824 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800682c:	b5b0      	push	{r4, r5, r7, lr}
 800682e:	b08e      	sub	sp, #56	@ 0x38
 8006830:	af04      	add	r7, sp, #16
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006834:	2300      	movs	r3, #0
 8006836:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800683c:	2300      	movs	r3, #0
 800683e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006844:	2300      	movs	r3, #0
 8006846:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006848:	2376      	movs	r3, #118	@ 0x76
 800684a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681d      	ldr	r5, [r3, #0]
 8006850:	466c      	mov	r4, sp
 8006852:	f107 0314 	add.w	r3, r7, #20
 8006856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800685a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800685e:	f107 0308 	add.w	r3, r7, #8
 8006862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006864:	4628      	mov	r0, r5
 8006866:	f001 fc19 	bl	800809c <SDIO_Init>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e04f      	b.n	800691c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800687c:	4b29      	ldr	r3, [pc, #164]	@ (8006924 <HAL_SD_InitCard+0xf8>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fc51 	bl	800812e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800688c:	4b25      	ldr	r3, [pc, #148]	@ (8006924 <HAL_SD_InitCard+0xf8>)
 800688e:	2201      	movs	r2, #1
 8006890:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006892:	2002      	movs	r0, #2
 8006894:	f7fb fc4e 	bl	8002134 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 ff55 	bl	8007748 <SD_PowerON>
 800689e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e02e      	b.n	800691c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fe74 	bl	80075ac <SD_InitCard>
 80068c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e01b      	b.n	800691c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 fcb0 	bl	8008252 <SDMMC_CmdBlockLength>
 80068f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00f      	beq.n	800691a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006928 <HAL_SD_InitCard+0xfc>)
 8006900:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3728      	adds	r7, #40	@ 0x28
 8006920:	46bd      	mov	sp, r7
 8006922:	bdb0      	pop	{r4, r5, r7, pc}
 8006924:	422580a0 	.word	0x422580a0
 8006928:	004005ff 	.word	0x004005ff

0800692c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08c      	sub	sp, #48	@ 0x30
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d107      	bne.n	8006954 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006948:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0be      	b.n	8006ad2 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	f040 80b7 	bne.w	8006ad0 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	441a      	add	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006972:	429a      	cmp	r2, r3
 8006974:	d907      	bls.n	8006986 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e0a5      	b.n	8006ad2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2203      	movs	r2, #3
 800698a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80069a4:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	4a4c      	ldr	r2, [pc, #304]	@ (8006adc <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80069ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b2:	4a4b      	ldr	r2, [pc, #300]	@ (8006ae0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80069b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	2200      	movs	r2, #0
 80069bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	2200      	movs	r2, #0
 80069c4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3380      	adds	r3, #128	@ 0x80
 80069ec:	4619      	mov	r1, r3
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	025b      	lsls	r3, r3, #9
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	f7fb fd81 	bl	80024fc <HAL_DMA_Start_IT>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8006a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a33      	ldr	r2, [pc, #204]	@ (8006ae4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006a16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e050      	b.n	8006ad2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ae8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d002      	beq.n	8006a44 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8006a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a40:	025b      	lsls	r3, r3, #9
 8006a42:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a44:	f04f 33ff 	mov.w	r3, #4294967295
 8006a48:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	025b      	lsls	r3, r3, #9
 8006a4e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a50:	2390      	movs	r3, #144	@ 0x90
 8006a52:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a54:	2302      	movs	r3, #2
 8006a56:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f107 0210 	add.w	r2, r7, #16
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 fbc5 	bl	80081fa <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d90a      	bls.n	8006a8c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2282      	movs	r2, #130	@ 0x82
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 fc29 	bl	80082da <SDMMC_CmdReadMultiBlock>
 8006a88:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006a8a:	e009      	b.n	8006aa0 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2281      	movs	r2, #129	@ 0x81
 8006a90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 fbfc 	bl	8008296 <SDMMC_CmdReadSingleBlock>
 8006a9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d012      	beq.n	8006acc <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8006ae4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006aac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e002      	b.n	8006ad2 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	e000      	b.n	8006ad2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006ad0:	2302      	movs	r3, #2
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3730      	adds	r7, #48	@ 0x30
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	080073bb 	.word	0x080073bb
 8006ae0:	0800742d 	.word	0x0800742d
 8006ae4:	004005ff 	.word	0x004005ff
 8006ae8:	4225858c 	.word	0x4225858c

08006aec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	@ 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d107      	bne.n	8006b14 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b08:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0c1      	b.n	8006c98 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	f040 80ba 	bne.w	8006c96 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	441a      	add	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d907      	bls.n	8006b46 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e0a8      	b.n	8006c98 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2203      	movs	r2, #3
 8006b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2200      	movs	r2, #0
 8006b54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 021a 	orr.w	r2, r2, #26
 8006b64:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6a:	4a4d      	ldr	r2, [pc, #308]	@ (8006ca0 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8006b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b72:	4a4c      	ldr	r2, [pc, #304]	@ (8006ca4 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8006b74:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d002      	beq.n	8006b8c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	025b      	lsls	r3, r3, #9
 8006b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d90a      	bls.n	8006ba8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	22a0      	movs	r2, #160	@ 0xa0
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 fbdf 	bl	8008362 <SDMMC_CmdWriteMultiBlock>
 8006ba4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006ba6:	e009      	b.n	8006bbc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2290      	movs	r2, #144	@ 0x90
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fbb2 	bl	800831e <SDMMC_CmdWriteSingleBlock>
 8006bba:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d012      	beq.n	8006be8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a38      	ldr	r2, [pc, #224]	@ (8006ca8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006bc8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e057      	b.n	8006c98 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006be8:	4b30      	ldr	r3, [pc, #192]	@ (8006cac <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf2:	2240      	movs	r2, #64	@ 0x40
 8006bf4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3380      	adds	r3, #128	@ 0x80
 8006c1e:	461a      	mov	r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	025b      	lsls	r3, r3, #9
 8006c24:	089b      	lsrs	r3, r3, #2
 8006c26:	f7fb fc69 	bl	80024fc <HAL_DMA_Start_IT>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01a      	beq.n	8006c66 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 021a 	bic.w	r2, r2, #26
 8006c3e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006c46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e018      	b.n	8006c98 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c66:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	025b      	lsls	r3, r3, #9
 8006c70:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c72:	2390      	movs	r3, #144	@ 0x90
 8006c74:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f107 0210 	add.w	r2, r7, #16
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fab4 	bl	80081fa <SDIO_ConfigData>

      return HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	e000      	b.n	8006c98 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8006c96:	2302      	movs	r3, #2
  }
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3730      	adds	r7, #48	@ 0x30
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	08007391 	.word	0x08007391
 8006ca4:	0800742d 	.word	0x0800742d
 8006ca8:	004005ff 	.word	0x004005ff
 8006cac:	4225858c 	.word	0x4225858c

08006cb0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_SD_IRQHandler+0x2e>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fdec 	bl	80078b4 <SD_Read_IT>
 8006cdc:	e155      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 808f 	beq.w	8006e0c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8006d06:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006d0a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d039      	beq.n	8006d9a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <HAL_SD_IRQHandler+0x8a>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d011      	beq.n	8006d5e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 fb32 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006d44:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f91f 	bl	8006f9c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006d66:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <HAL_SD_IRQHandler+0xda>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f003 fa84 	bl	800a298 <HAL_SD_RxCpltCallback>
 8006d90:	e0fb      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f003 fa76 	bl	800a284 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d98:	e0f7      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80f2 	beq.w	8006f8a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d011      	beq.n	8006dd4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 faf7 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006dba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d008      	beq.n	8006dd4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8e4 	bl	8006f9c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 80d5 	bne.w	8006f8a <HAL_SD_IRQHandler+0x2da>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f040 80cf 	bne.w	8006f8a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0208 	bic.w	r2, r2, #8
 8006dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f003 fa3d 	bl	800a284 <HAL_SD_TxCpltCallback>
}
 8006e0a:	e0be      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d008      	beq.n	8006e2c <HAL_SD_IRQHandler+0x17c>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fd96 	bl	8007956 <SD_Write_IT>
 8006e2a:	e0ae      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e32:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 80a7 	beq.w	8006f8a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4e:	f043 0202 	orr.w	r2, r3, #2
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	f043 0208 	orr.w	r2, r3, #8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9c:	f043 0210 	orr.w	r2, r3, #16
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006eac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f001 fa70 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f855 	bl	8006f9c <HAL_SD_ErrorCallback>
}
 8006ef2:	e04a      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d045      	beq.n	8006f8a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <HAL_SD_IRQHandler+0x262>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d011      	beq.n	8006f36 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f16:	4a1f      	ldr	r2, [pc, #124]	@ (8006f94 <HAL_SD_IRQHandler+0x2e4>)
 8006f18:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fb fb44 	bl	80025ac <HAL_DMA_Abort_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d02f      	beq.n	8006f8a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 face 	bl	80074d0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f34:	e029      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <HAL_SD_IRQHandler+0x29a>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d011      	beq.n	8006f6e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4e:	4a12      	ldr	r2, [pc, #72]	@ (8006f98 <HAL_SD_IRQHandler+0x2e8>)
 8006f50:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fb fb28 	bl	80025ac <HAL_DMA_Abort_IT>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fae9 	bl	800753e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f6c:	e00d      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f003 f974 	bl	800a270 <HAL_SD_AbortCallback>
}
 8006f88:	e7ff      	b.n	8006f8a <HAL_SD_IRQHandler+0x2da>
 8006f8a:	bf00      	nop
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	080074d1 	.word	0x080074d1
 8006f98:	0800753f 	.word	0x0800753f

08006f9c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fbe:	0f9b      	lsrs	r3, r3, #30
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fca:	0e9b      	lsrs	r3, r3, #26
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fdc:	0e1b      	lsrs	r3, r3, #24
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f003 0303 	and.w	r3, r3, #3
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fee:	0c1b      	lsrs	r3, r3, #16
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ffa:	0a1b      	lsrs	r3, r3, #8
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007006:	b2da      	uxtb	r2, r3
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007010:	0d1b      	lsrs	r3, r3, #20
 8007012:	b29a      	uxth	r2, r3
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800701c:	0c1b      	lsrs	r3, r3, #16
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	b2da      	uxtb	r2, r3
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800702e:	0bdb      	lsrs	r3, r3, #15
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007040:	0b9b      	lsrs	r3, r3, #14
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	b2da      	uxtb	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007052:	0b5b      	lsrs	r3, r3, #13
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007064:	0b1b      	lsrs	r3, r3, #12
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2200      	movs	r2, #0
 8007076:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707c:	2b00      	cmp	r3, #0
 800707e:	d163      	bne.n	8007148 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007084:	009a      	lsls	r2, r3, #2
 8007086:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800708a:	4013      	ands	r3, r2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007090:	0f92      	lsrs	r2, r2, #30
 8007092:	431a      	orrs	r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800709c:	0edb      	lsrs	r3, r3, #27
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ae:	0e1b      	lsrs	r3, r3, #24
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070c0:	0d5b      	lsrs	r3, r3, #21
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070d2:	0c9b      	lsrs	r3, r3, #18
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070e4:	0bdb      	lsrs	r3, r3, #15
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	7e1b      	ldrb	r3, [r3, #24]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	3302      	adds	r3, #2
 8007108:	2201      	movs	r2, #1
 800710a:	fa02 f303 	lsl.w	r3, r2, r3
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007112:	fb03 f202 	mul.w	r2, r3, r2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	7a1b      	ldrb	r3, [r3, #8]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	2201      	movs	r2, #1
 8007126:	409a      	lsls	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007134:	0a52      	lsrs	r2, r2, #9
 8007136:	fb03 f202 	mul.w	r2, r3, r2
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007144:	661a      	str	r2, [r3, #96]	@ 0x60
 8007146:	e031      	b.n	80071ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714c:	2b01      	cmp	r3, #1
 800714e:	d11d      	bne.n	800718c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007154:	041b      	lsls	r3, r3, #16
 8007156:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800715e:	0c1b      	lsrs	r3, r3, #16
 8007160:	431a      	orrs	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	3301      	adds	r3, #1
 800716c:	029a      	lsls	r2, r3, #10
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007180:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	661a      	str	r2, [r3, #96]	@ 0x60
 800718a:	e00f      	b.n	80071ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a58      	ldr	r2, [pc, #352]	@ (80072f4 <HAL_SD_GetCardCSD+0x344>)
 8007192:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007198:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e09d      	b.n	80072e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b0:	0b9b      	lsrs	r3, r3, #14
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e4:	0fdb      	lsrs	r3, r3, #31
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f0:	0f5b      	lsrs	r3, r3, #29
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007202:	0e9b      	lsrs	r3, r3, #26
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	b2da      	uxtb	r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007214:	0d9b      	lsrs	r3, r3, #22
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	b2da      	uxtb	r2, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007226:	0d5b      	lsrs	r3, r3, #21
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	b2da      	uxtb	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007242:	0c1b      	lsrs	r3, r3, #16
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	b2da      	uxtb	r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007256:	0bdb      	lsrs	r3, r3, #15
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	b2da      	uxtb	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726a:	0b9b      	lsrs	r3, r3, #14
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	b2da      	uxtb	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	0b5b      	lsrs	r3, r3, #13
 8007280:	b2db      	uxtb	r3, r3
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	b2da      	uxtb	r2, r3
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007292:	0b1b      	lsrs	r3, r3, #12
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	0a9b      	lsrs	r3, r3, #10
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ba:	0a1b      	lsrs	r3, r3, #8
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	004005ff 	.word	0x004005ff

080072f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800735c:	f107 030c 	add.w	r3, r7, #12
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa7e 	bl	8007864 <SD_SendStatus>
 8007368:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	0a5b      	lsrs	r3, r3, #9
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007386:	693b      	ldr	r3, [r7, #16]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3718      	adds	r7, #24
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073cc:	2b82      	cmp	r3, #130	@ 0x82
 80073ce:	d111      	bne.n	80073f4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 ffe7 	bl	80083a8 <SDMMC_CmdStopTransfer>
 80073da:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d008      	beq.n	80073f4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff fdd4 	bl	8006f9c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0208 	bic.w	r2, r2, #8
 8007402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f240 523a 	movw	r2, #1338	@ 0x53a
 800740c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f002 ff3b 	bl	800a298 <HAL_SD_RxCpltCallback>
#endif
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007438:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fb fa62 	bl	8002904 <HAL_DMA_GetError>
 8007440:	4603      	mov	r3, r0
 8007442:	2b02      	cmp	r3, #2
 8007444:	d03e      	beq.n	80074c4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007454:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d002      	beq.n	8007462 <SD_DMAError+0x36>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d12d      	bne.n	80074be <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a19      	ldr	r2, [pc, #100]	@ (80074cc <SD_DMAError+0xa0>)
 8007468:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007478:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007486:	6978      	ldr	r0, [r7, #20]
 8007488:	f7ff ff62 	bl	8007350 <HAL_SD_GetCardState>
 800748c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b06      	cmp	r3, #6
 8007492:	d002      	beq.n	800749a <SD_DMAError+0x6e>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b05      	cmp	r3, #5
 8007498:	d10a      	bne.n	80074b0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 ff82 	bl	80083a8 <SDMMC_CmdStopTransfer>
 80074a4:	4602      	mov	r2, r0
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074aa:	431a      	orrs	r2, r3
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80074be:	6978      	ldr	r0, [r7, #20]
 80074c0:	f7ff fd6c 	bl	8006f9c <HAL_SD_ErrorCallback>
#endif
  }
}
 80074c4:	bf00      	nop
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	004005ff 	.word	0x004005ff

080074d0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074dc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7ff ff31 	bl	8007350 <HAL_SD_GetCardState>
 80074ee:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b06      	cmp	r3, #6
 8007502:	d002      	beq.n	800750a <SD_DMATxAbort+0x3a>
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b05      	cmp	r3, #5
 8007508:	d10a      	bne.n	8007520 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 ff4a 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8007514:	4602      	mov	r2, r0
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	431a      	orrs	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f002 fea1 	bl	800a270 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800752e:	e002      	b.n	8007536 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fd33 	bl	8006f9c <HAL_SD_ErrorCallback>
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007554:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fefa 	bl	8007350 <HAL_SD_GetCardState>
 800755c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b06      	cmp	r3, #6
 8007570:	d002      	beq.n	8007578 <SD_DMARxAbort+0x3a>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b05      	cmp	r3, #5
 8007576:	d10a      	bne.n	800758e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f000 ff13 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8007582:	4602      	mov	r2, r0
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	431a      	orrs	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f002 fe6a 	bl	800a270 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800759c:	e002      	b.n	80075a4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f7ff fcfc 	bl	8006f9c <HAL_SD_ErrorCallback>
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075ac:	b5b0      	push	{r4, r5, r7, lr}
 80075ae:	b094      	sub	sp, #80	@ 0x50
 80075b0:	af04      	add	r7, sp, #16
 80075b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075b4:	2301      	movs	r3, #1
 80075b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fdc4 	bl	800814a <SDIO_GetPowerState>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075c8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80075cc:	e0b8      	b.n	8007740 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d02f      	beq.n	8007636 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 ffab 	bl	8008536 <SDMMC_CmdSendCID>
 80075e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <SD_InitCard+0x40>
    {
      return errorstate;
 80075e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ea:	e0a9      	b.n	8007740 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2100      	movs	r1, #0
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fdee 	bl	80081d4 <SDIO_GetResponse>
 80075f8:	4602      	mov	r2, r0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2104      	movs	r1, #4
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fde5 	bl	80081d4 <SDIO_GetResponse>
 800760a:	4602      	mov	r2, r0
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2108      	movs	r1, #8
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fddc 	bl	80081d4 <SDIO_GetResponse>
 800761c:	4602      	mov	r2, r0
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	210c      	movs	r1, #12
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fdd3 	bl	80081d4 <SDIO_GetResponse>
 800762e:	4602      	mov	r2, r0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800763a:	2b03      	cmp	r3, #3
 800763c:	d00d      	beq.n	800765a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f107 020e 	add.w	r2, r7, #14
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ffb1 	bl	80085b0 <SDMMC_CmdSetRelAdd>
 800764e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <SD_InitCard+0xae>
    {
      return errorstate;
 8007656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007658:	e072      	b.n	8007740 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765e:	2b03      	cmp	r3, #3
 8007660:	d036      	beq.n	80076d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007662:	89fb      	ldrh	r3, [r7, #14]
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007672:	041b      	lsls	r3, r3, #16
 8007674:	4619      	mov	r1, r3
 8007676:	4610      	mov	r0, r2
 8007678:	f000 ff7b 	bl	8008572 <SDMMC_CmdSendCSD>
 800767c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800767e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007686:	e05b      	b.n	8007740 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fda0 	bl	80081d4 <SDIO_GetResponse>
 8007694:	4602      	mov	r2, r0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2104      	movs	r1, #4
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fd97 	bl	80081d4 <SDIO_GetResponse>
 80076a6:	4602      	mov	r2, r0
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2108      	movs	r1, #8
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fd8e 	bl	80081d4 <SDIO_GetResponse>
 80076b8:	4602      	mov	r2, r0
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	210c      	movs	r1, #12
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fd85 	bl	80081d4 <SDIO_GetResponse>
 80076ca:	4602      	mov	r2, r0
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2104      	movs	r1, #4
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fd7c 	bl	80081d4 <SDIO_GetResponse>
 80076dc:	4603      	mov	r3, r0
 80076de:	0d1a      	lsrs	r2, r3, #20
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80076e4:	f107 0310 	add.w	r3, r7, #16
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff fc60 	bl	8006fb0 <HAL_SD_GetCardCSD>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80076fa:	e021      	b.n	8007740 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6819      	ldr	r1, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	2200      	movs	r2, #0
 8007708:	461c      	mov	r4, r3
 800770a:	4615      	mov	r5, r2
 800770c:	4622      	mov	r2, r4
 800770e:	462b      	mov	r3, r5
 8007710:	4608      	mov	r0, r1
 8007712:	f000 fe6b 	bl	80083ec <SDMMC_CmdSelDesel>
 8007716:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <SD_InitCard+0x176>
  {
    return errorstate;
 800771e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007720:	e00e      	b.n	8007740 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681d      	ldr	r5, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	466c      	mov	r4, sp
 800772a:	f103 0210 	add.w	r2, r3, #16
 800772e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007734:	3304      	adds	r3, #4
 8007736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007738:	4628      	mov	r0, r5
 800773a:	f000 fcaf 	bl	800809c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3740      	adds	r7, #64	@ 0x40
 8007744:	46bd      	mov	sp, r7
 8007746:	bdb0      	pop	{r4, r5, r7, pc}

08007748 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	2300      	movs	r3, #0
 800775a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fe66 	bl	8008432 <SDMMC_CmdGoIdleState>
 8007766:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <SD_PowerON+0x2a>
  {
    return errorstate;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	e072      	b.n	8007858 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fe79 	bl	800846e <SDMMC_CmdOperCond>
 800777c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00d      	beq.n	80077a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fe4f 	bl	8008432 <SDMMC_CmdGoIdleState>
 8007794:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e05b      	b.n	8007858 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d137      	bne.n	800781e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fe79 	bl	80084ac <SDMMC_CmdAppCommand>
 80077ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d02d      	beq.n	800781e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80077c6:	e047      	b.n	8007858 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2100      	movs	r1, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fe6c 	bl	80084ac <SDMMC_CmdAppCommand>
 80077d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	e03b      	b.n	8007858 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	491e      	ldr	r1, [pc, #120]	@ (8007860 <SD_PowerON+0x118>)
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fe82 	bl	80084f0 <SDMMC_CmdAppOperCommand>
 80077ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80077f8:	e02e      	b.n	8007858 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2100      	movs	r1, #0
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fce7 	bl	80081d4 <SDIO_GetResponse>
 8007806:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	0fdb      	lsrs	r3, r3, #31
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <SD_PowerON+0xcc>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <SD_PowerON+0xce>
 8007814:	2300      	movs	r3, #0
 8007816:	613b      	str	r3, [r7, #16]

    count++;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3301      	adds	r3, #1
 800781c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007824:	4293      	cmp	r3, r2
 8007826:	d802      	bhi.n	800782e <SD_PowerON+0xe6>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0cc      	beq.n	80077c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007834:	4293      	cmp	r3, r2
 8007836:	d902      	bls.n	800783e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007838:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800783c:	e00c      	b.n	8007858 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d003      	beq.n	8007850 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44
 800784e:	e002      	b.n	8007856 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	c1100000 	.word	0xc1100000

08007864 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007878:	e018      	b.n	80078ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f000 feb3 	bl	80085f2 <SDMMC_CmdSendStatus>
 800788c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e009      	b.n	80078ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fc98 	bl	80081d4 <SDIO_GetResponse>
 80078a4:	4602      	mov	r2, r0
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d03f      	beq.n	800794e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]
 80078d2:	e033      	b.n	800793c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fc0a 	bl	80080f2 <SDIO_ReadFIFO>
 80078de:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	3b01      	subs	r3, #1
 8007908:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	b2da      	uxtb	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3301      	adds	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3b01      	subs	r3, #1
 800791e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	0e1b      	lsrs	r3, r3, #24
 8007924:	b2da      	uxtb	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	701a      	strb	r2, [r3, #0]
      tmp++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3301      	adds	r3, #1
 800792e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3b01      	subs	r3, #1
 8007934:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3301      	adds	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2b07      	cmp	r3, #7
 8007940:	d9c8      	bls.n	80078d4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800794e:	bf00      	nop
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007968:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d043      	beq.n	80079f8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e037      	b.n	80079e6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	3b01      	subs	r3, #1
 8007986:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	021a      	lsls	r2, r3, #8
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	4313      	orrs	r3, r2
 8007992:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	041a      	lsls	r2, r3, #16
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	061a      	lsls	r2, r3, #24
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3301      	adds	r3, #1
 80079c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f107 0208 	add.w	r2, r7, #8
 80079d8:	4611      	mov	r1, r2
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fb96 	bl	800810c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	3301      	adds	r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b07      	cmp	r3, #7
 80079ea:	d9c4      	bls.n	8007976 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80079f8:	bf00      	nop
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e07b      	b.n	8007b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d108      	bne.n	8007a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a22:	d009      	beq.n	8007a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	61da      	str	r2, [r3, #28]
 8007a2a:	e005      	b.n	8007a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d106      	bne.n	8007a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7fa f8e4 	bl	8001c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007abc:	ea42 0103 	orr.w	r1, r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	f003 0104 	and.w	r1, r3, #4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	f003 0210 	and.w	r2, r3, #16
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e042      	b.n	8007baa <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d106      	bne.n	8007b3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7fa f9e3 	bl	8001f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2224      	movs	r2, #36	@ 0x24
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f82c 	bl	8007bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695a      	ldr	r2, [r3, #20]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bb8:	b0c0      	sub	sp, #256	@ 0x100
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd0:	68d9      	ldr	r1, [r3, #12]
 8007bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	ea40 0301 	orr.w	r3, r0, r1
 8007bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c0c:	f021 010c 	bic.w	r1, r1, #12
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2e:	6999      	ldr	r1, [r3, #24]
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	ea40 0301 	orr.w	r3, r0, r1
 8007c3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b8f      	ldr	r3, [pc, #572]	@ (8007e80 <UART_SetConfig+0x2cc>)
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d005      	beq.n	8007c54 <UART_SetConfig+0xa0>
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e84 <UART_SetConfig+0x2d0>)
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d104      	bne.n	8007c5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c54:	f7fd fdae 	bl	80057b4 <HAL_RCC_GetPCLK2Freq>
 8007c58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c5c:	e003      	b.n	8007c66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c5e:	f7fd fd95 	bl	800578c <HAL_RCC_GetPCLK1Freq>
 8007c62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c70:	f040 810c 	bne.w	8007e8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	1891      	adds	r1, r2, r2
 8007c8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c8e:	415b      	adcs	r3, r3
 8007c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c96:	4621      	mov	r1, r4
 8007c98:	eb12 0801 	adds.w	r8, r2, r1
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	eb43 0901 	adc.w	r9, r3, r1
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cb6:	4690      	mov	r8, r2
 8007cb8:	4699      	mov	r9, r3
 8007cba:	4623      	mov	r3, r4
 8007cbc:	eb18 0303 	adds.w	r3, r8, r3
 8007cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	eb49 0303 	adc.w	r3, r9, r3
 8007cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	18db      	adds	r3, r3, r3
 8007ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ce8:	4613      	mov	r3, r2
 8007cea:	eb42 0303 	adc.w	r3, r2, r3
 8007cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007cf8:	f7f8 fb2a 	bl	8000350 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4b61      	ldr	r3, [pc, #388]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007d02:	fba3 2302 	umull	r2, r3, r3, r2
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	011c      	lsls	r4, r3, #4
 8007d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	1891      	adds	r1, r2, r2
 8007d22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d24:	415b      	adcs	r3, r3
 8007d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d32:	4649      	mov	r1, r9
 8007d34:	eb43 0b01 	adc.w	fp, r3, r1
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d4c:	4692      	mov	sl, r2
 8007d4e:	469b      	mov	fp, r3
 8007d50:	4643      	mov	r3, r8
 8007d52:	eb1a 0303 	adds.w	r3, sl, r3
 8007d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	18db      	adds	r3, r3, r3
 8007d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7e:	4613      	mov	r3, r2
 8007d80:	eb42 0303 	adc.w	r3, r2, r3
 8007d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d8e:	f7f8 fadf 	bl	8000350 <__aeabi_uldivmod>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4611      	mov	r1, r2
 8007d98:	4b3b      	ldr	r3, [pc, #236]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	2264      	movs	r2, #100	@ 0x64
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	1acb      	subs	r3, r1, r3
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007dae:	4b36      	ldr	r3, [pc, #216]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007db0:	fba3 2302 	umull	r2, r3, r3, r2
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007dbc:	441c      	add	r4, r3
 8007dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	1891      	adds	r1, r2, r2
 8007dd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007dd8:	415b      	adcs	r3, r3
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007de0:	4641      	mov	r1, r8
 8007de2:	1851      	adds	r1, r2, r1
 8007de4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007de6:	4649      	mov	r1, r9
 8007de8:	414b      	adcs	r3, r1
 8007dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007df8:	4659      	mov	r1, fp
 8007dfa:	00cb      	lsls	r3, r1, #3
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e02:	4651      	mov	r1, sl
 8007e04:	00ca      	lsls	r2, r1, #3
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	189b      	adds	r3, r3, r2
 8007e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e14:	464b      	mov	r3, r9
 8007e16:	460a      	mov	r2, r1
 8007e18:	eb42 0303 	adc.w	r3, r2, r3
 8007e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e34:	460b      	mov	r3, r1
 8007e36:	18db      	adds	r3, r3, r3
 8007e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	eb42 0303 	adc.w	r3, r2, r3
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e4a:	f7f8 fa81 	bl	8000350 <__aeabi_uldivmod>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007e54:	fba3 1302 	umull	r1, r3, r3, r2
 8007e58:	095b      	lsrs	r3, r3, #5
 8007e5a:	2164      	movs	r1, #100	@ 0x64
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	3332      	adds	r3, #50	@ 0x32
 8007e66:	4a08      	ldr	r2, [pc, #32]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007e68:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	f003 0207 	and.w	r2, r3, #7
 8007e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4422      	add	r2, r4
 8007e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e7c:	e106      	b.n	800808c <UART_SetConfig+0x4d8>
 8007e7e:	bf00      	nop
 8007e80:	40011000 	.word	0x40011000
 8007e84:	40011400 	.word	0x40011400
 8007e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	1891      	adds	r1, r2, r2
 8007ea4:	6239      	str	r1, [r7, #32]
 8007ea6:	415b      	adcs	r3, r3
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eae:	4641      	mov	r1, r8
 8007eb0:	1854      	adds	r4, r2, r1
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	eb43 0501 	adc.w	r5, r3, r1
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	00eb      	lsls	r3, r5, #3
 8007ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ec6:	00e2      	lsls	r2, r4, #3
 8007ec8:	4614      	mov	r4, r2
 8007eca:	461d      	mov	r5, r3
 8007ecc:	4643      	mov	r3, r8
 8007ece:	18e3      	adds	r3, r4, r3
 8007ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	eb45 0303 	adc.w	r3, r5, r3
 8007eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007eee:	f04f 0200 	mov.w	r2, #0
 8007ef2:	f04f 0300 	mov.w	r3, #0
 8007ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007efa:	4629      	mov	r1, r5
 8007efc:	008b      	lsls	r3, r1, #2
 8007efe:	4621      	mov	r1, r4
 8007f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f04:	4621      	mov	r1, r4
 8007f06:	008a      	lsls	r2, r1, #2
 8007f08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f0c:	f7f8 fa20 	bl	8000350 <__aeabi_uldivmod>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4b60      	ldr	r3, [pc, #384]	@ (8008098 <UART_SetConfig+0x4e4>)
 8007f16:	fba3 2302 	umull	r2, r3, r3, r2
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	011c      	lsls	r4, r3, #4
 8007f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f30:	4642      	mov	r2, r8
 8007f32:	464b      	mov	r3, r9
 8007f34:	1891      	adds	r1, r2, r2
 8007f36:	61b9      	str	r1, [r7, #24]
 8007f38:	415b      	adcs	r3, r3
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f40:	4641      	mov	r1, r8
 8007f42:	1851      	adds	r1, r2, r1
 8007f44:	6139      	str	r1, [r7, #16]
 8007f46:	4649      	mov	r1, r9
 8007f48:	414b      	adcs	r3, r1
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f58:	4659      	mov	r1, fp
 8007f5a:	00cb      	lsls	r3, r1, #3
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f62:	4651      	mov	r1, sl
 8007f64:	00ca      	lsls	r2, r1, #3
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	189b      	adds	r3, r3, r2
 8007f70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f74:	464b      	mov	r3, r9
 8007f76:	460a      	mov	r2, r1
 8007f78:	eb42 0303 	adc.w	r3, r2, r3
 8007f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f98:	4649      	mov	r1, r9
 8007f9a:	008b      	lsls	r3, r1, #2
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	008a      	lsls	r2, r1, #2
 8007fa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007faa:	f7f8 f9d1 	bl	8000350 <__aeabi_uldivmod>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4b38      	ldr	r3, [pc, #224]	@ (8008098 <UART_SetConfig+0x4e4>)
 8007fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	2264      	movs	r2, #100	@ 0x64
 8007fbe:	fb02 f303 	mul.w	r3, r2, r3
 8007fc2:	1acb      	subs	r3, r1, r3
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	3332      	adds	r3, #50	@ 0x32
 8007fc8:	4a33      	ldr	r2, [pc, #204]	@ (8008098 <UART_SetConfig+0x4e4>)
 8007fca:	fba2 2303 	umull	r2, r3, r2, r3
 8007fce:	095b      	lsrs	r3, r3, #5
 8007fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fd4:	441c      	add	r4, r3
 8007fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fda:	2200      	movs	r2, #0
 8007fdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fde:	677a      	str	r2, [r7, #116]	@ 0x74
 8007fe0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	1891      	adds	r1, r2, r2
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	415b      	adcs	r3, r3
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ff4:	4641      	mov	r1, r8
 8007ff6:	1851      	adds	r1, r2, r1
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	414b      	adcs	r3, r1
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800800c:	4659      	mov	r1, fp
 800800e:	00cb      	lsls	r3, r1, #3
 8008010:	4651      	mov	r1, sl
 8008012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008016:	4651      	mov	r1, sl
 8008018:	00ca      	lsls	r2, r1, #3
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	4603      	mov	r3, r0
 8008020:	4642      	mov	r2, r8
 8008022:	189b      	adds	r3, r3, r2
 8008024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008026:	464b      	mov	r3, r9
 8008028:	460a      	mov	r2, r1
 800802a:	eb42 0303 	adc.w	r3, r2, r3
 800802e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	663b      	str	r3, [r7, #96]	@ 0x60
 800803a:	667a      	str	r2, [r7, #100]	@ 0x64
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008048:	4649      	mov	r1, r9
 800804a:	008b      	lsls	r3, r1, #2
 800804c:	4641      	mov	r1, r8
 800804e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008052:	4641      	mov	r1, r8
 8008054:	008a      	lsls	r2, r1, #2
 8008056:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800805a:	f7f8 f979 	bl	8000350 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <UART_SetConfig+0x4e4>)
 8008064:	fba3 1302 	umull	r1, r3, r3, r2
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	2164      	movs	r1, #100	@ 0x64
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	3332      	adds	r3, #50	@ 0x32
 8008076:	4a08      	ldr	r2, [pc, #32]	@ (8008098 <UART_SetConfig+0x4e4>)
 8008078:	fba2 2303 	umull	r2, r3, r2, r3
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	f003 020f 	and.w	r2, r3, #15
 8008082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4422      	add	r2, r4
 800808a:	609a      	str	r2, [r3, #8]
}
 800808c:	bf00      	nop
 800808e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008092:	46bd      	mov	sp, r7
 8008094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008098:	51eb851f 	.word	0x51eb851f

0800809c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800809c:	b084      	sub	sp, #16
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	f107 001c 	add.w	r0, r7, #28
 80080aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80080b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80080b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80080b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80080ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80080be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80080c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80080c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80080d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	b004      	add	sp, #16
 80080f0:	4770      	bx	lr

080080f2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2203      	movs	r2, #3
 800813a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0303 	and.w	r3, r3, #3
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008184:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800818a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008190:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4313      	orrs	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80081a0:	f023 030f 	bic.w	r3, r3, #15
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	b2db      	uxtb	r3, r3
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3314      	adds	r3, #20
 80081e2:	461a      	mov	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	4413      	add	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
}  
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008220:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008226:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800822c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008244:	2300      	movs	r3, #0

}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b088      	sub	sp, #32
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008260:	2310      	movs	r3, #16
 8008262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008264:	2340      	movs	r3, #64	@ 0x40
 8008266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800826c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008270:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff ff74 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800827e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008282:	2110      	movs	r1, #16
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f9d7 	bl	8008638 <SDMMC_GetCmdResp1>
 800828a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800828c:	69fb      	ldr	r3, [r7, #28]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b088      	sub	sp, #32
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80082a4:	2311      	movs	r3, #17
 80082a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082a8:	2340      	movs	r3, #64	@ 0x40
 80082aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ff52 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80082c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c6:	2111      	movs	r1, #17
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9b5 	bl	8008638 <SDMMC_GetCmdResp1>
 80082ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082d0:	69fb      	ldr	r3, [r7, #28]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b088      	sub	sp, #32
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80082e8:	2312      	movs	r3, #18
 80082ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082ec:	2340      	movs	r3, #64	@ 0x40
 80082ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ff30 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800830a:	2112      	movs	r1, #18
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f993 	bl	8008638 <SDMMC_GetCmdResp1>
 8008312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008314:	69fb      	ldr	r3, [r7, #28]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b088      	sub	sp, #32
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800832c:	2318      	movs	r3, #24
 800832e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008330:	2340      	movs	r3, #64	@ 0x40
 8008332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800833c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800833e:	f107 0308 	add.w	r3, r7, #8
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff0e 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800834a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800834e:	2118      	movs	r1, #24
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f971 	bl	8008638 <SDMMC_GetCmdResp1>
 8008356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008358:	69fb      	ldr	r3, [r7, #28]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b088      	sub	sp, #32
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008370:	2319      	movs	r3, #25
 8008372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008374:	2340      	movs	r3, #64	@ 0x40
 8008376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800837c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008380:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff feec 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800838e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008392:	2119      	movs	r1, #25
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f94f 	bl	8008638 <SDMMC_GetCmdResp1>
 800839a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800839c:	69fb      	ldr	r3, [r7, #28]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80083b4:	230c      	movs	r3, #12
 80083b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083b8:	2340      	movs	r3, #64	@ 0x40
 80083ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083c6:	f107 0308 	add.w	r3, r7, #8
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff feca 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80083d2:	4a05      	ldr	r2, [pc, #20]	@ (80083e8 <SDMMC_CmdStopTransfer+0x40>)
 80083d4:	210c      	movs	r1, #12
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f92e 	bl	8008638 <SDMMC_GetCmdResp1>
 80083dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083de:	69fb      	ldr	r3, [r7, #28]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	05f5e100 	.word	0x05f5e100

080083ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80083fc:	2307      	movs	r3, #7
 80083fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008400:	2340      	movs	r3, #64	@ 0x40
 8008402:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800840c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800840e:	f107 0310 	add.w	r3, r7, #16
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff fea6 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800841a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800841e:	2107      	movs	r1, #7
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f909 	bl	8008638 <SDMMC_GetCmdResp1>
 8008426:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800842a:	4618      	mov	r0, r3
 800842c:	3728      	adds	r7, #40	@ 0x28
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b088      	sub	sp, #32
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800844a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800844e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008450:	f107 0308 	add.w	r3, r7, #8
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff fe85 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fb23 	bl	8008aa8 <SDMMC_GetCmdError>
 8008462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008464:	69fb      	ldr	r3, [r7, #28]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b088      	sub	sp, #32
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008476:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800847a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800847c:	2308      	movs	r3, #8
 800847e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008480:	2340      	movs	r3, #64	@ 0x40
 8008482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800848c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff fe66 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fab6 	bl	8008a0c <SDMMC_GetCmdResp7>
 80084a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084a2:	69fb      	ldr	r3, [r7, #28]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084ba:	2337      	movs	r3, #55	@ 0x37
 80084bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084be:	2340      	movs	r3, #64	@ 0x40
 80084c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084cc:	f107 0308 	add.w	r3, r7, #8
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fe47 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80084d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084dc:	2137      	movs	r1, #55	@ 0x37
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8aa 	bl	8008638 <SDMMC_GetCmdResp1>
 80084e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084e6:	69fb      	ldr	r3, [r7, #28]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3720      	adds	r7, #32
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008506:	2329      	movs	r3, #41	@ 0x29
 8008508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800850a:	2340      	movs	r3, #64	@ 0x40
 800850c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff fe21 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9bd 	bl	80088a4 <SDMMC_GetCmdResp3>
 800852a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800852c:	69fb      	ldr	r3, [r7, #28]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b088      	sub	sp, #32
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008542:	2302      	movs	r3, #2
 8008544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008546:	23c0      	movs	r3, #192	@ 0xc0
 8008548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800854e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008552:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fe03 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f957 	bl	8008814 <SDMMC_GetCmdResp2>
 8008566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008568:	69fb      	ldr	r3, [r7, #28]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b088      	sub	sp, #32
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008580:	2309      	movs	r3, #9
 8008582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008584:	23c0      	movs	r3, #192	@ 0xc0
 8008586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800858c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008590:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff fde4 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f938 	bl	8008814 <SDMMC_GetCmdResp2>
 80085a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a6:	69fb      	ldr	r3, [r7, #28]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80085be:	2303      	movs	r3, #3
 80085c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085c2:	2340      	movs	r3, #64	@ 0x40
 80085c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085d0:	f107 0308 	add.w	r3, r7, #8
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fdc5 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	2103      	movs	r1, #3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f99d 	bl	8008920 <SDMMC_GetCmdResp6>
 80085e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e8:	69fb      	ldr	r3, [r7, #28]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008600:	230d      	movs	r3, #13
 8008602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008604:	2340      	movs	r3, #64	@ 0x40
 8008606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800860c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008610:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008612:	f107 0308 	add.w	r3, r7, #8
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff fda4 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800861e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008622:	210d      	movs	r1, #13
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f807 	bl	8008638 <SDMMC_GetCmdResp1>
 800862a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800862c:	69fb      	ldr	r3, [r7, #28]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	460b      	mov	r3, r1
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008646:	4b70      	ldr	r3, [pc, #448]	@ (8008808 <SDMMC_GetCmdResp1+0x1d0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a70      	ldr	r2, [pc, #448]	@ (800880c <SDMMC_GetCmdResp1+0x1d4>)
 800864c:	fba2 2303 	umull	r2, r3, r2, r3
 8008650:	0a5a      	lsrs	r2, r3, #9
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	fb02 f303 	mul.w	r3, r2, r3
 8008658:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	61fa      	str	r2, [r7, #28]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008664:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008668:	e0c9      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0ef      	beq.n	800865a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1ea      	bne.n	800865a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2204      	movs	r2, #4
 8008694:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008696:	2304      	movs	r3, #4
 8008698:	e0b1      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0a6      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	22c5      	movs	r2, #197	@ 0xc5
 80086b4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fd7f 	bl	80081ba <SDIO_GetCommandResponse>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d001      	beq.n	80086ca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e099      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80086ca:	2100      	movs	r1, #0
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fd81 	bl	80081d4 <SDIO_GetResponse>
 80086d2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008810 <SDMMC_GetCmdResp1+0x1d8>)
 80086d8:	4013      	ands	r3, r2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80086de:	2300      	movs	r3, #0
 80086e0:	e08d      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	da02      	bge.n	80086ee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086ec:	e087      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086f8:	2340      	movs	r3, #64	@ 0x40
 80086fa:	e080      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008706:	2380      	movs	r3, #128	@ 0x80
 8008708:	e079      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008718:	e071      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008728:	e069      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008738:	e061      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008744:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008748:	e059      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008758:	e051      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008768:	e049      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008774:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008778:	e041      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008788:	e039      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008798:	e031      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80087a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80087a8:	e029      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80087b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80087b8:	e021      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80087c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80087c8:	e019      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80087d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80087d8:	e011      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80087e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80087e8:	e009      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80087f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80087f8:	e001      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000000 	.word	0x20000000
 800880c:	10624dd3 	.word	0x10624dd3
 8008810:	fdffe008 	.word	0xfdffe008

08008814 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800881c:	4b1f      	ldr	r3, [pc, #124]	@ (800889c <SDMMC_GetCmdResp2+0x88>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1f      	ldr	r2, [pc, #124]	@ (80088a0 <SDMMC_GetCmdResp2+0x8c>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	0a5b      	lsrs	r3, r3, #9
 8008828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800882c:	fb02 f303 	mul.w	r3, r2, r3
 8008830:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1e5a      	subs	r2, r3, #1
 8008836:	60fa      	str	r2, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800883c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008840:	e026      	b.n	8008890 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008846:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0ef      	beq.n	8008832 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1ea      	bne.n	8008832 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800886e:	2304      	movs	r3, #4
 8008870:	e00e      	b.n	8008890 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008884:	2301      	movs	r3, #1
 8008886:	e003      	b.n	8008890 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	22c5      	movs	r2, #197	@ 0xc5
 800888c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000000 	.word	0x20000000
 80088a0:	10624dd3 	.word	0x10624dd3

080088a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <SDMMC_GetCmdResp3+0x74>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1a      	ldr	r2, [pc, #104]	@ (800891c <SDMMC_GetCmdResp3+0x78>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	0a5b      	lsrs	r3, r3, #9
 80088b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1e5a      	subs	r2, r3, #1
 80088c6:	60fa      	str	r2, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80088d0:	e01b      	b.n	800890a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0ef      	beq.n	80088c2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1ea      	bne.n	80088c2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2204      	movs	r2, #4
 80088fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088fe:	2304      	movs	r3, #4
 8008900:	e003      	b.n	800890a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	22c5      	movs	r2, #197	@ 0xc5
 8008906:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20000000 	.word	0x20000000
 800891c:	10624dd3 	.word	0x10624dd3

08008920 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	460b      	mov	r3, r1
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800892e:	4b35      	ldr	r3, [pc, #212]	@ (8008a04 <SDMMC_GetCmdResp6+0xe4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a35      	ldr	r2, [pc, #212]	@ (8008a08 <SDMMC_GetCmdResp6+0xe8>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	0a5b      	lsrs	r3, r3, #9
 800893a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	1e5a      	subs	r2, r3, #1
 8008948:	61fa      	str	r2, [r7, #28]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800894e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008952:	e052      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008958:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0ef      	beq.n	8008944 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1ea      	bne.n	8008944 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d004      	beq.n	8008984 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2204      	movs	r2, #4
 800897e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008980:	2304      	movs	r3, #4
 8008982:	e03a      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008996:	2301      	movs	r3, #1
 8008998:	e02f      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7ff fc0d 	bl	80081ba <SDIO_GetCommandResponse>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d001      	beq.n	80089ae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e025      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	22c5      	movs	r2, #197	@ 0xc5
 80089b2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7ff fc0c 	bl	80081d4 <SDIO_GetResponse>
 80089bc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d106      	bne.n	80089d6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e011      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089e4:	e009      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089f4:	e001      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80089f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000000 	.word	0x20000000
 8008a08:	10624dd3 	.word	0x10624dd3

08008a0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a14:	4b22      	ldr	r3, [pc, #136]	@ (8008aa0 <SDMMC_GetCmdResp7+0x94>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a22      	ldr	r2, [pc, #136]	@ (8008aa4 <SDMMC_GetCmdResp7+0x98>)
 8008a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1e:	0a5b      	lsrs	r3, r3, #9
 8008a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a24:	fb02 f303 	mul.w	r3, r2, r3
 8008a28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1e5a      	subs	r2, r3, #1
 8008a2e:	60fa      	str	r2, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a38:	e02c      	b.n	8008a94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0ef      	beq.n	8008a2a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1ea      	bne.n	8008a2a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2204      	movs	r2, #4
 8008a64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a66:	2304      	movs	r3, #4
 8008a68:	e014      	b.n	8008a94 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e009      	b.n	8008a94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2240      	movs	r2, #64	@ 0x40
 8008a90:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008a92:	2300      	movs	r3, #0
  
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000000 	.word	0x20000000
 8008aa4:	10624dd3 	.word	0x10624dd3

08008aa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ab0:	4b11      	ldr	r3, [pc, #68]	@ (8008af8 <SDMMC_GetCmdError+0x50>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a11      	ldr	r2, [pc, #68]	@ (8008afc <SDMMC_GetCmdError+0x54>)
 8008ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aba:	0a5b      	lsrs	r3, r3, #9
 8008abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ac0:	fb02 f303 	mul.w	r3, r2, r3
 8008ac4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1e5a      	subs	r2, r3, #1
 8008aca:	60fa      	str	r2, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ad0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ad4:	e009      	b.n	8008aea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0f1      	beq.n	8008ac6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	22c5      	movs	r2, #197	@ 0xc5
 8008ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000000 	.word	0x20000000
 8008afc:	10624dd3 	.word	0x10624dd3

08008b00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b00:	b084      	sub	sp, #16
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b084      	sub	sp, #16
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	f107 001c 	add.w	r0, r7, #28
 8008b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d123      	bne.n	8008b62 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d105      	bne.n	8008b56 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 fadc 	bl	800a114 <USB_CoreReset>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]
 8008b60:	e01b      	b.n	8008b9a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fad0 	bl	800a114 <USB_CoreReset>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b78:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b8c:	e005      	b.n	8008b9a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b92:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b9a:	7fbb      	ldrb	r3, [r7, #30]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10b      	bne.n	8008bb8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f043 0206 	orr.w	r2, r3, #6
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f043 0220 	orr.w	r2, r3, #32
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bc4:	b004      	add	sp, #16
 8008bc6:	4770      	bx	lr

08008bc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008bd6:	79fb      	ldrb	r3, [r7, #7]
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d165      	bne.n	8008ca8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	4a41      	ldr	r2, [pc, #260]	@ (8008ce4 <USB_SetTurnaroundTime+0x11c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d906      	bls.n	8008bf2 <USB_SetTurnaroundTime+0x2a>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4a40      	ldr	r2, [pc, #256]	@ (8008ce8 <USB_SetTurnaroundTime+0x120>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d202      	bcs.n	8008bf2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008bec:	230f      	movs	r3, #15
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	e062      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8008ce8 <USB_SetTurnaroundTime+0x120>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d306      	bcc.n	8008c08 <USB_SetTurnaroundTime+0x40>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8008cec <USB_SetTurnaroundTime+0x124>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d202      	bcs.n	8008c08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c02:	230e      	movs	r3, #14
 8008c04:	617b      	str	r3, [r7, #20]
 8008c06:	e057      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4a38      	ldr	r2, [pc, #224]	@ (8008cec <USB_SetTurnaroundTime+0x124>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d306      	bcc.n	8008c1e <USB_SetTurnaroundTime+0x56>
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4a37      	ldr	r2, [pc, #220]	@ (8008cf0 <USB_SetTurnaroundTime+0x128>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d202      	bcs.n	8008c1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c18:	230d      	movs	r3, #13
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e04c      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	4a33      	ldr	r2, [pc, #204]	@ (8008cf0 <USB_SetTurnaroundTime+0x128>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d306      	bcc.n	8008c34 <USB_SetTurnaroundTime+0x6c>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4a32      	ldr	r2, [pc, #200]	@ (8008cf4 <USB_SetTurnaroundTime+0x12c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d802      	bhi.n	8008c34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c2e:	230c      	movs	r3, #12
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	e041      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	4a2f      	ldr	r2, [pc, #188]	@ (8008cf4 <USB_SetTurnaroundTime+0x12c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d906      	bls.n	8008c4a <USB_SetTurnaroundTime+0x82>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8008cf8 <USB_SetTurnaroundTime+0x130>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d802      	bhi.n	8008c4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c44:	230b      	movs	r3, #11
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	e036      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8008cf8 <USB_SetTurnaroundTime+0x130>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d906      	bls.n	8008c60 <USB_SetTurnaroundTime+0x98>
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4a29      	ldr	r2, [pc, #164]	@ (8008cfc <USB_SetTurnaroundTime+0x134>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d802      	bhi.n	8008c60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c5a:	230a      	movs	r3, #10
 8008c5c:	617b      	str	r3, [r7, #20]
 8008c5e:	e02b      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4a26      	ldr	r2, [pc, #152]	@ (8008cfc <USB_SetTurnaroundTime+0x134>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d906      	bls.n	8008c76 <USB_SetTurnaroundTime+0xae>
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4a25      	ldr	r2, [pc, #148]	@ (8008d00 <USB_SetTurnaroundTime+0x138>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d202      	bcs.n	8008c76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c70:	2309      	movs	r3, #9
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	e020      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4a21      	ldr	r2, [pc, #132]	@ (8008d00 <USB_SetTurnaroundTime+0x138>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d306      	bcc.n	8008c8c <USB_SetTurnaroundTime+0xc4>
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	4a20      	ldr	r2, [pc, #128]	@ (8008d04 <USB_SetTurnaroundTime+0x13c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d802      	bhi.n	8008c8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c86:	2308      	movs	r3, #8
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e015      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8008d04 <USB_SetTurnaroundTime+0x13c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d906      	bls.n	8008ca2 <USB_SetTurnaroundTime+0xda>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4a1c      	ldr	r2, [pc, #112]	@ (8008d08 <USB_SetTurnaroundTime+0x140>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d202      	bcs.n	8008ca2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c9c:	2307      	movs	r3, #7
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e00a      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008ca2:	2306      	movs	r3, #6
 8008ca4:	617b      	str	r3, [r7, #20]
 8008ca6:	e007      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d102      	bne.n	8008cb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008cae:	2309      	movs	r3, #9
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	e001      	b.n	8008cb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008cb4:	2309      	movs	r3, #9
 8008cb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68da      	ldr	r2, [r3, #12]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	029b      	lsls	r3, r3, #10
 8008ccc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	00d8acbf 	.word	0x00d8acbf
 8008ce8:	00e4e1c0 	.word	0x00e4e1c0
 8008cec:	00f42400 	.word	0x00f42400
 8008cf0:	01067380 	.word	0x01067380
 8008cf4:	011a499f 	.word	0x011a499f
 8008cf8:	01312cff 	.word	0x01312cff
 8008cfc:	014ca43f 	.word	0x014ca43f
 8008d00:	016e3600 	.word	0x016e3600
 8008d04:	01a6ab1f 	.word	0x01a6ab1f
 8008d08:	01e84800 	.word	0x01e84800

08008d0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f043 0201 	orr.w	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f023 0201 	bic.w	r2, r3, #1
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d115      	bne.n	8008d9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d7e:	200a      	movs	r0, #10
 8008d80:	f7f9 f9d8 	bl	8002134 <HAL_Delay>
      ms += 10U;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	330a      	adds	r3, #10
 8008d88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 f933 	bl	8009ff6 <USB_GetMode>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d01e      	beq.n	8008dd4 <USB_SetCurrentMode+0x84>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d9a:	d9f0      	bls.n	8008d7e <USB_SetCurrentMode+0x2e>
 8008d9c:	e01a      	b.n	8008dd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d115      	bne.n	8008dd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008db0:	200a      	movs	r0, #10
 8008db2:	f7f9 f9bf 	bl	8002134 <HAL_Delay>
      ms += 10U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	330a      	adds	r3, #10
 8008dba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 f91a 	bl	8009ff6 <USB_GetMode>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <USB_SetCurrentMode+0x84>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2bc7      	cmp	r3, #199	@ 0xc7
 8008dcc:	d9f0      	bls.n	8008db0 <USB_SetCurrentMode+0x60>
 8008dce:	e001      	b.n	8008dd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e005      	b.n	8008de0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2bc8      	cmp	r3, #200	@ 0xc8
 8008dd8:	d101      	bne.n	8008dde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de8:	b084      	sub	sp, #16
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e02:	2300      	movs	r3, #0
 8008e04:	613b      	str	r3, [r7, #16]
 8008e06:	e009      	b.n	8008e1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3340      	adds	r3, #64	@ 0x40
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	2200      	movs	r2, #0
 8008e14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	613b      	str	r3, [r7, #16]
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	2b0e      	cmp	r3, #14
 8008e20:	d9f2      	bls.n	8008e08 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d11c      	bne.n	8008e64 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e38:	f043 0302 	orr.w	r3, r3, #2
 8008e3c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e42:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	e005      	b.n	8008e70 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e68:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e76:	461a      	mov	r2, r3
 8008e78:	2300      	movs	r3, #0
 8008e7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10d      	bne.n	8008ea0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f968 	bl	8009164 <USB_SetDevSpeed>
 8008e94:	e008      	b.n	8008ea8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e96:	2101      	movs	r1, #1
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f963 	bl	8009164 <USB_SetDevSpeed>
 8008e9e:	e003      	b.n	8008ea8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ea0:	2103      	movs	r1, #3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f95e 	bl	8009164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ea8:	2110      	movs	r1, #16
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f8fa 	bl	80090a4 <USB_FlushTxFifo>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f924 	bl	8009108 <USB_FlushRxFifo>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008edc:	461a      	mov	r2, r3
 8008ede:	2300      	movs	r3, #0
 8008ee0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee8:	461a      	mov	r2, r3
 8008eea:	2300      	movs	r3, #0
 8008eec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e043      	b.n	8008f7c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f0a:	d118      	bne.n	8008f3e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1e:	461a      	mov	r2, r3
 8008f20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	e013      	b.n	8008f50 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f34:	461a      	mov	r2, r3
 8008f36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e008      	b.n	8008f50 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f80:	461a      	mov	r2, r3
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d3b5      	bcc.n	8008ef4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	e043      	b.n	8009016 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fa4:	d118      	bne.n	8008fd8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	e013      	b.n	8008fea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e008      	b.n	8008fea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009008:	461a      	mov	r2, r3
 800900a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800900e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3301      	adds	r3, #1
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800901a:	461a      	mov	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	4293      	cmp	r3, r2
 8009020:	d3b5      	bcc.n	8008f8e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009034:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009042:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009044:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009048:	2b00      	cmp	r3, #0
 800904a:	d105      	bne.n	8009058 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	f043 0210 	orr.w	r2, r3, #16
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	699a      	ldr	r2, [r3, #24]
 800905c:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <USB_DevInit+0x2b8>)
 800905e:	4313      	orrs	r3, r2
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009064:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009068:	2b00      	cmp	r3, #0
 800906a:	d005      	beq.n	8009078 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	f043 0208 	orr.w	r2, r3, #8
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009078:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800907c:	2b01      	cmp	r3, #1
 800907e:	d107      	bne.n	8009090 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009088:	f043 0304 	orr.w	r3, r3, #4
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800909c:	b004      	add	sp, #16
 800909e:	4770      	bx	lr
 80090a0:	803c3800 	.word	0x803c3800

080090a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3301      	adds	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090be:	d901      	bls.n	80090c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e01b      	b.n	80090fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	daf2      	bge.n	80090b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	019b      	lsls	r3, r3, #6
 80090d4:	f043 0220 	orr.w	r2, r3, #32
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090e8:	d901      	bls.n	80090ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e006      	b.n	80090fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d0f0      	beq.n	80090dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009120:	d901      	bls.n	8009126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e018      	b.n	8009158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	daf2      	bge.n	8009114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2210      	movs	r2, #16
 8009136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009144:	d901      	bls.n	800914a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e006      	b.n	8009158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f003 0310 	and.w	r3, r3, #16
 8009152:	2b10      	cmp	r3, #16
 8009154:	d0f0      	beq.n	8009138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	78fb      	ldrb	r3, [r7, #3]
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009184:	4313      	orrs	r3, r2
 8009186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009196:	b480      	push	{r7}
 8009198:	b087      	sub	sp, #28
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0306 	and.w	r3, r3, #6
 80091ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]
 80091ba:	e00a      	b.n	80091d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d002      	beq.n	80091c8 <USB_GetDevSpeed+0x32>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b06      	cmp	r3, #6
 80091c6:	d102      	bne.n	80091ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80091c8:	2302      	movs	r3, #2
 80091ca:	75fb      	strb	r3, [r7, #23]
 80091cc:	e001      	b.n	80091d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80091ce:	230f      	movs	r3, #15
 80091d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	371c      	adds	r7, #28
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d13a      	bne.n	8009272 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	f003 030f 	and.w	r3, r3, #15
 800920c:	2101      	movs	r1, #1
 800920e:	fa01 f303 	lsl.w	r3, r1, r3
 8009212:	b29b      	uxth	r3, r3
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800921a:	4313      	orrs	r3, r2
 800921c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d155      	bne.n	80092e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	791b      	ldrb	r3, [r3, #4]
 800924e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	059b      	lsls	r3, r3, #22
 8009256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009258:	4313      	orrs	r3, r2
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	440a      	add	r2, r1
 8009262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800926a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	e036      	b.n	80092e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009278:	69da      	ldr	r2, [r3, #28]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	2101      	movs	r1, #1
 8009284:	fa01 f303 	lsl.w	r3, r1, r3
 8009288:	041b      	lsls	r3, r3, #16
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009290:	4313      	orrs	r3, r2
 8009292:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d11a      	bne.n	80092e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	791b      	ldrb	r3, [r3, #4]
 80092c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092c6:	430b      	orrs	r3, r1
 80092c8:	4313      	orrs	r3, r2
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	0151      	lsls	r1, r2, #5
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	440a      	add	r2, r1
 80092d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
	...

080092f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d161      	bne.n	80093d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800931e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009322:	d11f      	bne.n	8009364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800933e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800935e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	f003 030f 	and.w	r3, r3, #15
 8009374:	2101      	movs	r1, #1
 8009376:	fa01 f303 	lsl.w	r3, r1, r3
 800937a:	b29b      	uxth	r3, r3
 800937c:	43db      	mvns	r3, r3
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009384:	4013      	ands	r3, r2
 8009386:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800938e:	69da      	ldr	r2, [r3, #28]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	2101      	movs	r1, #1
 800939a:	fa01 f303 	lsl.w	r3, r1, r3
 800939e:	b29b      	uxth	r3, r3
 80093a0:	43db      	mvns	r3, r3
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093a8:	4013      	ands	r3, r2
 80093aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	0159      	lsls	r1, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093c6:	4619      	mov	r1, r3
 80093c8:	4b35      	ldr	r3, [pc, #212]	@ (80094a0 <USB_DeactivateEndpoint+0x1b0>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	600b      	str	r3, [r1, #0]
 80093ce:	e060      	b.n	8009492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093e6:	d11f      	bne.n	8009428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	440a      	add	r2, r1
 800941e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009422:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800942e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	2101      	movs	r1, #1
 800943a:	fa01 f303 	lsl.w	r3, r1, r3
 800943e:	041b      	lsls	r3, r3, #16
 8009440:	43db      	mvns	r3, r3
 8009442:	68f9      	ldr	r1, [r7, #12]
 8009444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009448:	4013      	ands	r3, r2
 800944a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009452:	69da      	ldr	r2, [r3, #28]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 030f 	and.w	r3, r3, #15
 800945c:	2101      	movs	r1, #1
 800945e:	fa01 f303 	lsl.w	r3, r1, r3
 8009462:	041b      	lsls	r3, r3, #16
 8009464:	43db      	mvns	r3, r3
 8009466:	68f9      	ldr	r1, [r7, #12]
 8009468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800946c:	4013      	ands	r3, r2
 800946e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	0159      	lsls	r1, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	440b      	add	r3, r1
 8009486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948a:	4619      	mov	r1, r3
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <USB_DeactivateEndpoint+0x1b4>)
 800948e:	4013      	ands	r3, r2
 8009490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	ec337800 	.word	0xec337800
 80094a4:	eff37800 	.word	0xeff37800

080094a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	@ 0x28
 80094ac:	af02      	add	r7, sp, #8
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	f040 817a 	bne.w	80097be <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d132      	bne.n	8009538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80094f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80094f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	015a      	lsls	r2, r3, #5
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	4413      	add	r3, r2
 80094fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	69ba      	ldr	r2, [r7, #24]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	69fa      	ldr	r2, [r7, #28]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009510:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	015a      	lsls	r2, r3, #5
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	4413      	add	r3, r2
 800951e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	0151      	lsls	r1, r2, #5
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	440a      	add	r2, r1
 800952c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009530:	0cdb      	lsrs	r3, r3, #19
 8009532:	04db      	lsls	r3, r3, #19
 8009534:	6113      	str	r3, [r2, #16]
 8009536:	e092      	b.n	800965e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	0151      	lsls	r1, r2, #5
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	440a      	add	r2, r1
 800954e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009552:	0cdb      	lsrs	r3, r3, #19
 8009554:	04db      	lsls	r3, r3, #19
 8009556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	0151      	lsls	r1, r2, #5
 800956a:	69fa      	ldr	r2, [r7, #28]
 800956c:	440a      	add	r2, r1
 800956e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009572:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009576:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800957a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d11a      	bne.n	80095b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691a      	ldr	r2, [r3, #16]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	429a      	cmp	r2, r3
 800958c:	d903      	bls.n	8009596 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	4413      	add	r3, r2
 800959e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	0151      	lsls	r1, r2, #5
 80095a8:	69fa      	ldr	r2, [r7, #28]
 80095aa:	440a      	add	r2, r1
 80095ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80095b4:	6113      	str	r3, [r2, #16]
 80095b6:	e01b      	b.n	80095f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6919      	ldr	r1, [r3, #16]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	440b      	add	r3, r1
 80095d0:	1e59      	subs	r1, r3, #1
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80095da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80095dc:	4ba2      	ldr	r3, [pc, #648]	@ (8009868 <USB_EPStartXfer+0x3c0>)
 80095de:	400b      	ands	r3, r1
 80095e0:	69b9      	ldr	r1, [r7, #24]
 80095e2:	0148      	lsls	r0, r1, #5
 80095e4:	69f9      	ldr	r1, [r7, #28]
 80095e6:	4401      	add	r1, r0
 80095e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80095ec:	4313      	orrs	r3, r2
 80095ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095fc:	691a      	ldr	r2, [r3, #16]
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009606:	69b9      	ldr	r1, [r7, #24]
 8009608:	0148      	lsls	r0, r1, #5
 800960a:	69f9      	ldr	r1, [r7, #28]
 800960c:	4401      	add	r1, r0
 800960e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009612:	4313      	orrs	r3, r2
 8009614:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	2b01      	cmp	r3, #1
 800961c:	d11f      	bne.n	800965e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	69ba      	ldr	r2, [r7, #24]
 800962e:	0151      	lsls	r1, r2, #5
 8009630:	69fa      	ldr	r2, [r7, #28]
 8009632:	440a      	add	r2, r1
 8009634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009638:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800963c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	0151      	lsls	r1, r2, #5
 8009650:	69fa      	ldr	r2, [r7, #28]
 8009652:	440a      	add	r2, r1
 8009654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009658:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800965c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800965e:	79fb      	ldrb	r3, [r7, #7]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d14b      	bne.n	80096fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d009      	beq.n	8009680 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009678:	461a      	mov	r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	791b      	ldrb	r3, [r3, #4]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d128      	bne.n	80096da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009694:	2b00      	cmp	r3, #0
 8009696:	d110      	bne.n	80096ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	0151      	lsls	r1, r2, #5
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	440a      	add	r2, r1
 80096ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	e00f      	b.n	80096da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	0151      	lsls	r1, r2, #5
 80096cc:	69fa      	ldr	r2, [r7, #28]
 80096ce:	440a      	add	r2, r1
 80096d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	69ba      	ldr	r2, [r7, #24]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e165      	b.n	80099c8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	440a      	add	r2, r1
 8009712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009716:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800971a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	791b      	ldrb	r3, [r3, #4]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d015      	beq.n	8009750 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 814d 	beq.w	80099c8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 030f 	and.w	r3, r3, #15
 800973e:	2101      	movs	r1, #1
 8009740:	fa01 f303 	lsl.w	r3, r1, r3
 8009744:	69f9      	ldr	r1, [r7, #28]
 8009746:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800974a:	4313      	orrs	r3, r2
 800974c:	634b      	str	r3, [r1, #52]	@ 0x34
 800974e:	e13b      	b.n	80099c8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800975c:	2b00      	cmp	r3, #0
 800975e:	d110      	bne.n	8009782 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	0151      	lsls	r1, r2, #5
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	440a      	add	r2, r1
 8009776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800977a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e00f      	b.n	80097a2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	0151      	lsls	r1, r2, #5
 8009794:	69fa      	ldr	r2, [r7, #28]
 8009796:	440a      	add	r2, r1
 8009798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800979c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	68d9      	ldr	r1, [r3, #12]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	b298      	uxth	r0, r3
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	4603      	mov	r3, r0
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f9b8 	bl	8009b2c <USB_WritePacket>
 80097bc:	e104      	b.n	80099c8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	69ba      	ldr	r2, [r7, #24]
 80097ce:	0151      	lsls	r1, r2, #5
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	440a      	add	r2, r1
 80097d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097d8:	0cdb      	lsrs	r3, r3, #19
 80097da:	04db      	lsls	r3, r3, #19
 80097dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	0151      	lsls	r1, r2, #5
 80097f0:	69fa      	ldr	r2, [r7, #28]
 80097f2:	440a      	add	r2, r1
 80097f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097f8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097fc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009800:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d131      	bne.n	800986c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009836:	69b9      	ldr	r1, [r7, #24]
 8009838:	0148      	lsls	r0, r1, #5
 800983a:	69f9      	ldr	r1, [r7, #28]
 800983c:	4401      	add	r1, r0
 800983e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009842:	4313      	orrs	r3, r2
 8009844:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	0151      	lsls	r1, r2, #5
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	440a      	add	r2, r1
 800985c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009864:	6113      	str	r3, [r2, #16]
 8009866:	e061      	b.n	800992c <USB_EPStartXfer+0x484>
 8009868:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d123      	bne.n	80098bc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009880:	691a      	ldr	r2, [r3, #16]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800988a:	69b9      	ldr	r1, [r7, #24]
 800988c:	0148      	lsls	r0, r1, #5
 800988e:	69f9      	ldr	r1, [r7, #28]
 8009890:	4401      	add	r1, r0
 8009892:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009896:	4313      	orrs	r3, r2
 8009898:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	0151      	lsls	r1, r2, #5
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	440a      	add	r2, r1
 80098b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098b8:	6113      	str	r3, [r2, #16]
 80098ba:	e037      	b.n	800992c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	4413      	add	r3, r2
 80098c6:	1e5a      	subs	r2, r3, #1
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	8afa      	ldrh	r2, [r7, #22]
 80098d8:	fb03 f202 	mul.w	r2, r3, r2
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ec:	691a      	ldr	r2, [r3, #16]
 80098ee:	8afb      	ldrh	r3, [r7, #22]
 80098f0:	04d9      	lsls	r1, r3, #19
 80098f2:	4b38      	ldr	r3, [pc, #224]	@ (80099d4 <USB_EPStartXfer+0x52c>)
 80098f4:	400b      	ands	r3, r1
 80098f6:	69b9      	ldr	r1, [r7, #24]
 80098f8:	0148      	lsls	r0, r1, #5
 80098fa:	69f9      	ldr	r1, [r7, #28]
 80098fc:	4401      	add	r1, r0
 80098fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009902:	4313      	orrs	r3, r2
 8009904:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009912:	691a      	ldr	r2, [r3, #16]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800991c:	69b9      	ldr	r1, [r7, #24]
 800991e:	0148      	lsls	r0, r1, #5
 8009920:	69f9      	ldr	r1, [r7, #28]
 8009922:	4401      	add	r1, r0
 8009924:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009928:	4313      	orrs	r3, r2
 800992a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d10d      	bne.n	800994e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	68d9      	ldr	r1, [r3, #12]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994a:	460a      	mov	r2, r1
 800994c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	791b      	ldrb	r3, [r3, #4]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d128      	bne.n	80099a8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009962:	2b00      	cmp	r3, #0
 8009964:	d110      	bne.n	8009988 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	0151      	lsls	r1, r2, #5
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	440a      	add	r2, r1
 800997c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	e00f      	b.n	80099a8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	0151      	lsls	r1, r2, #5
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	440a      	add	r2, r1
 800999e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	015a      	lsls	r2, r3, #5
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	4413      	add	r3, r2
 80099b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	0151      	lsls	r1, r2, #5
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	440a      	add	r2, r1
 80099be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80099c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	1ff80000 	.word	0x1ff80000

080099d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d14a      	bne.n	8009a8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a0e:	f040 8086 	bne.w	8009b1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	0151      	lsls	r1, r2, #5
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	440a      	add	r2, r1
 8009a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009a34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	015a      	lsls	r2, r3, #5
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	4413      	add	r3, r2
 8009a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	7812      	ldrb	r2, [r2, #0]
 8009a4a:	0151      	lsls	r1, r2, #5
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	440a      	add	r2, r1
 8009a50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d902      	bls.n	8009a70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a6e:	e056      	b.n	8009b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a88:	d0e7      	beq.n	8009a5a <USB_EPStopXfer+0x82>
 8009a8a:	e048      	b.n	8009b1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aa4:	d13b      	bne.n	8009b1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	7812      	ldrb	r2, [r2, #0]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ac4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ac8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	7812      	ldrb	r2, [r2, #0]
 8009ade:	0151      	lsls	r1, r2, #5
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	440a      	add	r2, r1
 8009ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009aec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3301      	adds	r3, #1
 8009af2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d902      	bls.n	8009b04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	75fb      	strb	r3, [r7, #23]
          break;
 8009b02:	e00c      	b.n	8009b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b1c:	d0e7      	beq.n	8009aee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b089      	sub	sp, #36	@ 0x24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4611      	mov	r1, r2
 8009b38:	461a      	mov	r2, r3
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	71fb      	strb	r3, [r7, #7]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d123      	bne.n	8009b9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b52:	88bb      	ldrh	r3, [r7, #4]
 8009b54:	3303      	adds	r3, #3
 8009b56:	089b      	lsrs	r3, r3, #2
 8009b58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61bb      	str	r3, [r7, #24]
 8009b5e:	e018      	b.n	8009b92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	031a      	lsls	r2, r3, #12
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	3301      	adds	r3, #1
 8009b78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	3301      	adds	r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d3e2      	bcc.n	8009b60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3724      	adds	r7, #36	@ 0x24
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b08b      	sub	sp, #44	@ 0x2c
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	089b      	lsrs	r3, r3, #2
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009bce:	2300      	movs	r3, #0
 8009bd0:	623b      	str	r3, [r7, #32]
 8009bd2:	e014      	b.n	8009bfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be2:	3301      	adds	r3, #1
 8009be4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	3301      	adds	r3, #1
 8009bea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bee:	3301      	adds	r3, #1
 8009bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	623b      	str	r3, [r7, #32]
 8009bfe:	6a3a      	ldr	r2, [r7, #32]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d3e6      	bcc.n	8009bd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c06:	8bfb      	ldrh	r3, [r7, #30]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d01e      	beq.n	8009c4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c16:	461a      	mov	r2, r3
 8009c18:	f107 0310 	add.w	r3, r7, #16
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	701a      	strb	r2, [r3, #0]
      i++;
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	3301      	adds	r3, #1
 8009c36:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009c3e:	8bfb      	ldrh	r3, [r7, #30]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c44:	8bfb      	ldrh	r3, [r7, #30]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1ea      	bne.n	8009c20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	372c      	adds	r7, #44	@ 0x2c
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d12c      	bne.n	8009cce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	db12      	blt.n	8009cac <USB_EPSetStall+0x54>
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00f      	beq.n	8009cac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ca6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009caa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	e02b      	b.n	8009d26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	db12      	blt.n	8009d06 <USB_EPSetStall+0xae>
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00f      	beq.n	8009d06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	0151      	lsls	r1, r2, #5
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	440a      	add	r2, r1
 8009cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009d04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	015a      	lsls	r2, r3, #5
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	0151      	lsls	r1, r2, #5
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	440a      	add	r2, r1
 8009d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d128      	bne.n	8009da2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	0151      	lsls	r1, r2, #5
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	440a      	add	r2, r1
 8009d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009d6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	791b      	ldrb	r3, [r3, #4]
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d003      	beq.n	8009d80 <USB_EPClearStall+0x4c>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	791b      	ldrb	r3, [r3, #4]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d138      	bne.n	8009df2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	e027      	b.n	8009df2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	015a      	lsls	r2, r3, #5
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	4413      	add	r3, r2
 8009daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	0151      	lsls	r1, r2, #5
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	440a      	add	r2, r1
 8009db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dbc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009dc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	791b      	ldrb	r3, [r3, #4]
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d003      	beq.n	8009dd2 <USB_EPClearStall+0x9e>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	791b      	ldrb	r3, [r3, #4]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d10f      	bne.n	8009df2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009df0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009e22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	78fb      	ldrb	r3, [r7, #3]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009e34:	68f9      	ldr	r1, [r7, #12]
 8009e36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e66:	f023 0303 	bic.w	r3, r3, #3
 8009e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e7a:	f023 0302 	bic.w	r3, r3, #2
 8009e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ea8:	f023 0303 	bic.w	r3, r3, #3
 8009eac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ebc:	f043 0302 	orr.w	r3, r3, #2
 8009ec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	4013      	ands	r3, r2
 8009f18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	0c1b      	lsrs	r3, r3, #16
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	b29b      	uxth	r3, r3
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	460b      	mov	r3, r1
 8009f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b087      	sub	sp, #28
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	f003 030f 	and.w	r3, r3, #15
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fca:	01db      	lsls	r3, r3, #7
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	371c      	adds	r7, #28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	f003 0301 	and.w	r3, r3, #1
}
 800a006:	4618      	mov	r0, r3
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a012:	b480      	push	{r7}
 800a014:	b085      	sub	sp, #20
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a02c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a030:	f023 0307 	bic.w	r3, r3, #7
 800a034:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a048:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	460b      	mov	r3, r1
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	333c      	adds	r3, #60	@ 0x3c
 800a06e:	3304      	adds	r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	4a26      	ldr	r2, [pc, #152]	@ (800a110 <USB_EP0_OutStart+0xb8>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d90a      	bls.n	800a092 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a08c:	d101      	bne.n	800a092 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	e037      	b.n	800a102 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a098:	461a      	mov	r2, r3
 800a09a:	2300      	movs	r3, #0
 800a09c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0c0:	f043 0318 	orr.w	r3, r3, #24
 800a0c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a0d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a0da:	7afb      	ldrb	r3, [r7, #11]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d10f      	bne.n	800a100 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a0fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	4f54300a 	.word	0x4f54300a

0800a114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	3301      	adds	r3, #1
 800a124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a12c:	d901      	bls.n	800a132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e01b      	b.n	800a16a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	daf2      	bge.n	800a120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	f043 0201 	orr.w	r2, r3, #1
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	3301      	adds	r3, #1
 800a14e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a156:	d901      	bls.n	800a15c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e006      	b.n	800a16a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f003 0301 	and.w	r3, r3, #1
 800a164:	2b01      	cmp	r3, #1
 800a166:	d0f0      	beq.n	800a14a <USB_CoreReset+0x36>

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3714      	adds	r7, #20
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
	...

0800a178 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a17c:	4904      	ldr	r1, [pc, #16]	@ (800a190 <MX_FATFS_Init+0x18>)
 800a17e:	4805      	ldr	r0, [pc, #20]	@ (800a194 <MX_FATFS_Init+0x1c>)
 800a180:	f002 fa82 	bl	800c688 <FATFS_LinkDriver>
 800a184:	4603      	mov	r3, r0
 800a186:	461a      	mov	r2, r3
 800a188:	4b03      	ldr	r3, [pc, #12]	@ (800a198 <MX_FATFS_Init+0x20>)
 800a18a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a18c:	bf00      	nop
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000548 	.word	0x20000548
 800a194:	0800dbdc 	.word	0x0800dbdc
 800a198:	20000544 	.word	0x20000544

0800a19c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a1a6:	f000 f888 	bl	800a2ba <BSP_SD_IsDetected>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d001      	beq.n	800a1b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e005      	b.n	800a1c0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a1b4:	4804      	ldr	r0, [pc, #16]	@ (800a1c8 <BSP_SD_Init+0x2c>)
 800a1b6:	f7fc fb09 	bl	80067cc <HAL_SD_Init>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a1be:	79fb      	ldrb	r3, [r7, #7]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000310 	.word	0x20000310

0800a1cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	68f9      	ldr	r1, [r7, #12]
 800a1e2:	4806      	ldr	r0, [pc, #24]	@ (800a1fc <BSP_SD_ReadBlocks_DMA+0x30>)
 800a1e4:	f7fc fba2 	bl	800692c <HAL_SD_ReadBlocks_DMA>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000310 	.word	0x20000310

0800a200 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68ba      	ldr	r2, [r7, #8]
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	4806      	ldr	r0, [pc, #24]	@ (800a230 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a218:	f7fc fc68 	bl	8006aec <HAL_SD_WriteBlocks_DMA>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a226:	7dfb      	ldrb	r3, [r7, #23]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3718      	adds	r7, #24
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20000310 	.word	0x20000310

0800a234 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a238:	4805      	ldr	r0, [pc, #20]	@ (800a250 <BSP_SD_GetCardState+0x1c>)
 800a23a:	f7fd f889 	bl	8007350 <HAL_SD_GetCardState>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b04      	cmp	r3, #4
 800a242:	bf14      	ite	ne
 800a244:	2301      	movne	r3, #1
 800a246:	2300      	moveq	r3, #0
 800a248:	b2db      	uxtb	r3, r3
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000310 	.word	0x20000310

0800a254 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	4803      	ldr	r0, [pc, #12]	@ (800a26c <BSP_SD_GetCardInfo+0x18>)
 800a260:	f7fd f84a 	bl	80072f8 <HAL_SD_GetCardInfo>
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20000310 	.word	0x20000310

0800a270 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a278:	f000 f818 	bl	800a2ac <BSP_SD_AbortCallback>
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a28c:	f000 f9a8 	bl	800a5e0 <BSP_SD_WriteCpltCallback>
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a2a0:	f000 f9aa 	bl	800a5f8 <BSP_SD_ReadCpltCallback>
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0

}
 800a2b0:	bf00      	nop
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b082      	sub	sp, #8
 800a2be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a2c4:	f000 f80c 	bl	800a2e0 <BSP_PlatformIsDetected>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	b2db      	uxtb	r3, r3
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
	...

0800a2e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a2ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a2ee:	4806      	ldr	r0, [pc, #24]	@ (800a308 <BSP_PlatformIsDetected+0x28>)
 800a2f0:	f7f8 fe6e 	bl	8002fd0 <HAL_GPIO_ReadPin>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a2fe:	79fb      	ldrb	r3, [r7, #7]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	40020800 	.word	0x40020800

0800a30c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a314:	f7f7 ff02 	bl	800211c <HAL_GetTick>
 800a318:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a31a:	e006      	b.n	800a32a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a31c:	f7ff ff8a 	bl	800a234 <BSP_SD_GetCardState>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a326:	2300      	movs	r3, #0
 800a328:	e009      	b.n	800a33e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a32a:	f7f7 fef7 	bl	800211c <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	429a      	cmp	r2, r3
 800a338:	d8f0      	bhi.n	800a31c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a33a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a352:	4b0b      	ldr	r3, [pc, #44]	@ (800a380 <SD_CheckStatus+0x38>)
 800a354:	2201      	movs	r2, #1
 800a356:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a358:	f7ff ff6c 	bl	800a234 <BSP_SD_GetCardState>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d107      	bne.n	800a372 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a362:	4b07      	ldr	r3, [pc, #28]	@ (800a380 <SD_CheckStatus+0x38>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f023 0301 	bic.w	r3, r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	4b04      	ldr	r3, [pc, #16]	@ (800a380 <SD_CheckStatus+0x38>)
 800a370:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a372:	4b03      	ldr	r3, [pc, #12]	@ (800a380 <SD_CheckStatus+0x38>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b2db      	uxtb	r3, r3
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20000009 	.word	0x20000009

0800a384 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a38e:	f7ff ff05 	bl	800a19c <BSP_SD_Init>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d107      	bne.n	800a3a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff ffd4 	bl	800a348 <SD_CheckStatus>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <SD_initialize+0x34>)
 800a3a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a3a8:	4b03      	ldr	r3, [pc, #12]	@ (800a3b8 <SD_initialize+0x34>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	b2db      	uxtb	r3, r3
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20000009 	.word	0x20000009

0800a3bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff ffbd 	bl	800a348 <SD_CheckStatus>
 800a3ce:	4603      	mov	r3, r0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a3ec:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a3f0:	f7ff ff8c 	bl	800a30c <SD_CheckStatusWithTimeout>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	da01      	bge.n	800a3fe <SD_read+0x26>
  {
    return res;
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
 800a3fc:	e03b      	b.n	800a476 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	68b8      	ldr	r0, [r7, #8]
 800a404:	f7ff fee2 	bl	800a1cc <BSP_SD_ReadBlocks_DMA>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d132      	bne.n	800a474 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a40e:	4b1c      	ldr	r3, [pc, #112]	@ (800a480 <SD_read+0xa8>)
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a414:	f7f7 fe82 	bl	800211c <HAL_GetTick>
 800a418:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a41a:	bf00      	nop
 800a41c:	4b18      	ldr	r3, [pc, #96]	@ (800a480 <SD_read+0xa8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d108      	bne.n	800a436 <SD_read+0x5e>
 800a424:	f7f7 fe7a 	bl	800211c <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a432:	4293      	cmp	r3, r2
 800a434:	d9f2      	bls.n	800a41c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a436:	4b12      	ldr	r3, [pc, #72]	@ (800a480 <SD_read+0xa8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	75fb      	strb	r3, [r7, #23]
 800a442:	e017      	b.n	800a474 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a444:	4b0e      	ldr	r3, [pc, #56]	@ (800a480 <SD_read+0xa8>)
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a44a:	f7f7 fe67 	bl	800211c <HAL_GetTick>
 800a44e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a450:	e007      	b.n	800a462 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a452:	f7ff feef 	bl	800a234 <BSP_SD_GetCardState>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d102      	bne.n	800a462 <SD_read+0x8a>
          {
            res = RES_OK;
 800a45c:	2300      	movs	r3, #0
 800a45e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a460:	e008      	b.n	800a474 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a462:	f7f7 fe5b 	bl	800211c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a470:	4293      	cmp	r3, r2
 800a472:	d9ee      	bls.n	800a452 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	20000550 	.word	0x20000550

0800a484 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	603b      	str	r3, [r7, #0]
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a498:	4b24      	ldr	r3, [pc, #144]	@ (800a52c <SD_write+0xa8>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a49e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a4a2:	f7ff ff33 	bl	800a30c <SD_CheckStatusWithTimeout>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da01      	bge.n	800a4b0 <SD_write+0x2c>
  {
    return res;
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	e038      	b.n	800a522 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	6879      	ldr	r1, [r7, #4]
 800a4b4:	68b8      	ldr	r0, [r7, #8]
 800a4b6:	f7ff fea3 	bl	800a200 <BSP_SD_WriteBlocks_DMA>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d12f      	bne.n	800a520 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a4c0:	f7f7 fe2c 	bl	800211c <HAL_GetTick>
 800a4c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a4c6:	bf00      	nop
 800a4c8:	4b18      	ldr	r3, [pc, #96]	@ (800a52c <SD_write+0xa8>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d108      	bne.n	800a4e2 <SD_write+0x5e>
 800a4d0:	f7f7 fe24 	bl	800211c <HAL_GetTick>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d9f2      	bls.n	800a4c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a4e2:	4b12      	ldr	r3, [pc, #72]	@ (800a52c <SD_write+0xa8>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d102      	bne.n	800a4f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	75fb      	strb	r3, [r7, #23]
 800a4ee:	e017      	b.n	800a520 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a4f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a52c <SD_write+0xa8>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a4f6:	f7f7 fe11 	bl	800211c <HAL_GetTick>
 800a4fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a4fc:	e007      	b.n	800a50e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a4fe:	f7ff fe99 	bl	800a234 <BSP_SD_GetCardState>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d102      	bne.n	800a50e <SD_write+0x8a>
          {
            res = RES_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	75fb      	strb	r3, [r7, #23]
            break;
 800a50c:	e008      	b.n	800a520 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a50e:	f7f7 fe05 	bl	800211c <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d9ee      	bls.n	800a4fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a520:	7dfb      	ldrb	r3, [r7, #23]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	2000054c 	.word	0x2000054c

0800a530 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08c      	sub	sp, #48	@ 0x30
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	603a      	str	r2, [r7, #0]
 800a53a:	71fb      	strb	r3, [r7, #7]
 800a53c:	460b      	mov	r3, r1
 800a53e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a546:	4b25      	ldr	r3, [pc, #148]	@ (800a5dc <SD_ioctl+0xac>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <SD_ioctl+0x28>
 800a554:	2303      	movs	r3, #3
 800a556:	e03c      	b.n	800a5d2 <SD_ioctl+0xa2>

  switch (cmd)
 800a558:	79bb      	ldrb	r3, [r7, #6]
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d834      	bhi.n	800a5c8 <SD_ioctl+0x98>
 800a55e:	a201      	add	r2, pc, #4	@ (adr r2, 800a564 <SD_ioctl+0x34>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a575 	.word	0x0800a575
 800a568:	0800a57d 	.word	0x0800a57d
 800a56c:	0800a595 	.word	0x0800a595
 800a570:	0800a5af 	.word	0x0800a5af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a574:	2300      	movs	r3, #0
 800a576:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a57a:	e028      	b.n	800a5ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a57c:	f107 030c 	add.w	r3, r7, #12
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff fe67 	bl	800a254 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a592:	e01c      	b.n	800a5ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a594:	f107 030c 	add.w	r3, r7, #12
 800a598:	4618      	mov	r0, r3
 800a59a:	f7ff fe5b 	bl	800a254 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a5ac:	e00f      	b.n	800a5ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a5ae:	f107 030c 	add.w	r3, r7, #12
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fe4e 	bl	800a254 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	0a5a      	lsrs	r2, r3, #9
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a5c6:	e002      	b.n	800a5ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a5c8:	2304      	movs	r3, #4
 800a5ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a5ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3730      	adds	r7, #48	@ 0x30
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000009 	.word	0x20000009

0800a5e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a5e4:	4b03      	ldr	r3, [pc, #12]	@ (800a5f4 <BSP_SD_WriteCpltCallback+0x14>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	601a      	str	r2, [r3, #0]
}
 800a5ea:	bf00      	nop
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	2000054c 	.word	0x2000054c

0800a5f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a5fc:	4b03      	ldr	r3, [pc, #12]	@ (800a60c <BSP_SD_ReadCpltCallback+0x14>)
 800a5fe:	2201      	movs	r2, #1
 800a600:	601a      	str	r2, [r3, #0]
}
 800a602:	bf00      	nop
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	20000550 	.word	0x20000550

0800a610 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a61c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a620:	f002 fd8e 	bl	800d140 <USBD_static_malloc>
 800a624:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d109      	bne.n	800a640 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	32b0      	adds	r2, #176	@ 0xb0
 800a636:	2100      	movs	r1, #0
 800a638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a63c:	2302      	movs	r3, #2
 800a63e:	e0d4      	b.n	800a7ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a640:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a644:	2100      	movs	r1, #0
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f002 fdf2 	bl	800d230 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	32b0      	adds	r2, #176	@ 0xb0
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	32b0      	adds	r2, #176	@ 0xb0
 800a666:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	7c1b      	ldrb	r3, [r3, #16]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d138      	bne.n	800a6ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a678:	4b5e      	ldr	r3, [pc, #376]	@ (800a7f4 <USBD_CDC_Init+0x1e4>)
 800a67a:	7819      	ldrb	r1, [r3, #0]
 800a67c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a680:	2202      	movs	r2, #2
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f002 fbeb 	bl	800ce5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a688:	4b5a      	ldr	r3, [pc, #360]	@ (800a7f4 <USBD_CDC_Init+0x1e4>)
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	f003 020f 	and.w	r2, r3, #15
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	4613      	mov	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	440b      	add	r3, r1
 800a69c:	3324      	adds	r3, #36	@ 0x24
 800a69e:	2201      	movs	r2, #1
 800a6a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6a2:	4b55      	ldr	r3, [pc, #340]	@ (800a7f8 <USBD_CDC_Init+0x1e8>)
 800a6a4:	7819      	ldrb	r1, [r3, #0]
 800a6a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f002 fbd6 	bl	800ce5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6b2:	4b51      	ldr	r3, [pc, #324]	@ (800a7f8 <USBD_CDC_Init+0x1e8>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	f003 020f 	and.w	r2, r3, #15
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	440b      	add	r3, r1
 800a6c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6ce:	4b4b      	ldr	r3, [pc, #300]	@ (800a7fc <USBD_CDC_Init+0x1ec>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	f003 020f 	and.w	r2, r3, #15
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	440b      	add	r3, r1
 800a6e2:	3326      	adds	r3, #38	@ 0x26
 800a6e4:	2210      	movs	r2, #16
 800a6e6:	801a      	strh	r2, [r3, #0]
 800a6e8:	e035      	b.n	800a756 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6ea:	4b42      	ldr	r3, [pc, #264]	@ (800a7f4 <USBD_CDC_Init+0x1e4>)
 800a6ec:	7819      	ldrb	r1, [r3, #0]
 800a6ee:	2340      	movs	r3, #64	@ 0x40
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f002 fbb3 	bl	800ce5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7f4 <USBD_CDC_Init+0x1e4>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 020f 	and.w	r2, r3, #15
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	3324      	adds	r3, #36	@ 0x24
 800a70e:	2201      	movs	r2, #1
 800a710:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a712:	4b39      	ldr	r3, [pc, #228]	@ (800a7f8 <USBD_CDC_Init+0x1e8>)
 800a714:	7819      	ldrb	r1, [r3, #0]
 800a716:	2340      	movs	r3, #64	@ 0x40
 800a718:	2202      	movs	r2, #2
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f002 fb9f 	bl	800ce5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a720:	4b35      	ldr	r3, [pc, #212]	@ (800a7f8 <USBD_CDC_Init+0x1e8>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	f003 020f 	and.w	r2, r3, #15
 800a728:	6879      	ldr	r1, [r7, #4]
 800a72a:	4613      	mov	r3, r2
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	440b      	add	r3, r1
 800a734:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a738:	2201      	movs	r2, #1
 800a73a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a73c:	4b2f      	ldr	r3, [pc, #188]	@ (800a7fc <USBD_CDC_Init+0x1ec>)
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	f003 020f 	and.w	r2, r3, #15
 800a744:	6879      	ldr	r1, [r7, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	440b      	add	r3, r1
 800a750:	3326      	adds	r3, #38	@ 0x26
 800a752:	2210      	movs	r2, #16
 800a754:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a756:	4b29      	ldr	r3, [pc, #164]	@ (800a7fc <USBD_CDC_Init+0x1ec>)
 800a758:	7819      	ldrb	r1, [r3, #0]
 800a75a:	2308      	movs	r3, #8
 800a75c:	2203      	movs	r2, #3
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f002 fb7d 	bl	800ce5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a764:	4b25      	ldr	r3, [pc, #148]	@ (800a7fc <USBD_CDC_Init+0x1ec>)
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	f003 020f 	and.w	r2, r3, #15
 800a76c:	6879      	ldr	r1, [r7, #4]
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	440b      	add	r3, r1
 800a778:	3324      	adds	r3, #36	@ 0x24
 800a77a:	2201      	movs	r2, #1
 800a77c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	33b0      	adds	r3, #176	@ 0xb0
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e018      	b.n	800a7ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7c1b      	ldrb	r3, [r3, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f8 <USBD_CDC_Init+0x1e8>)
 800a7c2:	7819      	ldrb	r1, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f002 fc34 	bl	800d03c <USBD_LL_PrepareReceive>
 800a7d4:	e008      	b.n	800a7e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7d6:	4b08      	ldr	r3, [pc, #32]	@ (800a7f8 <USBD_CDC_Init+0x1e8>)
 800a7d8:	7819      	ldrb	r1, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7e0:	2340      	movs	r3, #64	@ 0x40
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f002 fc2a 	bl	800d03c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000093 	.word	0x20000093
 800a7f8:	20000094 	.word	0x20000094
 800a7fc:	20000095 	.word	0x20000095

0800a800 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a80c:	4b3a      	ldr	r3, [pc, #232]	@ (800a8f8 <USBD_CDC_DeInit+0xf8>)
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f002 fb49 	bl	800ceaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a818:	4b37      	ldr	r3, [pc, #220]	@ (800a8f8 <USBD_CDC_DeInit+0xf8>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f003 020f 	and.w	r2, r3, #15
 800a820:	6879      	ldr	r1, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	3324      	adds	r3, #36	@ 0x24
 800a82e:	2200      	movs	r2, #0
 800a830:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a832:	4b32      	ldr	r3, [pc, #200]	@ (800a8fc <USBD_CDC_DeInit+0xfc>)
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f002 fb36 	bl	800ceaa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a83e:	4b2f      	ldr	r3, [pc, #188]	@ (800a8fc <USBD_CDC_DeInit+0xfc>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	f003 020f 	and.w	r2, r3, #15
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	440b      	add	r3, r1
 800a852:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a856:	2200      	movs	r2, #0
 800a858:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a85a:	4b29      	ldr	r3, [pc, #164]	@ (800a900 <USBD_CDC_DeInit+0x100>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f002 fb22 	bl	800ceaa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a866:	4b26      	ldr	r3, [pc, #152]	@ (800a900 <USBD_CDC_DeInit+0x100>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	f003 020f 	and.w	r2, r3, #15
 800a86e:	6879      	ldr	r1, [r7, #4]
 800a870:	4613      	mov	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4413      	add	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	440b      	add	r3, r1
 800a87a:	3324      	adds	r3, #36	@ 0x24
 800a87c:	2200      	movs	r2, #0
 800a87e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a880:	4b1f      	ldr	r3, [pc, #124]	@ (800a900 <USBD_CDC_DeInit+0x100>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	4613      	mov	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	4413      	add	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	440b      	add	r3, r1
 800a894:	3326      	adds	r3, #38	@ 0x26
 800a896:	2200      	movs	r2, #0
 800a898:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	32b0      	adds	r2, #176	@ 0xb0
 800a8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d01f      	beq.n	800a8ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	33b0      	adds	r3, #176	@ 0xb0
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	32b0      	adds	r2, #176	@ 0xb0
 800a8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f002 fc44 	bl	800d15c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	32b0      	adds	r2, #176	@ 0xb0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20000093 	.word	0x20000093
 800a8fc:	20000094 	.word	0x20000094
 800a900:	20000095 	.word	0x20000095

0800a904 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	32b0      	adds	r2, #176	@ 0xb0
 800a918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a930:	2303      	movs	r3, #3
 800a932:	e0bf      	b.n	800aab4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d050      	beq.n	800a9e2 <USBD_CDC_Setup+0xde>
 800a940:	2b20      	cmp	r3, #32
 800a942:	f040 80af 	bne.w	800aaa4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	88db      	ldrh	r3, [r3, #6]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d03a      	beq.n	800a9c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	b25b      	sxtb	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	da1b      	bge.n	800a990 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	33b0      	adds	r3, #176	@ 0xb0
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a96e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	88d2      	ldrh	r2, [r2, #6]
 800a974:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	88db      	ldrh	r3, [r3, #6]
 800a97a:	2b07      	cmp	r3, #7
 800a97c:	bf28      	it	cs
 800a97e:	2307      	movcs	r3, #7
 800a980:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	89fa      	ldrh	r2, [r7, #14]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 fdb1 	bl	800c4f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a98e:	e090      	b.n	800aab2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	785a      	ldrb	r2, [r3, #1]
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	88db      	ldrh	r3, [r3, #6]
 800a99e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9a0:	d803      	bhi.n	800a9aa <USBD_CDC_Setup+0xa6>
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	88db      	ldrh	r3, [r3, #6]
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	e000      	b.n	800a9ac <USBD_CDC_Setup+0xa8>
 800a9aa:	2240      	movs	r2, #64	@ 0x40
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9b2:	6939      	ldr	r1, [r7, #16]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 fdc3 	bl	800c548 <USBD_CtlPrepareRx>
      break;
 800a9c2:	e076      	b.n	800aab2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	33b0      	adds	r3, #176	@ 0xb0
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	7850      	ldrb	r0, [r2, #1]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	4798      	blx	r3
      break;
 800a9e0:	e067      	b.n	800aab2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	785b      	ldrb	r3, [r3, #1]
 800a9e6:	2b0b      	cmp	r3, #11
 800a9e8:	d851      	bhi.n	800aa8e <USBD_CDC_Setup+0x18a>
 800a9ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a9f0 <USBD_CDC_Setup+0xec>)
 800a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f0:	0800aa21 	.word	0x0800aa21
 800a9f4:	0800aa9d 	.word	0x0800aa9d
 800a9f8:	0800aa8f 	.word	0x0800aa8f
 800a9fc:	0800aa8f 	.word	0x0800aa8f
 800aa00:	0800aa8f 	.word	0x0800aa8f
 800aa04:	0800aa8f 	.word	0x0800aa8f
 800aa08:	0800aa8f 	.word	0x0800aa8f
 800aa0c:	0800aa8f 	.word	0x0800aa8f
 800aa10:	0800aa8f 	.word	0x0800aa8f
 800aa14:	0800aa8f 	.word	0x0800aa8f
 800aa18:	0800aa4b 	.word	0x0800aa4b
 800aa1c:	0800aa75 	.word	0x0800aa75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d107      	bne.n	800aa3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa2c:	f107 030a 	add.w	r3, r7, #10
 800aa30:	2202      	movs	r2, #2
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 fd5b 	bl	800c4f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa3a:	e032      	b.n	800aaa2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 fce5 	bl	800c40e <USBD_CtlError>
            ret = USBD_FAIL;
 800aa44:	2303      	movs	r3, #3
 800aa46:	75fb      	strb	r3, [r7, #23]
          break;
 800aa48:	e02b      	b.n	800aaa2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d107      	bne.n	800aa66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa56:	f107 030d 	add.w	r3, r7, #13
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 fd46 	bl	800c4f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa64:	e01d      	b.n	800aaa2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f001 fcd0 	bl	800c40e <USBD_CtlError>
            ret = USBD_FAIL;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	75fb      	strb	r3, [r7, #23]
          break;
 800aa72:	e016      	b.n	800aaa2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d00f      	beq.n	800aaa0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f001 fcc3 	bl	800c40e <USBD_CtlError>
            ret = USBD_FAIL;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa8c:	e008      	b.n	800aaa0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 fcbc 	bl	800c40e <USBD_CtlError>
          ret = USBD_FAIL;
 800aa96:	2303      	movs	r3, #3
 800aa98:	75fb      	strb	r3, [r7, #23]
          break;
 800aa9a:	e002      	b.n	800aaa2 <USBD_CDC_Setup+0x19e>
          break;
 800aa9c:	bf00      	nop
 800aa9e:	e008      	b.n	800aab2 <USBD_CDC_Setup+0x1ae>
          break;
 800aaa0:	bf00      	nop
      }
      break;
 800aaa2:	e006      	b.n	800aab2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 fcb1 	bl	800c40e <USBD_CtlError>
      ret = USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	75fb      	strb	r3, [r7, #23]
      break;
 800aab0:	bf00      	nop
  }

  return (uint8_t)ret;
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aace:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	32b0      	adds	r2, #176	@ 0xb0
 800aada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e065      	b.n	800abb2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	32b0      	adds	r2, #176	@ 0xb0
 800aaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aaf6:	78fb      	ldrb	r3, [r7, #3]
 800aaf8:	f003 020f 	and.w	r2, r3, #15
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	3318      	adds	r3, #24
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d02f      	beq.n	800ab70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	f003 020f 	and.w	r2, r3, #15
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	440b      	add	r3, r1
 800ab22:	3318      	adds	r3, #24
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	78fb      	ldrb	r3, [r7, #3]
 800ab28:	f003 010f 	and.w	r1, r3, #15
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	00db      	lsls	r3, r3, #3
 800ab32:	440b      	add	r3, r1
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4403      	add	r3, r0
 800ab38:	331c      	adds	r3, #28
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab40:	fb01 f303 	mul.w	r3, r1, r3
 800ab44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d112      	bne.n	800ab70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	f003 020f 	and.w	r2, r3, #15
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	3318      	adds	r3, #24
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab62:	78f9      	ldrb	r1, [r7, #3]
 800ab64:	2300      	movs	r3, #0
 800ab66:	2200      	movs	r2, #0
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f002 fa46 	bl	800cffa <USBD_LL_Transmit>
 800ab6e:	e01f      	b.n	800abb0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	33b0      	adds	r3, #176	@ 0xb0
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d010      	beq.n	800abb0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	33b0      	adds	r3, #176	@ 0xb0
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4413      	add	r3, r2
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b084      	sub	sp, #16
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	460b      	mov	r3, r1
 800abc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	32b0      	adds	r2, #176	@ 0xb0
 800abd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	32b0      	adds	r2, #176	@ 0xb0
 800abe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abe8:	2303      	movs	r3, #3
 800abea:	e01a      	b.n	800ac22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abec:	78fb      	ldrb	r3, [r7, #3]
 800abee:	4619      	mov	r1, r3
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f002 fa44 	bl	800d07e <USBD_LL_GetRxDataSize>
 800abf6:	4602      	mov	r2, r0
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	33b0      	adds	r3, #176	@ 0xb0
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	32b0      	adds	r2, #176	@ 0xb0
 800ac3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d101      	bne.n	800ac4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e024      	b.n	800ac96 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	33b0      	adds	r3, #176	@ 0xb0
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d019      	beq.n	800ac94 <USBD_CDC_EP0_RxReady+0x6a>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac66:	2bff      	cmp	r3, #255	@ 0xff
 800ac68:	d014      	beq.n	800ac94 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	33b0      	adds	r3, #176	@ 0xb0
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	22ff      	movs	r2, #255	@ 0xff
 800ac90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aca8:	2182      	movs	r1, #130	@ 0x82
 800acaa:	4818      	ldr	r0, [pc, #96]	@ (800ad0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acac:	f000 fd4f 	bl	800b74e <USBD_GetEpDesc>
 800acb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acb2:	2101      	movs	r1, #1
 800acb4:	4815      	ldr	r0, [pc, #84]	@ (800ad0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acb6:	f000 fd4a 	bl	800b74e <USBD_GetEpDesc>
 800acba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acbc:	2181      	movs	r1, #129	@ 0x81
 800acbe:	4813      	ldr	r0, [pc, #76]	@ (800ad0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acc0:	f000 fd45 	bl	800b74e <USBD_GetEpDesc>
 800acc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d002      	beq.n	800acd2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	2210      	movs	r2, #16
 800acd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d006      	beq.n	800ace6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2200      	movs	r2, #0
 800acdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ace0:	711a      	strb	r2, [r3, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acf4:	711a      	strb	r2, [r3, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2243      	movs	r2, #67	@ 0x43
 800acfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad00:	4b02      	ldr	r3, [pc, #8]	@ (800ad0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000050 	.word	0x20000050

0800ad10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad18:	2182      	movs	r1, #130	@ 0x82
 800ad1a:	4818      	ldr	r0, [pc, #96]	@ (800ad7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad1c:	f000 fd17 	bl	800b74e <USBD_GetEpDesc>
 800ad20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad22:	2101      	movs	r1, #1
 800ad24:	4815      	ldr	r0, [pc, #84]	@ (800ad7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad26:	f000 fd12 	bl	800b74e <USBD_GetEpDesc>
 800ad2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad2c:	2181      	movs	r1, #129	@ 0x81
 800ad2e:	4813      	ldr	r0, [pc, #76]	@ (800ad7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad30:	f000 fd0d 	bl	800b74e <USBD_GetEpDesc>
 800ad34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d002      	beq.n	800ad42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2210      	movs	r2, #16
 800ad40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d006      	beq.n	800ad56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	711a      	strb	r2, [r3, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f042 0202 	orr.w	r2, r2, #2
 800ad54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d006      	beq.n	800ad6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	711a      	strb	r2, [r3, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f042 0202 	orr.w	r2, r2, #2
 800ad68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2243      	movs	r2, #67	@ 0x43
 800ad6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad70:	4b02      	ldr	r3, [pc, #8]	@ (800ad7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3718      	adds	r7, #24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20000050 	.word	0x20000050

0800ad80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad88:	2182      	movs	r1, #130	@ 0x82
 800ad8a:	4818      	ldr	r0, [pc, #96]	@ (800adec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad8c:	f000 fcdf 	bl	800b74e <USBD_GetEpDesc>
 800ad90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad92:	2101      	movs	r1, #1
 800ad94:	4815      	ldr	r0, [pc, #84]	@ (800adec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad96:	f000 fcda 	bl	800b74e <USBD_GetEpDesc>
 800ad9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad9c:	2181      	movs	r1, #129	@ 0x81
 800ad9e:	4813      	ldr	r0, [pc, #76]	@ (800adec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ada0:	f000 fcd5 	bl	800b74e <USBD_GetEpDesc>
 800ada4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2210      	movs	r2, #16
 800adb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d006      	beq.n	800adc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	2200      	movs	r2, #0
 800adbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adc0:	711a      	strb	r2, [r3, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d006      	beq.n	800adda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2200      	movs	r2, #0
 800add0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800add4:	711a      	strb	r2, [r3, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2243      	movs	r2, #67	@ 0x43
 800adde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ade0:	4b02      	ldr	r3, [pc, #8]	@ (800adec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000050 	.word	0x20000050

0800adf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	220a      	movs	r2, #10
 800adfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800adfe:	4b03      	ldr	r3, [pc, #12]	@ (800ae0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	2000000c 	.word	0x2000000c

0800ae10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e009      	b.n	800ae38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	33b0      	adds	r3, #176	@ 0xb0
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	32b0      	adds	r2, #176	@ 0xb0
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e008      	b.n	800ae7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	32b0      	adds	r2, #176	@ 0xb0
 800ae9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aea8:	2303      	movs	r3, #3
 800aeaa:	e004      	b.n	800aeb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
	...

0800aec4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	32b0      	adds	r2, #176	@ 0xb0
 800aed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeda:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aedc:	2301      	movs	r3, #1
 800aede:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e025      	b.n	800af36 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d11f      	bne.n	800af34 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800aefc:	4b10      	ldr	r3, [pc, #64]	@ (800af40 <USBD_CDC_TransmitPacket+0x7c>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f003 020f 	and.w	r2, r3, #15
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	4613      	mov	r3, r2
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4403      	add	r3, r0
 800af16:	3318      	adds	r3, #24
 800af18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800af1a:	4b09      	ldr	r3, [pc, #36]	@ (800af40 <USBD_CDC_TransmitPacket+0x7c>)
 800af1c:	7819      	ldrb	r1, [r3, #0]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f002 f865 	bl	800cffa <USBD_LL_Transmit>

    ret = USBD_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af34:	7bfb      	ldrb	r3, [r7, #15]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20000093 	.word	0x20000093

0800af44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	32b0      	adds	r2, #176	@ 0xb0
 800af56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	32b0      	adds	r2, #176	@ 0xb0
 800af66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af6e:	2303      	movs	r3, #3
 800af70:	e018      	b.n	800afa4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	7c1b      	ldrb	r3, [r3, #16]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10a      	bne.n	800af90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af7a:	4b0c      	ldr	r3, [pc, #48]	@ (800afac <USBD_CDC_ReceivePacket+0x68>)
 800af7c:	7819      	ldrb	r1, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f002 f857 	bl	800d03c <USBD_LL_PrepareReceive>
 800af8e:	e008      	b.n	800afa2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af90:	4b06      	ldr	r3, [pc, #24]	@ (800afac <USBD_CDC_ReceivePacket+0x68>)
 800af92:	7819      	ldrb	r1, [r3, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af9a:	2340      	movs	r3, #64	@ 0x40
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f002 f84d 	bl	800d03c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	20000094 	.word	0x20000094

0800afb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	4613      	mov	r3, r2
 800afbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e01f      	b.n	800b008 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	79fa      	ldrb	r2, [r7, #7]
 800affa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f001 fec7 	bl	800cd90 <USBD_LL_Init>
 800b002:	4603      	mov	r3, r0
 800b004:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b006:	7dfb      	ldrb	r3, [r7, #23]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b01a:	2300      	movs	r3, #0
 800b01c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b024:	2303      	movs	r3, #3
 800b026:	e025      	b.n	800b074 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	32ae      	adds	r2, #174	@ 0xae
 800b03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00f      	beq.n	800b064 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	32ae      	adds	r2, #174	@ 0xae
 800b04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b054:	f107 020e 	add.w	r2, r7, #14
 800b058:	4610      	mov	r0, r2
 800b05a:	4798      	blx	r3
 800b05c:	4602      	mov	r2, r0
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f001 fecf 	bl	800ce28 <USBD_LL_Start>
 800b08a:	4603      	mov	r3, r0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b09c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d009      	beq.n	800b0d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	78fa      	ldrb	r2, [r7, #3]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	4798      	blx	r3
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	78fa      	ldrb	r2, [r7, #3]
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b108:	2303      	movs	r3, #3
 800b10a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f001 f936 	bl	800c39a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b13c:	461a      	mov	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b14a:	f003 031f 	and.w	r3, r3, #31
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d01a      	beq.n	800b188 <USBD_LL_SetupStage+0x72>
 800b152:	2b02      	cmp	r3, #2
 800b154:	d822      	bhi.n	800b19c <USBD_LL_SetupStage+0x86>
 800b156:	2b00      	cmp	r3, #0
 800b158:	d002      	beq.n	800b160 <USBD_LL_SetupStage+0x4a>
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d00a      	beq.n	800b174 <USBD_LL_SetupStage+0x5e>
 800b15e:	e01d      	b.n	800b19c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fb63 	bl	800b834 <USBD_StdDevReq>
 800b16e:	4603      	mov	r3, r0
 800b170:	73fb      	strb	r3, [r7, #15]
      break;
 800b172:	e020      	b.n	800b1b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 fbcb 	bl	800b918 <USBD_StdItfReq>
 800b182:	4603      	mov	r3, r0
 800b184:	73fb      	strb	r3, [r7, #15]
      break;
 800b186:	e016      	b.n	800b1b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 fc2d 	bl	800b9f0 <USBD_StdEPReq>
 800b196:	4603      	mov	r3, r0
 800b198:	73fb      	strb	r3, [r7, #15]
      break;
 800b19a:	e00c      	b.n	800b1b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f001 fe9c 	bl	800cee8 <USBD_LL_StallEP>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b4:	bf00      	nop
  }

  return ret;
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1d2:	7afb      	ldrb	r3, [r7, #11]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d16e      	bne.n	800b2b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	f040 8098 	bne.w	800b31c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	689a      	ldr	r2, [r3, #8]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d913      	bls.n	800b220 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	1ad2      	subs	r2, r2, r3
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	4293      	cmp	r3, r2
 800b210:	bf28      	it	cs
 800b212:	4613      	movcs	r3, r2
 800b214:	461a      	mov	r2, r3
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f001 f9b2 	bl	800c582 <USBD_CtlContinueRx>
 800b21e:	e07d      	b.n	800b31c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b226:	f003 031f 	and.w	r3, r3, #31
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d014      	beq.n	800b258 <USBD_LL_DataOutStage+0x98>
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d81d      	bhi.n	800b26e <USBD_LL_DataOutStage+0xae>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <USBD_LL_DataOutStage+0x7c>
 800b236:	2b01      	cmp	r3, #1
 800b238:	d003      	beq.n	800b242 <USBD_LL_DataOutStage+0x82>
 800b23a:	e018      	b.n	800b26e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	75bb      	strb	r3, [r7, #22]
            break;
 800b240:	e018      	b.n	800b274 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f000 fa64 	bl	800b71a <USBD_CoreFindIF>
 800b252:	4603      	mov	r3, r0
 800b254:	75bb      	strb	r3, [r7, #22]
            break;
 800b256:	e00d      	b.n	800b274 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	4619      	mov	r1, r3
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f000 fa66 	bl	800b734 <USBD_CoreFindEP>
 800b268:	4603      	mov	r3, r0
 800b26a:	75bb      	strb	r3, [r7, #22]
            break;
 800b26c:	e002      	b.n	800b274 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	75bb      	strb	r3, [r7, #22]
            break;
 800b272:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b274:	7dbb      	ldrb	r3, [r7, #22]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d119      	bne.n	800b2ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b03      	cmp	r3, #3
 800b284:	d113      	bne.n	800b2ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b286:	7dba      	ldrb	r2, [r7, #22]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	32ae      	adds	r2, #174	@ 0xae
 800b28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00b      	beq.n	800b2ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b296:	7dba      	ldrb	r2, [r7, #22]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b29e:	7dba      	ldrb	r2, [r7, #22]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	32ae      	adds	r2, #174	@ 0xae
 800b2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f001 f978 	bl	800c5a4 <USBD_CtlSendStatus>
 800b2b4:	e032      	b.n	800b31c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2b6:	7afb      	ldrb	r3, [r7, #11]
 800b2b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 fa37 	bl	800b734 <USBD_CoreFindEP>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ca:	7dbb      	ldrb	r3, [r7, #22]
 800b2cc:	2bff      	cmp	r3, #255	@ 0xff
 800b2ce:	d025      	beq.n	800b31c <USBD_LL_DataOutStage+0x15c>
 800b2d0:	7dbb      	ldrb	r3, [r7, #22]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d122      	bne.n	800b31c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d117      	bne.n	800b312 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2e2:	7dba      	ldrb	r2, [r7, #22]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	32ae      	adds	r2, #174	@ 0xae
 800b2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00f      	beq.n	800b312 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2f2:	7dba      	ldrb	r2, [r7, #22]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b2fa:	7dba      	ldrb	r2, [r7, #22]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	32ae      	adds	r2, #174	@ 0xae
 800b300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	7afa      	ldrb	r2, [r7, #11]
 800b308:	4611      	mov	r1, r2
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	4798      	blx	r3
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b318:	7dfb      	ldrb	r3, [r7, #23]
 800b31a:	e000      	b.n	800b31e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3718      	adds	r7, #24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b086      	sub	sp, #24
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	460b      	mov	r3, r1
 800b330:	607a      	str	r2, [r7, #4]
 800b332:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d16f      	bne.n	800b41a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3314      	adds	r3, #20
 800b33e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b346:	2b02      	cmp	r3, #2
 800b348:	d15a      	bne.n	800b400 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	689a      	ldr	r2, [r3, #8]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	429a      	cmp	r2, r3
 800b354:	d914      	bls.n	800b380 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	1ad2      	subs	r2, r2, r3
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	461a      	mov	r2, r3
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f001 f8da 	bl	800c526 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b372:	2300      	movs	r3, #0
 800b374:	2200      	movs	r2, #0
 800b376:	2100      	movs	r1, #0
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f001 fe5f 	bl	800d03c <USBD_LL_PrepareReceive>
 800b37e:	e03f      	b.n	800b400 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	68da      	ldr	r2, [r3, #12]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d11c      	bne.n	800b3c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b394:	429a      	cmp	r2, r3
 800b396:	d316      	bcc.n	800b3c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d20f      	bcs.n	800b3c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f001 f8bb 	bl	800c526 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	2100      	movs	r1, #0
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f001 fe3c 	bl	800d03c <USBD_LL_PrepareReceive>
 800b3c4:	e01c      	b.n	800b400 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d10f      	bne.n	800b3f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d009      	beq.n	800b3f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3f2:	2180      	movs	r1, #128	@ 0x80
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f001 fd77 	bl	800cee8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f001 f8e5 	bl	800c5ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d03a      	beq.n	800b480 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff fe42 	bl	800b094 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b418:	e032      	b.n	800b480 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b41a:	7afb      	ldrb	r3, [r7, #11]
 800b41c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b420:	b2db      	uxtb	r3, r3
 800b422:	4619      	mov	r1, r3
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f000 f985 	bl	800b734 <USBD_CoreFindEP>
 800b42a:	4603      	mov	r3, r0
 800b42c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	2bff      	cmp	r3, #255	@ 0xff
 800b432:	d025      	beq.n	800b480 <USBD_LL_DataInStage+0x15a>
 800b434:	7dfb      	ldrb	r3, [r7, #23]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d122      	bne.n	800b480 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b03      	cmp	r3, #3
 800b444:	d11c      	bne.n	800b480 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b446:	7dfa      	ldrb	r2, [r7, #23]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	32ae      	adds	r2, #174	@ 0xae
 800b44c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d014      	beq.n	800b480 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b456:	7dfa      	ldrb	r2, [r7, #23]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b45e:	7dfa      	ldrb	r2, [r7, #23]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	32ae      	adds	r2, #174	@ 0xae
 800b464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	7afa      	ldrb	r2, [r7, #11]
 800b46c:	4611      	mov	r1, r2
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	4798      	blx	r3
 800b472:	4603      	mov	r3, r0
 800b474:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b476:	7dbb      	ldrb	r3, [r7, #22]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b47c:	7dbb      	ldrb	r3, [r7, #22]
 800b47e:	e000      	b.n	800b482 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d014      	beq.n	800b4f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00e      	beq.n	800b4f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	6852      	ldr	r2, [r2, #4]
 800b4de:	b2d2      	uxtb	r2, r2
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	4798      	blx	r3
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4f0:	2340      	movs	r3, #64	@ 0x40
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fcb1 	bl	800ce5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2240      	movs	r2, #64	@ 0x40
 800b508:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b50c:	2340      	movs	r3, #64	@ 0x40
 800b50e:	2200      	movs	r2, #0
 800b510:	2180      	movs	r1, #128	@ 0x80
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f001 fca3 	bl	800ce5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2240      	movs	r2, #64	@ 0x40
 800b522:	621a      	str	r2, [r3, #32]

  return ret;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b52e:	b480      	push	{r7}
 800b530:	b083      	sub	sp, #12
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	460b      	mov	r3, r1
 800b538:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d006      	beq.n	800b570 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2204      	movs	r2, #4
 800b574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b586:	b480      	push	{r7}
 800b588:	b083      	sub	sp, #12
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b04      	cmp	r3, #4
 800b598:	d106      	bne.n	800b5a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b082      	sub	sp, #8
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b03      	cmp	r3, #3
 800b5c8:	d110      	bne.n	800b5ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00b      	beq.n	800b5ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5da:	69db      	ldr	r3, [r3, #28]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d005      	beq.n	800b5ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b082      	sub	sp, #8
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	460b      	mov	r3, r1
 800b600:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	32ae      	adds	r2, #174	@ 0xae
 800b60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b614:	2303      	movs	r3, #3
 800b616:	e01c      	b.n	800b652 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b03      	cmp	r3, #3
 800b622:	d115      	bne.n	800b650 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	32ae      	adds	r2, #174	@ 0xae
 800b62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b632:	6a1b      	ldr	r3, [r3, #32]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	32ae      	adds	r2, #174	@ 0xae
 800b642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b646:	6a1b      	ldr	r3, [r3, #32]
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	4611      	mov	r1, r2
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	32ae      	adds	r2, #174	@ 0xae
 800b670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b678:	2303      	movs	r3, #3
 800b67a:	e01c      	b.n	800b6b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b682:	b2db      	uxtb	r3, r3
 800b684:	2b03      	cmp	r3, #3
 800b686:	d115      	bne.n	800b6b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	32ae      	adds	r2, #174	@ 0xae
 800b692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00b      	beq.n	800b6b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	32ae      	adds	r2, #174	@ 0xae
 800b6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ac:	78fa      	ldrb	r2, [r7, #3]
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6be:	b480      	push	{r7}
 800b6c0:	b083      	sub	sp, #12
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00e      	beq.n	800b710 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	6852      	ldr	r2, [r2, #4]
 800b6fe:	b2d2      	uxtb	r2, r2
 800b700:	4611      	mov	r1, r2
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	4798      	blx	r3
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b70c:	2303      	movs	r3, #3
 800b70e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b710:	7bfb      	ldrb	r3, [r7, #15]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b083      	sub	sp, #12
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	460b      	mov	r3, r1
 800b724:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b726:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b728:	4618      	mov	r0, r3
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b740:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b742:	4618      	mov	r0, r3
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b086      	sub	sp, #24
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	885b      	ldrh	r3, [r3, #2]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	7812      	ldrb	r2, [r2, #0]
 800b770:	4293      	cmp	r3, r2
 800b772:	d91f      	bls.n	800b7b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b77a:	e013      	b.n	800b7a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b77c:	f107 030a 	add.w	r3, r7, #10
 800b780:	4619      	mov	r1, r3
 800b782:	6978      	ldr	r0, [r7, #20]
 800b784:	f000 f81b 	bl	800b7be <USBD_GetNextDesc>
 800b788:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	785b      	ldrb	r3, [r3, #1]
 800b78e:	2b05      	cmp	r3, #5
 800b790:	d108      	bne.n	800b7a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	789b      	ldrb	r3, [r3, #2]
 800b79a:	78fa      	ldrb	r2, [r7, #3]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d008      	beq.n	800b7b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	885b      	ldrh	r3, [r3, #2]
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	897b      	ldrh	r3, [r7, #10]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d8e5      	bhi.n	800b77c <USBD_GetEpDesc+0x2e>
 800b7b0:	e000      	b.n	800b7b4 <USBD_GetEpDesc+0x66>
          break;
 800b7b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7b4:	693b      	ldr	r3, [r7, #16]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	7812      	ldrb	r2, [r2, #0]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b087      	sub	sp, #28
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	3301      	adds	r3, #1
 800b80c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b814:	8a3b      	ldrh	r3, [r7, #16]
 800b816:	021b      	lsls	r3, r3, #8
 800b818:	b21a      	sxth	r2, r3
 800b81a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b81e:	4313      	orrs	r3, r2
 800b820:	b21b      	sxth	r3, r3
 800b822:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b824:	89fb      	ldrh	r3, [r7, #14]
}
 800b826:	4618      	mov	r0, r3
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
	...

0800b834 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b84a:	2b40      	cmp	r3, #64	@ 0x40
 800b84c:	d005      	beq.n	800b85a <USBD_StdDevReq+0x26>
 800b84e:	2b40      	cmp	r3, #64	@ 0x40
 800b850:	d857      	bhi.n	800b902 <USBD_StdDevReq+0xce>
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00f      	beq.n	800b876 <USBD_StdDevReq+0x42>
 800b856:	2b20      	cmp	r3, #32
 800b858:	d153      	bne.n	800b902 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	32ae      	adds	r2, #174	@ 0xae
 800b864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	4798      	blx	r3
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]
      break;
 800b874:	e04a      	b.n	800b90c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	785b      	ldrb	r3, [r3, #1]
 800b87a:	2b09      	cmp	r3, #9
 800b87c:	d83b      	bhi.n	800b8f6 <USBD_StdDevReq+0xc2>
 800b87e:	a201      	add	r2, pc, #4	@ (adr r2, 800b884 <USBD_StdDevReq+0x50>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800b8d9 	.word	0x0800b8d9
 800b888:	0800b8ed 	.word	0x0800b8ed
 800b88c:	0800b8f7 	.word	0x0800b8f7
 800b890:	0800b8e3 	.word	0x0800b8e3
 800b894:	0800b8f7 	.word	0x0800b8f7
 800b898:	0800b8b7 	.word	0x0800b8b7
 800b89c:	0800b8ad 	.word	0x0800b8ad
 800b8a0:	0800b8f7 	.word	0x0800b8f7
 800b8a4:	0800b8cf 	.word	0x0800b8cf
 800b8a8:	0800b8c1 	.word	0x0800b8c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fa3c 	bl	800bd2c <USBD_GetDescriptor>
          break;
 800b8b4:	e024      	b.n	800b900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fbcb 	bl	800c054 <USBD_SetAddress>
          break;
 800b8be:	e01f      	b.n	800b900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fc0a 	bl	800c0dc <USBD_SetConfig>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73fb      	strb	r3, [r7, #15]
          break;
 800b8cc:	e018      	b.n	800b900 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 fcad 	bl	800c230 <USBD_GetConfig>
          break;
 800b8d6:	e013      	b.n	800b900 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fcde 	bl	800c29c <USBD_GetStatus>
          break;
 800b8e0:	e00e      	b.n	800b900 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 fd0d 	bl	800c304 <USBD_SetFeature>
          break;
 800b8ea:	e009      	b.n	800b900 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fd31 	bl	800c356 <USBD_ClrFeature>
          break;
 800b8f4:	e004      	b.n	800b900 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fd88 	bl	800c40e <USBD_CtlError>
          break;
 800b8fe:	bf00      	nop
      }
      break;
 800b900:	e004      	b.n	800b90c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fd82 	bl	800c40e <USBD_CtlError>
      break;
 800b90a:	bf00      	nop
  }

  return ret;
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop

0800b918 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b92e:	2b40      	cmp	r3, #64	@ 0x40
 800b930:	d005      	beq.n	800b93e <USBD_StdItfReq+0x26>
 800b932:	2b40      	cmp	r3, #64	@ 0x40
 800b934:	d852      	bhi.n	800b9dc <USBD_StdItfReq+0xc4>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <USBD_StdItfReq+0x26>
 800b93a:	2b20      	cmp	r3, #32
 800b93c:	d14e      	bne.n	800b9dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b944:	b2db      	uxtb	r3, r3
 800b946:	3b01      	subs	r3, #1
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d840      	bhi.n	800b9ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	889b      	ldrh	r3, [r3, #4]
 800b950:	b2db      	uxtb	r3, r3
 800b952:	2b01      	cmp	r3, #1
 800b954:	d836      	bhi.n	800b9c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	889b      	ldrh	r3, [r3, #4]
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff fedb 	bl	800b71a <USBD_CoreFindIF>
 800b964:	4603      	mov	r3, r0
 800b966:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2bff      	cmp	r3, #255	@ 0xff
 800b96c:	d01d      	beq.n	800b9aa <USBD_StdItfReq+0x92>
 800b96e:	7bbb      	ldrb	r3, [r7, #14]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d11a      	bne.n	800b9aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b974:	7bba      	ldrb	r2, [r7, #14]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	32ae      	adds	r2, #174	@ 0xae
 800b97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00f      	beq.n	800b9a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b984:	7bba      	ldrb	r2, [r7, #14]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b98c:	7bba      	ldrb	r2, [r7, #14]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32ae      	adds	r2, #174	@ 0xae
 800b992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9a2:	e004      	b.n	800b9ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9a8:	e001      	b.n	800b9ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	88db      	ldrh	r3, [r3, #6]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d110      	bne.n	800b9d8 <USBD_StdItfReq+0xc0>
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10d      	bne.n	800b9d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fdf1 	bl	800c5a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9c2:	e009      	b.n	800b9d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fd21 	bl	800c40e <USBD_CtlError>
          break;
 800b9cc:	e004      	b.n	800b9d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fd1c 	bl	800c40e <USBD_CtlError>
          break;
 800b9d6:	e000      	b.n	800b9da <USBD_StdItfReq+0xc2>
          break;
 800b9d8:	bf00      	nop
      }
      break;
 800b9da:	e004      	b.n	800b9e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fd15 	bl	800c40e <USBD_CtlError>
      break;
 800b9e4:	bf00      	nop
  }

  return ret;
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	889b      	ldrh	r3, [r3, #4]
 800ba02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba0c:	2b40      	cmp	r3, #64	@ 0x40
 800ba0e:	d007      	beq.n	800ba20 <USBD_StdEPReq+0x30>
 800ba10:	2b40      	cmp	r3, #64	@ 0x40
 800ba12:	f200 817f 	bhi.w	800bd14 <USBD_StdEPReq+0x324>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02a      	beq.n	800ba70 <USBD_StdEPReq+0x80>
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	f040 817a 	bne.w	800bd14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	4619      	mov	r1, r3
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff fe85 	bl	800b734 <USBD_CoreFindEP>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba2e:	7b7b      	ldrb	r3, [r7, #13]
 800ba30:	2bff      	cmp	r3, #255	@ 0xff
 800ba32:	f000 8174 	beq.w	800bd1e <USBD_StdEPReq+0x32e>
 800ba36:	7b7b      	ldrb	r3, [r7, #13]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f040 8170 	bne.w	800bd1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba3e:	7b7a      	ldrb	r2, [r7, #13]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba46:	7b7a      	ldrb	r2, [r7, #13]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	32ae      	adds	r2, #174	@ 0xae
 800ba4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 8163 	beq.w	800bd1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba58:	7b7a      	ldrb	r2, [r7, #13]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	32ae      	adds	r2, #174	@ 0xae
 800ba5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	6839      	ldr	r1, [r7, #0]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba6e:	e156      	b.n	800bd1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	785b      	ldrb	r3, [r3, #1]
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d008      	beq.n	800ba8a <USBD_StdEPReq+0x9a>
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	f300 8145 	bgt.w	800bd08 <USBD_StdEPReq+0x318>
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 809b 	beq.w	800bbba <USBD_StdEPReq+0x1ca>
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d03c      	beq.n	800bb02 <USBD_StdEPReq+0x112>
 800ba88:	e13e      	b.n	800bd08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d002      	beq.n	800ba9c <USBD_StdEPReq+0xac>
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	d016      	beq.n	800bac8 <USBD_StdEPReq+0xd8>
 800ba9a:	e02c      	b.n	800baf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba9c:	7bbb      	ldrb	r3, [r7, #14]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00d      	beq.n	800babe <USBD_StdEPReq+0xce>
 800baa2:	7bbb      	ldrb	r3, [r7, #14]
 800baa4:	2b80      	cmp	r3, #128	@ 0x80
 800baa6:	d00a      	beq.n	800babe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f001 fa1b 	bl	800cee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab2:	2180      	movs	r1, #128	@ 0x80
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f001 fa17 	bl	800cee8 <USBD_LL_StallEP>
 800baba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800babc:	e020      	b.n	800bb00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fca4 	bl	800c40e <USBD_CtlError>
              break;
 800bac6:	e01b      	b.n	800bb00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	885b      	ldrh	r3, [r3, #2]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10e      	bne.n	800baee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00b      	beq.n	800baee <USBD_StdEPReq+0xfe>
 800bad6:	7bbb      	ldrb	r3, [r7, #14]
 800bad8:	2b80      	cmp	r3, #128	@ 0x80
 800bada:	d008      	beq.n	800baee <USBD_StdEPReq+0xfe>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	88db      	ldrh	r3, [r3, #6]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d104      	bne.n	800baee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 f9fd 	bl	800cee8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fd58 	bl	800c5a4 <USBD_CtlSendStatus>

              break;
 800baf4:	e004      	b.n	800bb00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fc88 	bl	800c40e <USBD_CtlError>
              break;
 800bafe:	bf00      	nop
          }
          break;
 800bb00:	e107      	b.n	800bd12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d002      	beq.n	800bb14 <USBD_StdEPReq+0x124>
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d016      	beq.n	800bb40 <USBD_StdEPReq+0x150>
 800bb12:	e04b      	b.n	800bbac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00d      	beq.n	800bb36 <USBD_StdEPReq+0x146>
 800bb1a:	7bbb      	ldrb	r3, [r7, #14]
 800bb1c:	2b80      	cmp	r3, #128	@ 0x80
 800bb1e:	d00a      	beq.n	800bb36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb20:	7bbb      	ldrb	r3, [r7, #14]
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f001 f9df 	bl	800cee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb2a:	2180      	movs	r1, #128	@ 0x80
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f001 f9db 	bl	800cee8 <USBD_LL_StallEP>
 800bb32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb34:	e040      	b.n	800bbb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fc68 	bl	800c40e <USBD_CtlError>
              break;
 800bb3e:	e03b      	b.n	800bbb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	885b      	ldrh	r3, [r3, #2]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d136      	bne.n	800bbb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
 800bb4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d004      	beq.n	800bb5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
 800bb54:	4619      	mov	r1, r3
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f001 f9e5 	bl	800cf26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fd21 	bl	800c5a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff fde4 	bl	800b734 <USBD_CoreFindEP>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb70:	7b7b      	ldrb	r3, [r7, #13]
 800bb72:	2bff      	cmp	r3, #255	@ 0xff
 800bb74:	d01f      	beq.n	800bbb6 <USBD_StdEPReq+0x1c6>
 800bb76:	7b7b      	ldrb	r3, [r7, #13]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d11c      	bne.n	800bbb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb7c:	7b7a      	ldrb	r2, [r7, #13]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb84:	7b7a      	ldrb	r2, [r7, #13]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	32ae      	adds	r2, #174	@ 0xae
 800bb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d010      	beq.n	800bbb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb94:	7b7a      	ldrb	r2, [r7, #13]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	32ae      	adds	r2, #174	@ 0xae
 800bb9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	4798      	blx	r3
 800bba6:	4603      	mov	r3, r0
 800bba8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbaa:	e004      	b.n	800bbb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fc2d 	bl	800c40e <USBD_CtlError>
              break;
 800bbb4:	e000      	b.n	800bbb8 <USBD_StdEPReq+0x1c8>
              break;
 800bbb6:	bf00      	nop
          }
          break;
 800bbb8:	e0ab      	b.n	800bd12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d002      	beq.n	800bbcc <USBD_StdEPReq+0x1dc>
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d032      	beq.n	800bc30 <USBD_StdEPReq+0x240>
 800bbca:	e097      	b.n	800bcfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbcc:	7bbb      	ldrb	r3, [r7, #14]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d007      	beq.n	800bbe2 <USBD_StdEPReq+0x1f2>
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b80      	cmp	r3, #128	@ 0x80
 800bbd6:	d004      	beq.n	800bbe2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fc17 	bl	800c40e <USBD_CtlError>
                break;
 800bbe0:	e091      	b.n	800bd06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da0b      	bge.n	800bc02 <USBD_StdEPReq+0x212>
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
 800bbec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	3310      	adds	r3, #16
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	3304      	adds	r3, #4
 800bc00:	e00b      	b.n	800bc1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc02:	7bbb      	ldrb	r3, [r7, #14]
 800bc04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	4413      	add	r3, r2
 800bc18:	3304      	adds	r3, #4
 800bc1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2202      	movs	r2, #2
 800bc26:	4619      	mov	r1, r3
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fc61 	bl	800c4f0 <USBD_CtlSendData>
              break;
 800bc2e:	e06a      	b.n	800bd06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	da11      	bge.n	800bc5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc38:	7bbb      	ldrb	r3, [r7, #14]
 800bc3a:	f003 020f 	and.w	r2, r3, #15
 800bc3e:	6879      	ldr	r1, [r7, #4]
 800bc40:	4613      	mov	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	440b      	add	r3, r1
 800bc4a:	3324      	adds	r3, #36	@ 0x24
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d117      	bne.n	800bc82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fbda 	bl	800c40e <USBD_CtlError>
                  break;
 800bc5a:	e054      	b.n	800bd06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc5c:	7bbb      	ldrb	r3, [r7, #14]
 800bc5e:	f003 020f 	and.w	r2, r3, #15
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d104      	bne.n	800bc82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fbc7 	bl	800c40e <USBD_CtlError>
                  break;
 800bc80:	e041      	b.n	800bd06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	da0b      	bge.n	800bca2 <USBD_StdEPReq+0x2b2>
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	3310      	adds	r3, #16
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	3304      	adds	r3, #4
 800bca0:	e00b      	b.n	800bcba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bca8:	4613      	mov	r3, r2
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	3304      	adds	r3, #4
 800bcba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcbc:	7bbb      	ldrb	r3, [r7, #14]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <USBD_StdEPReq+0x2d8>
 800bcc2:	7bbb      	ldrb	r3, [r7, #14]
 800bcc4:	2b80      	cmp	r3, #128	@ 0x80
 800bcc6:	d103      	bne.n	800bcd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e00e      	b.n	800bcee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 f945 	bl	800cf64 <USBD_LL_IsStallEP>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	2201      	movs	r2, #1
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	e002      	b.n	800bcee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2200      	movs	r2, #0
 800bcec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fbfb 	bl	800c4f0 <USBD_CtlSendData>
              break;
 800bcfa:	e004      	b.n	800bd06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fb85 	bl	800c40e <USBD_CtlError>
              break;
 800bd04:	bf00      	nop
          }
          break;
 800bd06:	e004      	b.n	800bd12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd08:	6839      	ldr	r1, [r7, #0]
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fb7f 	bl	800c40e <USBD_CtlError>
          break;
 800bd10:	bf00      	nop
      }
      break;
 800bd12:	e005      	b.n	800bd20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fb79 	bl	800c40e <USBD_CtlError>
      break;
 800bd1c:	e000      	b.n	800bd20 <USBD_StdEPReq+0x330>
      break;
 800bd1e:	bf00      	nop
  }

  return ret;
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
	...

0800bd2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd36:	2300      	movs	r3, #0
 800bd38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	885b      	ldrh	r3, [r3, #2]
 800bd46:	0a1b      	lsrs	r3, r3, #8
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	2b0e      	cmp	r3, #14
 800bd4e:	f200 8152 	bhi.w	800bff6 <USBD_GetDescriptor+0x2ca>
 800bd52:	a201      	add	r2, pc, #4	@ (adr r2, 800bd58 <USBD_GetDescriptor+0x2c>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bdc9 	.word	0x0800bdc9
 800bd5c:	0800bde1 	.word	0x0800bde1
 800bd60:	0800be21 	.word	0x0800be21
 800bd64:	0800bff7 	.word	0x0800bff7
 800bd68:	0800bff7 	.word	0x0800bff7
 800bd6c:	0800bf97 	.word	0x0800bf97
 800bd70:	0800bfc3 	.word	0x0800bfc3
 800bd74:	0800bff7 	.word	0x0800bff7
 800bd78:	0800bff7 	.word	0x0800bff7
 800bd7c:	0800bff7 	.word	0x0800bff7
 800bd80:	0800bff7 	.word	0x0800bff7
 800bd84:	0800bff7 	.word	0x0800bff7
 800bd88:	0800bff7 	.word	0x0800bff7
 800bd8c:	0800bff7 	.word	0x0800bff7
 800bd90:	0800bd95 	.word	0x0800bd95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9a:	69db      	ldr	r3, [r3, #28]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00b      	beq.n	800bdb8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	7c12      	ldrb	r2, [r2, #16]
 800bdac:	f107 0108 	add.w	r1, r7, #8
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	4798      	blx	r3
 800bdb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdb6:	e126      	b.n	800c006 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fb27 	bl	800c40e <USBD_CtlError>
        err++;
 800bdc0:	7afb      	ldrb	r3, [r7, #11]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	72fb      	strb	r3, [r7, #11]
      break;
 800bdc6:	e11e      	b.n	800c006 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	7c12      	ldrb	r2, [r2, #16]
 800bdd4:	f107 0108 	add.w	r1, r7, #8
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
 800bddc:	60f8      	str	r0, [r7, #12]
      break;
 800bdde:	e112      	b.n	800c006 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7c1b      	ldrb	r3, [r3, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10d      	bne.n	800be04 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf0:	f107 0208 	add.w	r2, r7, #8
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	4798      	blx	r3
 800bdf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	2202      	movs	r2, #2
 800be00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be02:	e100      	b.n	800c006 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0c:	f107 0208 	add.w	r2, r7, #8
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
 800be14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3301      	adds	r3, #1
 800be1a:	2202      	movs	r2, #2
 800be1c:	701a      	strb	r2, [r3, #0]
      break;
 800be1e:	e0f2      	b.n	800c006 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	885b      	ldrh	r3, [r3, #2]
 800be24:	b2db      	uxtb	r3, r3
 800be26:	2b05      	cmp	r3, #5
 800be28:	f200 80ac 	bhi.w	800bf84 <USBD_GetDescriptor+0x258>
 800be2c:	a201      	add	r2, pc, #4	@ (adr r2, 800be34 <USBD_GetDescriptor+0x108>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800be4d 	.word	0x0800be4d
 800be38:	0800be81 	.word	0x0800be81
 800be3c:	0800beb5 	.word	0x0800beb5
 800be40:	0800bee9 	.word	0x0800bee9
 800be44:	0800bf1d 	.word	0x0800bf1d
 800be48:	0800bf51 	.word	0x0800bf51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	7c12      	ldrb	r2, [r2, #16]
 800be64:	f107 0108 	add.w	r1, r7, #8
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be6e:	e091      	b.n	800bf94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 facb 	bl	800c40e <USBD_CtlError>
            err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
          break;
 800be7e:	e089      	b.n	800bf94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	7c12      	ldrb	r2, [r2, #16]
 800be98:	f107 0108 	add.w	r1, r7, #8
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bea2:	e077      	b.n	800bf94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fab1 	bl	800c40e <USBD_CtlError>
            err++;
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	3301      	adds	r3, #1
 800beb0:	72fb      	strb	r3, [r7, #11]
          break;
 800beb2:	e06f      	b.n	800bf94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	7c12      	ldrb	r2, [r2, #16]
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3
 800bed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bed6:	e05d      	b.n	800bf94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fa97 	bl	800c40e <USBD_CtlError>
            err++;
 800bee0:	7afb      	ldrb	r3, [r7, #11]
 800bee2:	3301      	adds	r3, #1
 800bee4:	72fb      	strb	r3, [r7, #11]
          break;
 800bee6:	e055      	b.n	800bf94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	7c12      	ldrb	r2, [r2, #16]
 800bf00:	f107 0108 	add.w	r1, r7, #8
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf0a:	e043      	b.n	800bf94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa7d 	bl	800c40e <USBD_CtlError>
            err++;
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	3301      	adds	r3, #1
 800bf18:	72fb      	strb	r3, [r7, #11]
          break;
 800bf1a:	e03b      	b.n	800bf94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf2e:	695b      	ldr	r3, [r3, #20]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	f107 0108 	add.w	r1, r7, #8
 800bf38:	4610      	mov	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf3e:	e029      	b.n	800bf94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fa63 	bl	800c40e <USBD_CtlError>
            err++;
 800bf48:	7afb      	ldrb	r3, [r7, #11]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf4e:	e021      	b.n	800bf94 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00b      	beq.n	800bf74 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	7c12      	ldrb	r2, [r2, #16]
 800bf68:	f107 0108 	add.w	r1, r7, #8
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	4798      	blx	r3
 800bf70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf72:	e00f      	b.n	800bf94 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fa49 	bl	800c40e <USBD_CtlError>
            err++;
 800bf7c:	7afb      	ldrb	r3, [r7, #11]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	72fb      	strb	r3, [r7, #11]
          break;
 800bf82:	e007      	b.n	800bf94 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 fa41 	bl	800c40e <USBD_CtlError>
          err++;
 800bf8c:	7afb      	ldrb	r3, [r7, #11]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf92:	bf00      	nop
      }
      break;
 800bf94:	e037      	b.n	800c006 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7c1b      	ldrb	r3, [r3, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d109      	bne.n	800bfb2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa6:	f107 0208 	add.w	r2, r7, #8
 800bfaa:	4610      	mov	r0, r2
 800bfac:	4798      	blx	r3
 800bfae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfb0:	e029      	b.n	800c006 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fa2a 	bl	800c40e <USBD_CtlError>
        err++;
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bfc0:	e021      	b.n	800c006 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7c1b      	ldrb	r3, [r3, #16]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10d      	bne.n	800bfe6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd2:	f107 0208 	add.w	r2, r7, #8
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	4798      	blx	r3
 800bfda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	2207      	movs	r2, #7
 800bfe2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfe4:	e00f      	b.n	800c006 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfe6:	6839      	ldr	r1, [r7, #0]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fa10 	bl	800c40e <USBD_CtlError>
        err++;
 800bfee:	7afb      	ldrb	r3, [r7, #11]
 800bff0:	3301      	adds	r3, #1
 800bff2:	72fb      	strb	r3, [r7, #11]
      break;
 800bff4:	e007      	b.n	800c006 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fa08 	bl	800c40e <USBD_CtlError>
      err++;
 800bffe:	7afb      	ldrb	r3, [r7, #11]
 800c000:	3301      	adds	r3, #1
 800c002:	72fb      	strb	r3, [r7, #11]
      break;
 800c004:	bf00      	nop
  }

  if (err != 0U)
 800c006:	7afb      	ldrb	r3, [r7, #11]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d11e      	bne.n	800c04a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	88db      	ldrh	r3, [r3, #6]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d016      	beq.n	800c042 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c014:	893b      	ldrh	r3, [r7, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00e      	beq.n	800c038 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	88da      	ldrh	r2, [r3, #6]
 800c01e:	893b      	ldrh	r3, [r7, #8]
 800c020:	4293      	cmp	r3, r2
 800c022:	bf28      	it	cs
 800c024:	4613      	movcs	r3, r2
 800c026:	b29b      	uxth	r3, r3
 800c028:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c02a:	893b      	ldrh	r3, [r7, #8]
 800c02c:	461a      	mov	r2, r3
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fa5d 	bl	800c4f0 <USBD_CtlSendData>
 800c036:	e009      	b.n	800c04c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f9e7 	bl	800c40e <USBD_CtlError>
 800c040:	e004      	b.n	800c04c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 faae 	bl	800c5a4 <USBD_CtlSendStatus>
 800c048:	e000      	b.n	800c04c <USBD_GetDescriptor+0x320>
    return;
 800c04a:	bf00      	nop
  }
}
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop

0800c054 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	889b      	ldrh	r3, [r3, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d131      	bne.n	800c0ca <USBD_SetAddress+0x76>
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	88db      	ldrh	r3, [r3, #6]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d12d      	bne.n	800c0ca <USBD_SetAddress+0x76>
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	885b      	ldrh	r3, [r3, #2]
 800c072:	2b7f      	cmp	r3, #127	@ 0x7f
 800c074:	d829      	bhi.n	800c0ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	885b      	ldrh	r3, [r3, #2]
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d104      	bne.n	800c098 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 f9bc 	bl	800c40e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c096:	e01d      	b.n	800c0d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	7bfa      	ldrb	r2, [r7, #15]
 800c09c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0a0:	7bfb      	ldrb	r3, [r7, #15]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 ff89 	bl	800cfbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fa7a 	bl	800c5a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0be:	e009      	b.n	800c0d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c8:	e004      	b.n	800c0d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f99e 	bl	800c40e <USBD_CtlError>
  }
}
 800c0d2:	bf00      	nop
 800c0d4:	bf00      	nop
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	885b      	ldrh	r3, [r3, #2]
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	4b4e      	ldr	r3, [pc, #312]	@ (800c22c <USBD_SetConfig+0x150>)
 800c0f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0f4:	4b4d      	ldr	r3, [pc, #308]	@ (800c22c <USBD_SetConfig+0x150>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d905      	bls.n	800c108 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f985 	bl	800c40e <USBD_CtlError>
    return USBD_FAIL;
 800c104:	2303      	movs	r3, #3
 800c106:	e08c      	b.n	800c222 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b02      	cmp	r3, #2
 800c112:	d002      	beq.n	800c11a <USBD_SetConfig+0x3e>
 800c114:	2b03      	cmp	r3, #3
 800c116:	d029      	beq.n	800c16c <USBD_SetConfig+0x90>
 800c118:	e075      	b.n	800c206 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c11a:	4b44      	ldr	r3, [pc, #272]	@ (800c22c <USBD_SetConfig+0x150>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d020      	beq.n	800c164 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c122:	4b42      	ldr	r3, [pc, #264]	@ (800c22c <USBD_SetConfig+0x150>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c12c:	4b3f      	ldr	r3, [pc, #252]	@ (800c22c <USBD_SetConfig+0x150>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7fe ffb9 	bl	800b0aa <USBD_SetClassConfig>
 800c138:	4603      	mov	r3, r0
 800c13a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c13c:	7bfb      	ldrb	r3, [r7, #15]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d008      	beq.n	800c154 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f962 	bl	800c40e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2202      	movs	r2, #2
 800c14e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c152:	e065      	b.n	800c220 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fa25 	bl	800c5a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2203      	movs	r2, #3
 800c15e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c162:	e05d      	b.n	800c220 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fa1d 	bl	800c5a4 <USBD_CtlSendStatus>
      break;
 800c16a:	e059      	b.n	800c220 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c16c:	4b2f      	ldr	r3, [pc, #188]	@ (800c22c <USBD_SetConfig+0x150>)
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d112      	bne.n	800c19a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2202      	movs	r2, #2
 800c178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c17c:	4b2b      	ldr	r3, [pc, #172]	@ (800c22c <USBD_SetConfig+0x150>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	461a      	mov	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c186:	4b29      	ldr	r3, [pc, #164]	@ (800c22c <USBD_SetConfig+0x150>)
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7fe ffa8 	bl	800b0e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fa06 	bl	800c5a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c198:	e042      	b.n	800c220 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c19a:	4b24      	ldr	r3, [pc, #144]	@ (800c22c <USBD_SetConfig+0x150>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d02a      	beq.n	800c1fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7fe ff96 	bl	800b0e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c1b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c22c <USBD_SetConfig+0x150>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c22c <USBD_SetConfig+0x150>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7fe ff6f 	bl	800b0aa <USBD_SetClassConfig>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00f      	beq.n	800c1f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f918 	bl	800c40e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7fe ff7b 	bl	800b0e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c1f4:	e014      	b.n	800c220 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f9d4 	bl	800c5a4 <USBD_CtlSendStatus>
      break;
 800c1fc:	e010      	b.n	800c220 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f9d0 	bl	800c5a4 <USBD_CtlSendStatus>
      break;
 800c204:	e00c      	b.n	800c220 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f900 	bl	800c40e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c20e:	4b07      	ldr	r3, [pc, #28]	@ (800c22c <USBD_SetConfig+0x150>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	4619      	mov	r1, r3
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7fe ff64 	bl	800b0e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c21a:	2303      	movs	r3, #3
 800c21c:	73fb      	strb	r3, [r7, #15]
      break;
 800c21e:	bf00      	nop
  }

  return ret;
 800c220:	7bfb      	ldrb	r3, [r7, #15]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000554 	.word	0x20000554

0800c230 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	88db      	ldrh	r3, [r3, #6]
 800c23e:	2b01      	cmp	r3, #1
 800c240:	d004      	beq.n	800c24c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c242:	6839      	ldr	r1, [r7, #0]
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f8e2 	bl	800c40e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c24a:	e023      	b.n	800c294 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c252:	b2db      	uxtb	r3, r3
 800c254:	2b02      	cmp	r3, #2
 800c256:	dc02      	bgt.n	800c25e <USBD_GetConfig+0x2e>
 800c258:	2b00      	cmp	r3, #0
 800c25a:	dc03      	bgt.n	800c264 <USBD_GetConfig+0x34>
 800c25c:	e015      	b.n	800c28a <USBD_GetConfig+0x5a>
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d00b      	beq.n	800c27a <USBD_GetConfig+0x4a>
 800c262:	e012      	b.n	800c28a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3308      	adds	r3, #8
 800c26e:	2201      	movs	r2, #1
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f93c 	bl	800c4f0 <USBD_CtlSendData>
        break;
 800c278:	e00c      	b.n	800c294 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3304      	adds	r3, #4
 800c27e:	2201      	movs	r2, #1
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f934 	bl	800c4f0 <USBD_CtlSendData>
        break;
 800c288:	e004      	b.n	800c294 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f8be 	bl	800c40e <USBD_CtlError>
        break;
 800c292:	bf00      	nop
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d81e      	bhi.n	800c2f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	88db      	ldrh	r3, [r3, #6]
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	d004      	beq.n	800c2c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f8a5 	bl	800c40e <USBD_CtlError>
        break;
 800c2c4:	e01a      	b.n	800c2fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d005      	beq.n	800c2e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	f043 0202 	orr.w	r2, r3, #2
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	330c      	adds	r3, #12
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f900 	bl	800c4f0 <USBD_CtlSendData>
      break;
 800c2f0:	e004      	b.n	800c2fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f88a 	bl	800c40e <USBD_CtlError>
      break;
 800c2fa:	bf00      	nop
  }
}
 800c2fc:	bf00      	nop
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	885b      	ldrh	r3, [r3, #2]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d107      	bne.n	800c326 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f940 	bl	800c5a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c324:	e013      	b.n	800c34e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	885b      	ldrh	r3, [r3, #2]
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d10b      	bne.n	800c346 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	889b      	ldrh	r3, [r3, #4]
 800c332:	0a1b      	lsrs	r3, r3, #8
 800c334:	b29b      	uxth	r3, r3
 800c336:	b2da      	uxtb	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f930 	bl	800c5a4 <USBD_CtlSendStatus>
}
 800c344:	e003      	b.n	800c34e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f860 	bl	800c40e <USBD_CtlError>
}
 800c34e:	bf00      	nop
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b082      	sub	sp, #8
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c366:	b2db      	uxtb	r3, r3
 800c368:	3b01      	subs	r3, #1
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d80b      	bhi.n	800c386 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	885b      	ldrh	r3, [r3, #2]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d10c      	bne.n	800c390 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f910 	bl	800c5a4 <USBD_CtlSendStatus>
      }
      break;
 800c384:	e004      	b.n	800c390 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 f840 	bl	800c40e <USBD_CtlError>
      break;
 800c38e:	e000      	b.n	800c392 <USBD_ClrFeature+0x3c>
      break;
 800c390:	bf00      	nop
  }
}
 800c392:	bf00      	nop
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	781a      	ldrb	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	781a      	ldrb	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff fa16 	bl	800b7f6 <SWAPBYTE>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3de:	68f8      	ldr	r0, [r7, #12]
 800c3e0:	f7ff fa09 	bl	800b7f6 <SWAPBYTE>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f7ff f9fc 	bl	800b7f6 <SWAPBYTE>
 800c3fe:	4603      	mov	r3, r0
 800c400:	461a      	mov	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	80da      	strh	r2, [r3, #6]
}
 800c406:	bf00      	nop
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b082      	sub	sp, #8
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c418:	2180      	movs	r1, #128	@ 0x80
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fd64 	bl	800cee8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c420:	2100      	movs	r1, #0
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fd60 	bl	800cee8 <USBD_LL_StallEP>
}
 800c428:	bf00      	nop
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c43c:	2300      	movs	r3, #0
 800c43e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d036      	beq.n	800c4b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c44a:	6938      	ldr	r0, [r7, #16]
 800c44c:	f000 f836 	bl	800c4bc <USBD_GetLen>
 800c450:	4603      	mov	r3, r0
 800c452:	3301      	adds	r3, #1
 800c454:	b29b      	uxth	r3, r3
 800c456:	005b      	lsls	r3, r3, #1
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	4413      	add	r3, r2
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	7812      	ldrb	r2, [r2, #0]
 800c468:	701a      	strb	r2, [r3, #0]
  idx++;
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	3301      	adds	r3, #1
 800c46e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	4413      	add	r3, r2
 800c476:	2203      	movs	r2, #3
 800c478:	701a      	strb	r2, [r3, #0]
  idx++;
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	3301      	adds	r3, #1
 800c47e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c480:	e013      	b.n	800c4aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c482:	7dfb      	ldrb	r3, [r7, #23]
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	4413      	add	r3, r2
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	7812      	ldrb	r2, [r2, #0]
 800c48c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	3301      	adds	r3, #1
 800c492:	613b      	str	r3, [r7, #16]
    idx++;
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	3301      	adds	r3, #1
 800c498:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	4413      	add	r3, r2
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c4a4:	7dfb      	ldrb	r3, [r7, #23]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1e7      	bne.n	800c482 <USBD_GetString+0x52>
 800c4b2:	e000      	b.n	800c4b6 <USBD_GetString+0x86>
    return;
 800c4b4:	bf00      	nop
  }
}
 800c4b6:	3718      	adds	r7, #24
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4cc:	e005      	b.n	800c4da <USBD_GetLen+0x1e>
  {
    len++;
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1f5      	bne.n	800c4ce <USBD_GetLen+0x12>
  }

  return len;
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2202      	movs	r2, #2
 800c500:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	2100      	movs	r1, #0
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f000 fd6f 	bl	800cffa <USBD_LL_Transmit>

  return USBD_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	2100      	movs	r1, #0
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 fd5e 	bl	800cffa <USBD_LL_Transmit>

  return USBD_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2203      	movs	r2, #3
 800c558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	2100      	movs	r1, #0
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f000 fd62 	bl	800d03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3710      	adds	r7, #16
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c582:	b580      	push	{r7, lr}
 800c584:	b084      	sub	sp, #16
 800c586:	af00      	add	r7, sp, #0
 800c588:	60f8      	str	r0, [r7, #12]
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	2100      	movs	r1, #0
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 fd51 	bl	800d03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2204      	movs	r2, #4
 800c5b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fd1d 	bl	800cffa <USBD_LL_Transmit>

  return USBD_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2205      	movs	r2, #5
 800c5d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5da:	2300      	movs	r3, #0
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2100      	movs	r1, #0
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fd2b 	bl	800d03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b087      	sub	sp, #28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c5fe:	2301      	movs	r3, #1
 800c600:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c606:	4b1f      	ldr	r3, [pc, #124]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c608:	7a5b      	ldrb	r3, [r3, #9]
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d131      	bne.n	800c674 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c610:	4b1c      	ldr	r3, [pc, #112]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c612:	7a5b      	ldrb	r3, [r3, #9]
 800c614:	b2db      	uxtb	r3, r3
 800c616:	461a      	mov	r2, r3
 800c618:	4b1a      	ldr	r3, [pc, #104]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c61a:	2100      	movs	r1, #0
 800c61c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c61e:	4b19      	ldr	r3, [pc, #100]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c620:	7a5b      	ldrb	r3, [r3, #9]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	4a17      	ldr	r2, [pc, #92]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c62e:	4b15      	ldr	r3, [pc, #84]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c630:	7a5b      	ldrb	r3, [r3, #9]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	461a      	mov	r2, r3
 800c636:	4b13      	ldr	r3, [pc, #76]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c638:	4413      	add	r3, r2
 800c63a:	79fa      	ldrb	r2, [r7, #7]
 800c63c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c63e:	4b11      	ldr	r3, [pc, #68]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c640:	7a5b      	ldrb	r3, [r3, #9]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	1c5a      	adds	r2, r3, #1
 800c646:	b2d1      	uxtb	r1, r2
 800c648:	4a0e      	ldr	r2, [pc, #56]	@ (800c684 <FATFS_LinkDriverEx+0x94>)
 800c64a:	7251      	strb	r1, [r2, #9]
 800c64c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c64e:	7dbb      	ldrb	r3, [r7, #22]
 800c650:	3330      	adds	r3, #48	@ 0x30
 800c652:	b2da      	uxtb	r2, r3
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	3301      	adds	r3, #1
 800c65c:	223a      	movs	r2, #58	@ 0x3a
 800c65e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	3302      	adds	r3, #2
 800c664:	222f      	movs	r2, #47	@ 0x2f
 800c666:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	3303      	adds	r3, #3
 800c66c:	2200      	movs	r2, #0
 800c66e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c674:	7dfb      	ldrb	r3, [r7, #23]
}
 800c676:	4618      	mov	r0, r3
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	20000558 	.word	0x20000558

0800c688 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c692:	2200      	movs	r2, #0
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff ffaa 	bl	800c5f0 <FATFS_LinkDriverEx>
 800c69c:	4603      	mov	r3, r0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
	...

0800c6a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4912      	ldr	r1, [pc, #72]	@ (800c6f8 <MX_USB_DEVICE_Init+0x50>)
 800c6b0:	4812      	ldr	r0, [pc, #72]	@ (800c6fc <MX_USB_DEVICE_Init+0x54>)
 800c6b2:	f7fe fc7d 	bl	800afb0 <USBD_Init>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d001      	beq.n	800c6c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c6bc:	f7f5 f914 	bl	80018e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c6c0:	490f      	ldr	r1, [pc, #60]	@ (800c700 <MX_USB_DEVICE_Init+0x58>)
 800c6c2:	480e      	ldr	r0, [pc, #56]	@ (800c6fc <MX_USB_DEVICE_Init+0x54>)
 800c6c4:	f7fe fca4 	bl	800b010 <USBD_RegisterClass>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c6ce:	f7f5 f90b 	bl	80018e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c6d2:	490c      	ldr	r1, [pc, #48]	@ (800c704 <MX_USB_DEVICE_Init+0x5c>)
 800c6d4:	4809      	ldr	r0, [pc, #36]	@ (800c6fc <MX_USB_DEVICE_Init+0x54>)
 800c6d6:	f7fe fb9b 	bl	800ae10 <USBD_CDC_RegisterInterface>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d001      	beq.n	800c6e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c6e0:	f7f5 f902 	bl	80018e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c6e4:	4805      	ldr	r0, [pc, #20]	@ (800c6fc <MX_USB_DEVICE_Init+0x54>)
 800c6e6:	f7fe fcc9 	bl	800b07c <USBD_Start>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c6f0:	f7f5 f8fa 	bl	80018e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c6f4:	bf00      	nop
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	200000ac 	.word	0x200000ac
 800c6fc:	20000564 	.word	0x20000564
 800c700:	20000018 	.word	0x20000018
 800c704:	20000098 	.word	0x20000098

0800c708 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c70c:	2200      	movs	r2, #0
 800c70e:	4905      	ldr	r1, [pc, #20]	@ (800c724 <CDC_Init_FS+0x1c>)
 800c710:	4805      	ldr	r0, [pc, #20]	@ (800c728 <CDC_Init_FS+0x20>)
 800c712:	f7fe fb97 	bl	800ae44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c716:	4905      	ldr	r1, [pc, #20]	@ (800c72c <CDC_Init_FS+0x24>)
 800c718:	4803      	ldr	r0, [pc, #12]	@ (800c728 <CDC_Init_FS+0x20>)
 800c71a:	f7fe fbb5 	bl	800ae88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c71e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c720:	4618      	mov	r0, r3
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20001040 	.word	0x20001040
 800c728:	20000564 	.word	0x20000564
 800c72c:	20000840 	.word	0x20000840

0800c730 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c730:	b480      	push	{r7}
 800c732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c734:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c736:	4618      	mov	r0, r3
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	6039      	str	r1, [r7, #0]
 800c74a:	71fb      	strb	r3, [r7, #7]
 800c74c:	4613      	mov	r3, r2
 800c74e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c750:	79fb      	ldrb	r3, [r7, #7]
 800c752:	2b23      	cmp	r3, #35	@ 0x23
 800c754:	d84a      	bhi.n	800c7ec <CDC_Control_FS+0xac>
 800c756:	a201      	add	r2, pc, #4	@ (adr r2, 800c75c <CDC_Control_FS+0x1c>)
 800c758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75c:	0800c7ed 	.word	0x0800c7ed
 800c760:	0800c7ed 	.word	0x0800c7ed
 800c764:	0800c7ed 	.word	0x0800c7ed
 800c768:	0800c7ed 	.word	0x0800c7ed
 800c76c:	0800c7ed 	.word	0x0800c7ed
 800c770:	0800c7ed 	.word	0x0800c7ed
 800c774:	0800c7ed 	.word	0x0800c7ed
 800c778:	0800c7ed 	.word	0x0800c7ed
 800c77c:	0800c7ed 	.word	0x0800c7ed
 800c780:	0800c7ed 	.word	0x0800c7ed
 800c784:	0800c7ed 	.word	0x0800c7ed
 800c788:	0800c7ed 	.word	0x0800c7ed
 800c78c:	0800c7ed 	.word	0x0800c7ed
 800c790:	0800c7ed 	.word	0x0800c7ed
 800c794:	0800c7ed 	.word	0x0800c7ed
 800c798:	0800c7ed 	.word	0x0800c7ed
 800c79c:	0800c7ed 	.word	0x0800c7ed
 800c7a0:	0800c7ed 	.word	0x0800c7ed
 800c7a4:	0800c7ed 	.word	0x0800c7ed
 800c7a8:	0800c7ed 	.word	0x0800c7ed
 800c7ac:	0800c7ed 	.word	0x0800c7ed
 800c7b0:	0800c7ed 	.word	0x0800c7ed
 800c7b4:	0800c7ed 	.word	0x0800c7ed
 800c7b8:	0800c7ed 	.word	0x0800c7ed
 800c7bc:	0800c7ed 	.word	0x0800c7ed
 800c7c0:	0800c7ed 	.word	0x0800c7ed
 800c7c4:	0800c7ed 	.word	0x0800c7ed
 800c7c8:	0800c7ed 	.word	0x0800c7ed
 800c7cc:	0800c7ed 	.word	0x0800c7ed
 800c7d0:	0800c7ed 	.word	0x0800c7ed
 800c7d4:	0800c7ed 	.word	0x0800c7ed
 800c7d8:	0800c7ed 	.word	0x0800c7ed
 800c7dc:	0800c7ed 	.word	0x0800c7ed
 800c7e0:	0800c7ed 	.word	0x0800c7ed
 800c7e4:	0800c7ed 	.word	0x0800c7ed
 800c7e8:	0800c7ed 	.word	0x0800c7ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c7ec:	bf00      	nop
  }

  return (USBD_OK);
 800c7ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c806:	6879      	ldr	r1, [r7, #4]
 800c808:	4805      	ldr	r0, [pc, #20]	@ (800c820 <CDC_Receive_FS+0x24>)
 800c80a:	f7fe fb3d 	bl	800ae88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c80e:	4804      	ldr	r0, [pc, #16]	@ (800c820 <CDC_Receive_FS+0x24>)
 800c810:	f7fe fb98 	bl	800af44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c814:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c816:	4618      	mov	r0, r3
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	20000564 	.word	0x20000564

0800c824 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c834:	4b0d      	ldr	r3, [pc, #52]	@ (800c86c <CDC_Transmit_FS+0x48>)
 800c836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c83a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c846:	2301      	movs	r3, #1
 800c848:	e00b      	b.n	800c862 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c84a:	887b      	ldrh	r3, [r7, #2]
 800c84c:	461a      	mov	r2, r3
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	4806      	ldr	r0, [pc, #24]	@ (800c86c <CDC_Transmit_FS+0x48>)
 800c852:	f7fe faf7 	bl	800ae44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c856:	4805      	ldr	r0, [pc, #20]	@ (800c86c <CDC_Transmit_FS+0x48>)
 800c858:	f7fe fb34 	bl	800aec4 <USBD_CDC_TransmitPacket>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c860:	7bfb      	ldrb	r3, [r7, #15]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20000564 	.word	0x20000564

0800c870 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c886:	4618      	mov	r0, r3
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
	...

0800c894 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2212      	movs	r2, #18
 800c8a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c8a6:	4b03      	ldr	r3, [pc, #12]	@ (800c8b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	200000cc 	.word	0x200000cc

0800c8b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	6039      	str	r1, [r7, #0]
 800c8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2204      	movs	r2, #4
 800c8c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8ca:	4b03      	ldr	r3, [pc, #12]	@ (800c8d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr
 800c8d8:	200000ec 	.word	0x200000ec

0800c8dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	6039      	str	r1, [r7, #0]
 800c8e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d105      	bne.n	800c8fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	4907      	ldr	r1, [pc, #28]	@ (800c910 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8f2:	4808      	ldr	r0, [pc, #32]	@ (800c914 <USBD_FS_ProductStrDescriptor+0x38>)
 800c8f4:	f7ff fd9c 	bl	800c430 <USBD_GetString>
 800c8f8:	e004      	b.n	800c904 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	4904      	ldr	r1, [pc, #16]	@ (800c910 <USBD_FS_ProductStrDescriptor+0x34>)
 800c8fe:	4805      	ldr	r0, [pc, #20]	@ (800c914 <USBD_FS_ProductStrDescriptor+0x38>)
 800c900:	f7ff fd96 	bl	800c430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c904:	4b02      	ldr	r3, [pc, #8]	@ (800c910 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20001840 	.word	0x20001840
 800c914:	0800db78 	.word	0x0800db78

0800c918 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	4904      	ldr	r1, [pc, #16]	@ (800c938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c928:	4804      	ldr	r0, [pc, #16]	@ (800c93c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c92a:	f7ff fd81 	bl	800c430 <USBD_GetString>
  return USBD_StrDesc;
 800c92e:	4b02      	ldr	r3, [pc, #8]	@ (800c938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	20001840 	.word	0x20001840
 800c93c:	0800db8c 	.word	0x0800db8c

0800c940 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	4603      	mov	r3, r0
 800c948:	6039      	str	r1, [r7, #0]
 800c94a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	221a      	movs	r2, #26
 800c950:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c952:	f000 f855 	bl	800ca00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c956:	4b02      	ldr	r3, [pc, #8]	@ (800c960 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	200000f0 	.word	0x200000f0

0800c964 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	6039      	str	r1, [r7, #0]
 800c96e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d105      	bne.n	800c982 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	4907      	ldr	r1, [pc, #28]	@ (800c998 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c97a:	4808      	ldr	r0, [pc, #32]	@ (800c99c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c97c:	f7ff fd58 	bl	800c430 <USBD_GetString>
 800c980:	e004      	b.n	800c98c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	4904      	ldr	r1, [pc, #16]	@ (800c998 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c986:	4805      	ldr	r0, [pc, #20]	@ (800c99c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c988:	f7ff fd52 	bl	800c430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c98c:	4b02      	ldr	r3, [pc, #8]	@ (800c998 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20001840 	.word	0x20001840
 800c99c:	0800dba0 	.word	0x0800dba0

0800c9a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	6039      	str	r1, [r7, #0]
 800c9aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d105      	bne.n	800c9be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	4907      	ldr	r1, [pc, #28]	@ (800c9d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9b6:	4808      	ldr	r0, [pc, #32]	@ (800c9d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9b8:	f7ff fd3a 	bl	800c430 <USBD_GetString>
 800c9bc:	e004      	b.n	800c9c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	4904      	ldr	r1, [pc, #16]	@ (800c9d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c9c2:	4805      	ldr	r0, [pc, #20]	@ (800c9d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c9c4:	f7ff fd34 	bl	800c430 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9c8:	4b02      	ldr	r3, [pc, #8]	@ (800c9d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20001840 	.word	0x20001840
 800c9d8:	0800dbac 	.word	0x0800dbac

0800c9dc <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	6039      	str	r1, [r7, #0]
 800c9e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	220c      	movs	r2, #12
 800c9ec:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c9ee:	4b03      	ldr	r3, [pc, #12]	@ (800c9fc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	200000e0 	.word	0x200000e0

0800ca00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca06:	4b0f      	ldr	r3, [pc, #60]	@ (800ca44 <Get_SerialNum+0x44>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ca48 <Get_SerialNum+0x48>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca12:	4b0e      	ldr	r3, [pc, #56]	@ (800ca4c <Get_SerialNum+0x4c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca26:	2208      	movs	r2, #8
 800ca28:	4909      	ldr	r1, [pc, #36]	@ (800ca50 <Get_SerialNum+0x50>)
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f000 f814 	bl	800ca58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca30:	2204      	movs	r2, #4
 800ca32:	4908      	ldr	r1, [pc, #32]	@ (800ca54 <Get_SerialNum+0x54>)
 800ca34:	68b8      	ldr	r0, [r7, #8]
 800ca36:	f000 f80f 	bl	800ca58 <IntToUnicode>
  }
}
 800ca3a:	bf00      	nop
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	1fff7a10 	.word	0x1fff7a10
 800ca48:	1fff7a14 	.word	0x1fff7a14
 800ca4c:	1fff7a18 	.word	0x1fff7a18
 800ca50:	200000f2 	.word	0x200000f2
 800ca54:	20000102 	.word	0x20000102

0800ca58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	75fb      	strb	r3, [r7, #23]
 800ca6e:	e027      	b.n	800cac0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	0f1b      	lsrs	r3, r3, #28
 800ca74:	2b09      	cmp	r3, #9
 800ca76:	d80b      	bhi.n	800ca90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	0f1b      	lsrs	r3, r3, #28
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	4619      	mov	r1, r3
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	440b      	add	r3, r1
 800ca88:	3230      	adds	r2, #48	@ 0x30
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]
 800ca8e:	e00a      	b.n	800caa6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	0f1b      	lsrs	r3, r3, #28
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
 800ca98:	005b      	lsls	r3, r3, #1
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	440b      	add	r3, r1
 800caa0:	3237      	adds	r2, #55	@ 0x37
 800caa2:	b2d2      	uxtb	r2, r2
 800caa4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	011b      	lsls	r3, r3, #4
 800caaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	3301      	adds	r3, #1
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	4413      	add	r3, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800caba:	7dfb      	ldrb	r3, [r7, #23]
 800cabc:	3301      	adds	r3, #1
 800cabe:	75fb      	strb	r3, [r7, #23]
 800cac0:	7dfa      	ldrb	r2, [r7, #23]
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d3d3      	bcc.n	800ca70 <IntToUnicode+0x18>
  }
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	371c      	adds	r7, #28
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
	...

0800cad8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b0a0      	sub	sp, #128	@ 0x80
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cae0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cae4:	2200      	movs	r2, #0
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	605a      	str	r2, [r3, #4]
 800caea:	609a      	str	r2, [r3, #8]
 800caec:	60da      	str	r2, [r3, #12]
 800caee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800caf0:	f107 0310 	add.w	r3, r7, #16
 800caf4:	225c      	movs	r2, #92	@ 0x5c
 800caf6:	2100      	movs	r1, #0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fb99 	bl	800d230 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb06:	d149      	bne.n	800cb9c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cb08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cb12:	f107 0310 	add.w	r3, r7, #16
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7f8 fe60 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d001      	beq.n	800cb26 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800cb22:	f7f4 fee1 	bl	80018e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb26:	2300      	movs	r3, #0
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	4b1e      	ldr	r3, [pc, #120]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb2e:	4a1d      	ldr	r2, [pc, #116]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb30:	f043 0301 	orr.w	r3, r3, #1
 800cb34:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb36:	4b1b      	ldr	r3, [pc, #108]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	60fb      	str	r3, [r7, #12]
 800cb40:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cb42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cb46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb48:	2302      	movs	r3, #2
 800cb4a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb50:	2303      	movs	r3, #3
 800cb52:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cb54:	230a      	movs	r3, #10
 800cb56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	4812      	ldr	r0, [pc, #72]	@ (800cba8 <HAL_PCD_MspInit+0xd0>)
 800cb60:	f7f6 f8a2 	bl	8002ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cb64:	4b0f      	ldr	r3, [pc, #60]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb68:	4a0e      	ldr	r2, [pc, #56]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb6e:	6353      	str	r3, [r2, #52]	@ 0x34
 800cb70:	2300      	movs	r3, #0
 800cb72:	60bb      	str	r3, [r7, #8]
 800cb74:	4b0b      	ldr	r3, [pc, #44]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb78:	4a0a      	ldr	r2, [pc, #40]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb7e:	6453      	str	r3, [r2, #68]	@ 0x44
 800cb80:	4b08      	ldr	r3, [pc, #32]	@ (800cba4 <HAL_PCD_MspInit+0xcc>)
 800cb82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb88:	60bb      	str	r3, [r7, #8]
 800cb8a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2100      	movs	r1, #0
 800cb90:	2043      	movs	r0, #67	@ 0x43
 800cb92:	f7f5 fbce 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cb96:	2043      	movs	r0, #67	@ 0x43
 800cb98:	f7f5 fbe7 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb9c:	bf00      	nop
 800cb9e:	3780      	adds	r7, #128	@ 0x80
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	40023800 	.word	0x40023800
 800cba8:	40020000 	.word	0x40020000

0800cbac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4610      	mov	r0, r2
 800cbc4:	f7fe faa7 	bl	800b116 <USBD_LL_SetupStage>
}
 800cbc8:	bf00      	nop
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cbe2:	78fa      	ldrb	r2, [r7, #3]
 800cbe4:	6879      	ldr	r1, [r7, #4]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	4413      	add	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	440b      	add	r3, r1
 800cbf0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	78fb      	ldrb	r3, [r7, #3]
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	f7fe fae1 	bl	800b1c0 <USBD_LL_DataOutStage>
}
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b082      	sub	sp, #8
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	460b      	mov	r3, r1
 800cc10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cc18:	78fa      	ldrb	r2, [r7, #3]
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	00db      	lsls	r3, r3, #3
 800cc20:	4413      	add	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	440b      	add	r3, r1
 800cc26:	3320      	adds	r3, #32
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	78fb      	ldrb	r3, [r7, #3]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	f7fe fb7a 	bl	800b326 <USBD_LL_DataInStage>
}
 800cc32:	bf00      	nop
 800cc34:	3708      	adds	r7, #8
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b082      	sub	sp, #8
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fe fcb4 	bl	800b5b6 <USBD_LL_SOF>
}
 800cc4e:	bf00      	nop
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b084      	sub	sp, #16
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	79db      	ldrb	r3, [r3, #7]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d102      	bne.n	800cc70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]
 800cc6e:	e008      	b.n	800cc82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	79db      	ldrb	r3, [r3, #7]
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d102      	bne.n	800cc7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	73fb      	strb	r3, [r7, #15]
 800cc7c:	e001      	b.n	800cc82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cc7e:	f7f4 fe33 	bl	80018e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc88:	7bfa      	ldrb	r2, [r7, #15]
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fe fc4e 	bl	800b52e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fe fbf6 	bl	800b48a <USBD_LL_Reset>
}
 800cc9e:	bf00      	nop
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7fe fc49 	bl	800b54e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	6812      	ldr	r2, [r2, #0]
 800ccca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ccce:	f043 0301 	orr.w	r3, r3, #1
 800ccd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	7adb      	ldrb	r3, [r3, #11]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d005      	beq.n	800cce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ccdc:	4b04      	ldr	r3, [pc, #16]	@ (800ccf0 <HAL_PCD_SuspendCallback+0x48>)
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	4a03      	ldr	r2, [pc, #12]	@ (800ccf0 <HAL_PCD_SuspendCallback+0x48>)
 800cce2:	f043 0306 	orr.w	r3, r3, #6
 800cce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	e000ed00 	.word	0xe000ed00

0800ccf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fe fc3f 	bl	800b586 <USBD_LL_Resume>
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd22:	78fa      	ldrb	r2, [r7, #3]
 800cd24:	4611      	mov	r1, r2
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe fc97 	bl	800b65a <USBD_LL_IsoOUTIncomplete>
}
 800cd2c:	bf00      	nop
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd46:	78fa      	ldrb	r2, [r7, #3]
 800cd48:	4611      	mov	r1, r2
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe fc53 	bl	800b5f6 <USBD_LL_IsoINIncomplete>
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe fca9 	bl	800b6be <USBD_LL_DevConnected>
}
 800cd6c:	bf00      	nop
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fe fca6 	bl	800b6d4 <USBD_LL_DevDisconnected>
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d13c      	bne.n	800ce1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cda0:	4a20      	ldr	r2, [pc, #128]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a1e      	ldr	r2, [pc, #120]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cdb0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cdb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cdb8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdba:	2206      	movs	r2, #6
 800cdbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cdbe:	4b19      	ldr	r3, [pc, #100]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdc0:	2202      	movs	r2, #2
 800cdc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cdc4:	4b17      	ldr	r3, [pc, #92]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdca:	4b16      	ldr	r3, [pc, #88]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdcc:	2202      	movs	r2, #2
 800cdce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cdd0:	4b14      	ldr	r3, [pc, #80]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cdd6:	4b13      	ldr	r3, [pc, #76]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cddc:	4b11      	ldr	r3, [pc, #68]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdde:	2200      	movs	r2, #0
 800cde0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cde2:	4b10      	ldr	r3, [pc, #64]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cde8:	4b0e      	ldr	r3, [pc, #56]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdea:	2200      	movs	r2, #0
 800cdec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cdee:	480d      	ldr	r0, [pc, #52]	@ (800ce24 <USBD_LL_Init+0x94>)
 800cdf0:	f7f7 f93e 	bl	8004070 <HAL_PCD_Init>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cdfa:	f7f4 fd75 	bl	80018e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cdfe:	2180      	movs	r1, #128	@ 0x80
 800ce00:	4808      	ldr	r0, [pc, #32]	@ (800ce24 <USBD_LL_Init+0x94>)
 800ce02:	f7f8 fb9c 	bl	800553e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ce06:	2240      	movs	r2, #64	@ 0x40
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4806      	ldr	r0, [pc, #24]	@ (800ce24 <USBD_LL_Init+0x94>)
 800ce0c:	f7f8 fb50 	bl	80054b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ce10:	2280      	movs	r2, #128	@ 0x80
 800ce12:	2101      	movs	r1, #1
 800ce14:	4803      	ldr	r0, [pc, #12]	@ (800ce24 <USBD_LL_Init+0x94>)
 800ce16:	f7f8 fb4b 	bl	80054b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	20001a40 	.word	0x20001a40

0800ce28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce34:	2300      	movs	r3, #0
 800ce36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7f7 fa2c 	bl	800429c <HAL_PCD_Start>
 800ce44:	4603      	mov	r3, r0
 800ce46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 f990 	bl	800d170 <USBD_Get_USB_Status>
 800ce50:	4603      	mov	r3, r0
 800ce52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b084      	sub	sp, #16
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
 800ce66:	4608      	mov	r0, r1
 800ce68:	4611      	mov	r1, r2
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	70fb      	strb	r3, [r7, #3]
 800ce70:	460b      	mov	r3, r1
 800ce72:	70bb      	strb	r3, [r7, #2]
 800ce74:	4613      	mov	r3, r2
 800ce76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ce86:	78bb      	ldrb	r3, [r7, #2]
 800ce88:	883a      	ldrh	r2, [r7, #0]
 800ce8a:	78f9      	ldrb	r1, [r7, #3]
 800ce8c:	f7f7 ff2d 	bl	8004cea <HAL_PCD_EP_Open>
 800ce90:	4603      	mov	r3, r0
 800ce92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 f96a 	bl	800d170 <USBD_Get_USB_Status>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b084      	sub	sp, #16
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceba:	2300      	movs	r3, #0
 800cebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cec4:	78fa      	ldrb	r2, [r7, #3]
 800cec6:	4611      	mov	r1, r2
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7f7 ff76 	bl	8004dba <HAL_PCD_EP_Close>
 800cece:	4603      	mov	r3, r0
 800ced0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ced2:	7bfb      	ldrb	r3, [r7, #15]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 f94b 	bl	800d170 <USBD_Get_USB_Status>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cede:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7f8 f82e 	bl	8004f68 <HAL_PCD_EP_SetStall>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f92c 	bl	800d170 <USBD_Get_USB_Status>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b084      	sub	sp, #16
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf36:	2300      	movs	r3, #0
 800cf38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf40:	78fa      	ldrb	r2, [r7, #3]
 800cf42:	4611      	mov	r1, r2
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7f8 f872 	bl	800502e <HAL_PCD_EP_ClrStall>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
 800cf50:	4618      	mov	r0, r3
 800cf52:	f000 f90d 	bl	800d170 <USBD_Get_USB_Status>
 800cf56:	4603      	mov	r3, r0
 800cf58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	da0b      	bge.n	800cf98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf80:	78fb      	ldrb	r3, [r7, #3]
 800cf82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf86:	68f9      	ldr	r1, [r7, #12]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	00db      	lsls	r3, r3, #3
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	440b      	add	r3, r1
 800cf92:	3316      	adds	r3, #22
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	e00b      	b.n	800cfb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf9e:	68f9      	ldr	r1, [r7, #12]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	00db      	lsls	r3, r3, #3
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	440b      	add	r3, r1
 800cfaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800cfae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfd6:	78fa      	ldrb	r2, [r7, #3]
 800cfd8:	4611      	mov	r1, r2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7f7 fe61 	bl	8004ca2 <HAL_PCD_SetAddress>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfe4:	7bfb      	ldrb	r3, [r7, #15]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 f8c2 	bl	800d170 <USBD_Get_USB_Status>
 800cfec:	4603      	mov	r3, r0
 800cfee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b086      	sub	sp, #24
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	603b      	str	r3, [r7, #0]
 800d006:	460b      	mov	r3, r1
 800d008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d00a:	2300      	movs	r3, #0
 800d00c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d00e:	2300      	movs	r3, #0
 800d010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d018:	7af9      	ldrb	r1, [r7, #11]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	f7f7 ff69 	bl	8004ef4 <HAL_PCD_EP_Transmit>
 800d022:	4603      	mov	r3, r0
 800d024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d026:	7dfb      	ldrb	r3, [r7, #23]
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 f8a1 	bl	800d170 <USBD_Get_USB_Status>
 800d02e:	4603      	mov	r3, r0
 800d030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d032:	7dbb      	ldrb	r3, [r7, #22]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	607a      	str	r2, [r7, #4]
 800d046:	603b      	str	r3, [r7, #0]
 800d048:	460b      	mov	r3, r1
 800d04a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d04c:	2300      	movs	r3, #0
 800d04e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d05a:	7af9      	ldrb	r1, [r7, #11]
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	f7f7 fef5 	bl	8004e4e <HAL_PCD_EP_Receive>
 800d064:	4603      	mov	r3, r0
 800d066:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d068:	7dfb      	ldrb	r3, [r7, #23]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 f880 	bl	800d170 <USBD_Get_USB_Status>
 800d070:	4603      	mov	r3, r0
 800d072:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d074:	7dbb      	ldrb	r3, [r7, #22]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b082      	sub	sp, #8
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d090:	78fa      	ldrb	r2, [r7, #3]
 800d092:	4611      	mov	r1, r2
 800d094:	4618      	mov	r0, r3
 800d096:	f7f7 ff15 	bl	8004ec4 <HAL_PCD_EP_GetRxCount>
 800d09a:	4603      	mov	r3, r0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d002      	beq.n	800d0bc <HAL_PCDEx_LPM_Callback+0x18>
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d01f      	beq.n	800d0fa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d0ba:	e03b      	b.n	800d134 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7adb      	ldrb	r3, [r3, #11]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d007      	beq.n	800d0d4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d0c4:	f7f4 fba4 	bl	8001810 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0c8:	4b1c      	ldr	r3, [pc, #112]	@ (800d13c <HAL_PCDEx_LPM_Callback+0x98>)
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d13c <HAL_PCDEx_LPM_Callback+0x98>)
 800d0ce:	f023 0306 	bic.w	r3, r3, #6
 800d0d2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	6812      	ldr	r2, [r2, #0]
 800d0e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d0e6:	f023 0301 	bic.w	r3, r3, #1
 800d0ea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fe fa47 	bl	800b586 <USBD_LL_Resume>
    break;
 800d0f8:	e01c      	b.n	800d134 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	6812      	ldr	r2, [r2, #0]
 800d108:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d10c:	f043 0301 	orr.w	r3, r3, #1
 800d110:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fa18 	bl	800b54e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	7adb      	ldrb	r3, [r3, #11]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d005      	beq.n	800d132 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d126:	4b05      	ldr	r3, [pc, #20]	@ (800d13c <HAL_PCDEx_LPM_Callback+0x98>)
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	4a04      	ldr	r2, [pc, #16]	@ (800d13c <HAL_PCDEx_LPM_Callback+0x98>)
 800d12c:	f043 0306 	orr.w	r3, r3, #6
 800d130:	6113      	str	r3, [r2, #16]
    break;
 800d132:	bf00      	nop
}
 800d134:	bf00      	nop
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	e000ed00 	.word	0xe000ed00

0800d140 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d148:	4b03      	ldr	r3, [pc, #12]	@ (800d158 <USBD_static_malloc+0x18>)
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	370c      	adds	r7, #12
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	20001f24 	.word	0x20001f24

0800d15c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]

}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d170:	b480      	push	{r7}
 800d172:	b085      	sub	sp, #20
 800d174:	af00      	add	r7, sp, #0
 800d176:	4603      	mov	r3, r0
 800d178:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d17e:	79fb      	ldrb	r3, [r7, #7]
 800d180:	2b03      	cmp	r3, #3
 800d182:	d817      	bhi.n	800d1b4 <USBD_Get_USB_Status+0x44>
 800d184:	a201      	add	r2, pc, #4	@ (adr r2, 800d18c <USBD_Get_USB_Status+0x1c>)
 800d186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18a:	bf00      	nop
 800d18c:	0800d19d 	.word	0x0800d19d
 800d190:	0800d1a3 	.word	0x0800d1a3
 800d194:	0800d1a9 	.word	0x0800d1a9
 800d198:	0800d1af 	.word	0x0800d1af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a0:	e00b      	b.n	800d1ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a6:	e008      	b.n	800d1ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ac:	e005      	b.n	800d1ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b2:	e002      	b.n	800d1ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1b4:	2303      	movs	r3, #3
 800d1b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b8:	bf00      	nop
  }
  return usb_status;
 800d1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <sniprintf>:
 800d1c8:	b40c      	push	{r2, r3}
 800d1ca:	b530      	push	{r4, r5, lr}
 800d1cc:	4b17      	ldr	r3, [pc, #92]	@ (800d22c <sniprintf+0x64>)
 800d1ce:	1e0c      	subs	r4, r1, #0
 800d1d0:	681d      	ldr	r5, [r3, #0]
 800d1d2:	b09d      	sub	sp, #116	@ 0x74
 800d1d4:	da08      	bge.n	800d1e8 <sniprintf+0x20>
 800d1d6:	238b      	movs	r3, #139	@ 0x8b
 800d1d8:	602b      	str	r3, [r5, #0]
 800d1da:	f04f 30ff 	mov.w	r0, #4294967295
 800d1de:	b01d      	add	sp, #116	@ 0x74
 800d1e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1e4:	b002      	add	sp, #8
 800d1e6:	4770      	bx	lr
 800d1e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d1ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d1f0:	bf14      	ite	ne
 800d1f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d1f6:	4623      	moveq	r3, r4
 800d1f8:	9304      	str	r3, [sp, #16]
 800d1fa:	9307      	str	r3, [sp, #28]
 800d1fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d200:	9002      	str	r0, [sp, #8]
 800d202:	9006      	str	r0, [sp, #24]
 800d204:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d208:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d20a:	ab21      	add	r3, sp, #132	@ 0x84
 800d20c:	a902      	add	r1, sp, #8
 800d20e:	4628      	mov	r0, r5
 800d210:	9301      	str	r3, [sp, #4]
 800d212:	f000 f995 	bl	800d540 <_svfiprintf_r>
 800d216:	1c43      	adds	r3, r0, #1
 800d218:	bfbc      	itt	lt
 800d21a:	238b      	movlt	r3, #139	@ 0x8b
 800d21c:	602b      	strlt	r3, [r5, #0]
 800d21e:	2c00      	cmp	r4, #0
 800d220:	d0dd      	beq.n	800d1de <sniprintf+0x16>
 800d222:	9b02      	ldr	r3, [sp, #8]
 800d224:	2200      	movs	r2, #0
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	e7d9      	b.n	800d1de <sniprintf+0x16>
 800d22a:	bf00      	nop
 800d22c:	2000010c 	.word	0x2000010c

0800d230 <memset>:
 800d230:	4402      	add	r2, r0
 800d232:	4603      	mov	r3, r0
 800d234:	4293      	cmp	r3, r2
 800d236:	d100      	bne.n	800d23a <memset+0xa>
 800d238:	4770      	bx	lr
 800d23a:	f803 1b01 	strb.w	r1, [r3], #1
 800d23e:	e7f9      	b.n	800d234 <memset+0x4>

0800d240 <__errno>:
 800d240:	4b01      	ldr	r3, [pc, #4]	@ (800d248 <__errno+0x8>)
 800d242:	6818      	ldr	r0, [r3, #0]
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	2000010c 	.word	0x2000010c

0800d24c <__libc_init_array>:
 800d24c:	b570      	push	{r4, r5, r6, lr}
 800d24e:	4d0d      	ldr	r5, [pc, #52]	@ (800d284 <__libc_init_array+0x38>)
 800d250:	4c0d      	ldr	r4, [pc, #52]	@ (800d288 <__libc_init_array+0x3c>)
 800d252:	1b64      	subs	r4, r4, r5
 800d254:	10a4      	asrs	r4, r4, #2
 800d256:	2600      	movs	r6, #0
 800d258:	42a6      	cmp	r6, r4
 800d25a:	d109      	bne.n	800d270 <__libc_init_array+0x24>
 800d25c:	4d0b      	ldr	r5, [pc, #44]	@ (800d28c <__libc_init_array+0x40>)
 800d25e:	4c0c      	ldr	r4, [pc, #48]	@ (800d290 <__libc_init_array+0x44>)
 800d260:	f000 fc66 	bl	800db30 <_init>
 800d264:	1b64      	subs	r4, r4, r5
 800d266:	10a4      	asrs	r4, r4, #2
 800d268:	2600      	movs	r6, #0
 800d26a:	42a6      	cmp	r6, r4
 800d26c:	d105      	bne.n	800d27a <__libc_init_array+0x2e>
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	f855 3b04 	ldr.w	r3, [r5], #4
 800d274:	4798      	blx	r3
 800d276:	3601      	adds	r6, #1
 800d278:	e7ee      	b.n	800d258 <__libc_init_array+0xc>
 800d27a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d27e:	4798      	blx	r3
 800d280:	3601      	adds	r6, #1
 800d282:	e7f2      	b.n	800d26a <__libc_init_array+0x1e>
 800d284:	0800dc2c 	.word	0x0800dc2c
 800d288:	0800dc2c 	.word	0x0800dc2c
 800d28c:	0800dc2c 	.word	0x0800dc2c
 800d290:	0800dc30 	.word	0x0800dc30

0800d294 <__retarget_lock_acquire_recursive>:
 800d294:	4770      	bx	lr

0800d296 <__retarget_lock_release_recursive>:
 800d296:	4770      	bx	lr

0800d298 <_free_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4605      	mov	r5, r0
 800d29c:	2900      	cmp	r1, #0
 800d29e:	d041      	beq.n	800d324 <_free_r+0x8c>
 800d2a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a4:	1f0c      	subs	r4, r1, #4
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	bfb8      	it	lt
 800d2aa:	18e4      	addlt	r4, r4, r3
 800d2ac:	f000 f8e0 	bl	800d470 <__malloc_lock>
 800d2b0:	4a1d      	ldr	r2, [pc, #116]	@ (800d328 <_free_r+0x90>)
 800d2b2:	6813      	ldr	r3, [r2, #0]
 800d2b4:	b933      	cbnz	r3, 800d2c4 <_free_r+0x2c>
 800d2b6:	6063      	str	r3, [r4, #4]
 800d2b8:	6014      	str	r4, [r2, #0]
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2c0:	f000 b8dc 	b.w	800d47c <__malloc_unlock>
 800d2c4:	42a3      	cmp	r3, r4
 800d2c6:	d908      	bls.n	800d2da <_free_r+0x42>
 800d2c8:	6820      	ldr	r0, [r4, #0]
 800d2ca:	1821      	adds	r1, r4, r0
 800d2cc:	428b      	cmp	r3, r1
 800d2ce:	bf01      	itttt	eq
 800d2d0:	6819      	ldreq	r1, [r3, #0]
 800d2d2:	685b      	ldreq	r3, [r3, #4]
 800d2d4:	1809      	addeq	r1, r1, r0
 800d2d6:	6021      	streq	r1, [r4, #0]
 800d2d8:	e7ed      	b.n	800d2b6 <_free_r+0x1e>
 800d2da:	461a      	mov	r2, r3
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	b10b      	cbz	r3, 800d2e4 <_free_r+0x4c>
 800d2e0:	42a3      	cmp	r3, r4
 800d2e2:	d9fa      	bls.n	800d2da <_free_r+0x42>
 800d2e4:	6811      	ldr	r1, [r2, #0]
 800d2e6:	1850      	adds	r0, r2, r1
 800d2e8:	42a0      	cmp	r0, r4
 800d2ea:	d10b      	bne.n	800d304 <_free_r+0x6c>
 800d2ec:	6820      	ldr	r0, [r4, #0]
 800d2ee:	4401      	add	r1, r0
 800d2f0:	1850      	adds	r0, r2, r1
 800d2f2:	4283      	cmp	r3, r0
 800d2f4:	6011      	str	r1, [r2, #0]
 800d2f6:	d1e0      	bne.n	800d2ba <_free_r+0x22>
 800d2f8:	6818      	ldr	r0, [r3, #0]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	6053      	str	r3, [r2, #4]
 800d2fe:	4408      	add	r0, r1
 800d300:	6010      	str	r0, [r2, #0]
 800d302:	e7da      	b.n	800d2ba <_free_r+0x22>
 800d304:	d902      	bls.n	800d30c <_free_r+0x74>
 800d306:	230c      	movs	r3, #12
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	e7d6      	b.n	800d2ba <_free_r+0x22>
 800d30c:	6820      	ldr	r0, [r4, #0]
 800d30e:	1821      	adds	r1, r4, r0
 800d310:	428b      	cmp	r3, r1
 800d312:	bf04      	itt	eq
 800d314:	6819      	ldreq	r1, [r3, #0]
 800d316:	685b      	ldreq	r3, [r3, #4]
 800d318:	6063      	str	r3, [r4, #4]
 800d31a:	bf04      	itt	eq
 800d31c:	1809      	addeq	r1, r1, r0
 800d31e:	6021      	streq	r1, [r4, #0]
 800d320:	6054      	str	r4, [r2, #4]
 800d322:	e7ca      	b.n	800d2ba <_free_r+0x22>
 800d324:	bd38      	pop	{r3, r4, r5, pc}
 800d326:	bf00      	nop
 800d328:	20002288 	.word	0x20002288

0800d32c <sbrk_aligned>:
 800d32c:	b570      	push	{r4, r5, r6, lr}
 800d32e:	4e0f      	ldr	r6, [pc, #60]	@ (800d36c <sbrk_aligned+0x40>)
 800d330:	460c      	mov	r4, r1
 800d332:	6831      	ldr	r1, [r6, #0]
 800d334:	4605      	mov	r5, r0
 800d336:	b911      	cbnz	r1, 800d33e <sbrk_aligned+0x12>
 800d338:	f000 fba6 	bl	800da88 <_sbrk_r>
 800d33c:	6030      	str	r0, [r6, #0]
 800d33e:	4621      	mov	r1, r4
 800d340:	4628      	mov	r0, r5
 800d342:	f000 fba1 	bl	800da88 <_sbrk_r>
 800d346:	1c43      	adds	r3, r0, #1
 800d348:	d103      	bne.n	800d352 <sbrk_aligned+0x26>
 800d34a:	f04f 34ff 	mov.w	r4, #4294967295
 800d34e:	4620      	mov	r0, r4
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	1cc4      	adds	r4, r0, #3
 800d354:	f024 0403 	bic.w	r4, r4, #3
 800d358:	42a0      	cmp	r0, r4
 800d35a:	d0f8      	beq.n	800d34e <sbrk_aligned+0x22>
 800d35c:	1a21      	subs	r1, r4, r0
 800d35e:	4628      	mov	r0, r5
 800d360:	f000 fb92 	bl	800da88 <_sbrk_r>
 800d364:	3001      	adds	r0, #1
 800d366:	d1f2      	bne.n	800d34e <sbrk_aligned+0x22>
 800d368:	e7ef      	b.n	800d34a <sbrk_aligned+0x1e>
 800d36a:	bf00      	nop
 800d36c:	20002284 	.word	0x20002284

0800d370 <_malloc_r>:
 800d370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d374:	1ccd      	adds	r5, r1, #3
 800d376:	f025 0503 	bic.w	r5, r5, #3
 800d37a:	3508      	adds	r5, #8
 800d37c:	2d0c      	cmp	r5, #12
 800d37e:	bf38      	it	cc
 800d380:	250c      	movcc	r5, #12
 800d382:	2d00      	cmp	r5, #0
 800d384:	4606      	mov	r6, r0
 800d386:	db01      	blt.n	800d38c <_malloc_r+0x1c>
 800d388:	42a9      	cmp	r1, r5
 800d38a:	d904      	bls.n	800d396 <_malloc_r+0x26>
 800d38c:	230c      	movs	r3, #12
 800d38e:	6033      	str	r3, [r6, #0]
 800d390:	2000      	movs	r0, #0
 800d392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d46c <_malloc_r+0xfc>
 800d39a:	f000 f869 	bl	800d470 <__malloc_lock>
 800d39e:	f8d8 3000 	ldr.w	r3, [r8]
 800d3a2:	461c      	mov	r4, r3
 800d3a4:	bb44      	cbnz	r4, 800d3f8 <_malloc_r+0x88>
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7ff ffbf 	bl	800d32c <sbrk_aligned>
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	d158      	bne.n	800d466 <_malloc_r+0xf6>
 800d3b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d3b8:	4627      	mov	r7, r4
 800d3ba:	2f00      	cmp	r7, #0
 800d3bc:	d143      	bne.n	800d446 <_malloc_r+0xd6>
 800d3be:	2c00      	cmp	r4, #0
 800d3c0:	d04b      	beq.n	800d45a <_malloc_r+0xea>
 800d3c2:	6823      	ldr	r3, [r4, #0]
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	eb04 0903 	add.w	r9, r4, r3
 800d3cc:	f000 fb5c 	bl	800da88 <_sbrk_r>
 800d3d0:	4581      	cmp	r9, r0
 800d3d2:	d142      	bne.n	800d45a <_malloc_r+0xea>
 800d3d4:	6821      	ldr	r1, [r4, #0]
 800d3d6:	1a6d      	subs	r5, r5, r1
 800d3d8:	4629      	mov	r1, r5
 800d3da:	4630      	mov	r0, r6
 800d3dc:	f7ff ffa6 	bl	800d32c <sbrk_aligned>
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d03a      	beq.n	800d45a <_malloc_r+0xea>
 800d3e4:	6823      	ldr	r3, [r4, #0]
 800d3e6:	442b      	add	r3, r5
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d3ee:	685a      	ldr	r2, [r3, #4]
 800d3f0:	bb62      	cbnz	r2, 800d44c <_malloc_r+0xdc>
 800d3f2:	f8c8 7000 	str.w	r7, [r8]
 800d3f6:	e00f      	b.n	800d418 <_malloc_r+0xa8>
 800d3f8:	6822      	ldr	r2, [r4, #0]
 800d3fa:	1b52      	subs	r2, r2, r5
 800d3fc:	d420      	bmi.n	800d440 <_malloc_r+0xd0>
 800d3fe:	2a0b      	cmp	r2, #11
 800d400:	d917      	bls.n	800d432 <_malloc_r+0xc2>
 800d402:	1961      	adds	r1, r4, r5
 800d404:	42a3      	cmp	r3, r4
 800d406:	6025      	str	r5, [r4, #0]
 800d408:	bf18      	it	ne
 800d40a:	6059      	strne	r1, [r3, #4]
 800d40c:	6863      	ldr	r3, [r4, #4]
 800d40e:	bf08      	it	eq
 800d410:	f8c8 1000 	streq.w	r1, [r8]
 800d414:	5162      	str	r2, [r4, r5]
 800d416:	604b      	str	r3, [r1, #4]
 800d418:	4630      	mov	r0, r6
 800d41a:	f000 f82f 	bl	800d47c <__malloc_unlock>
 800d41e:	f104 000b 	add.w	r0, r4, #11
 800d422:	1d23      	adds	r3, r4, #4
 800d424:	f020 0007 	bic.w	r0, r0, #7
 800d428:	1ac2      	subs	r2, r0, r3
 800d42a:	bf1c      	itt	ne
 800d42c:	1a1b      	subne	r3, r3, r0
 800d42e:	50a3      	strne	r3, [r4, r2]
 800d430:	e7af      	b.n	800d392 <_malloc_r+0x22>
 800d432:	6862      	ldr	r2, [r4, #4]
 800d434:	42a3      	cmp	r3, r4
 800d436:	bf0c      	ite	eq
 800d438:	f8c8 2000 	streq.w	r2, [r8]
 800d43c:	605a      	strne	r2, [r3, #4]
 800d43e:	e7eb      	b.n	800d418 <_malloc_r+0xa8>
 800d440:	4623      	mov	r3, r4
 800d442:	6864      	ldr	r4, [r4, #4]
 800d444:	e7ae      	b.n	800d3a4 <_malloc_r+0x34>
 800d446:	463c      	mov	r4, r7
 800d448:	687f      	ldr	r7, [r7, #4]
 800d44a:	e7b6      	b.n	800d3ba <_malloc_r+0x4a>
 800d44c:	461a      	mov	r2, r3
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	42a3      	cmp	r3, r4
 800d452:	d1fb      	bne.n	800d44c <_malloc_r+0xdc>
 800d454:	2300      	movs	r3, #0
 800d456:	6053      	str	r3, [r2, #4]
 800d458:	e7de      	b.n	800d418 <_malloc_r+0xa8>
 800d45a:	230c      	movs	r3, #12
 800d45c:	6033      	str	r3, [r6, #0]
 800d45e:	4630      	mov	r0, r6
 800d460:	f000 f80c 	bl	800d47c <__malloc_unlock>
 800d464:	e794      	b.n	800d390 <_malloc_r+0x20>
 800d466:	6005      	str	r5, [r0, #0]
 800d468:	e7d6      	b.n	800d418 <_malloc_r+0xa8>
 800d46a:	bf00      	nop
 800d46c:	20002288 	.word	0x20002288

0800d470 <__malloc_lock>:
 800d470:	4801      	ldr	r0, [pc, #4]	@ (800d478 <__malloc_lock+0x8>)
 800d472:	f7ff bf0f 	b.w	800d294 <__retarget_lock_acquire_recursive>
 800d476:	bf00      	nop
 800d478:	20002280 	.word	0x20002280

0800d47c <__malloc_unlock>:
 800d47c:	4801      	ldr	r0, [pc, #4]	@ (800d484 <__malloc_unlock+0x8>)
 800d47e:	f7ff bf0a 	b.w	800d296 <__retarget_lock_release_recursive>
 800d482:	bf00      	nop
 800d484:	20002280 	.word	0x20002280

0800d488 <__ssputs_r>:
 800d488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48c:	688e      	ldr	r6, [r1, #8]
 800d48e:	461f      	mov	r7, r3
 800d490:	42be      	cmp	r6, r7
 800d492:	680b      	ldr	r3, [r1, #0]
 800d494:	4682      	mov	sl, r0
 800d496:	460c      	mov	r4, r1
 800d498:	4690      	mov	r8, r2
 800d49a:	d82d      	bhi.n	800d4f8 <__ssputs_r+0x70>
 800d49c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4a4:	d026      	beq.n	800d4f4 <__ssputs_r+0x6c>
 800d4a6:	6965      	ldr	r5, [r4, #20]
 800d4a8:	6909      	ldr	r1, [r1, #16]
 800d4aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4ae:	eba3 0901 	sub.w	r9, r3, r1
 800d4b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4b6:	1c7b      	adds	r3, r7, #1
 800d4b8:	444b      	add	r3, r9
 800d4ba:	106d      	asrs	r5, r5, #1
 800d4bc:	429d      	cmp	r5, r3
 800d4be:	bf38      	it	cc
 800d4c0:	461d      	movcc	r5, r3
 800d4c2:	0553      	lsls	r3, r2, #21
 800d4c4:	d527      	bpl.n	800d516 <__ssputs_r+0x8e>
 800d4c6:	4629      	mov	r1, r5
 800d4c8:	f7ff ff52 	bl	800d370 <_malloc_r>
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	b360      	cbz	r0, 800d52a <__ssputs_r+0xa2>
 800d4d0:	6921      	ldr	r1, [r4, #16]
 800d4d2:	464a      	mov	r2, r9
 800d4d4:	f000 fae8 	bl	800daa8 <memcpy>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d4de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	6126      	str	r6, [r4, #16]
 800d4e6:	6165      	str	r5, [r4, #20]
 800d4e8:	444e      	add	r6, r9
 800d4ea:	eba5 0509 	sub.w	r5, r5, r9
 800d4ee:	6026      	str	r6, [r4, #0]
 800d4f0:	60a5      	str	r5, [r4, #8]
 800d4f2:	463e      	mov	r6, r7
 800d4f4:	42be      	cmp	r6, r7
 800d4f6:	d900      	bls.n	800d4fa <__ssputs_r+0x72>
 800d4f8:	463e      	mov	r6, r7
 800d4fa:	6820      	ldr	r0, [r4, #0]
 800d4fc:	4632      	mov	r2, r6
 800d4fe:	4641      	mov	r1, r8
 800d500:	f000 faa8 	bl	800da54 <memmove>
 800d504:	68a3      	ldr	r3, [r4, #8]
 800d506:	1b9b      	subs	r3, r3, r6
 800d508:	60a3      	str	r3, [r4, #8]
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	4433      	add	r3, r6
 800d50e:	6023      	str	r3, [r4, #0]
 800d510:	2000      	movs	r0, #0
 800d512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d516:	462a      	mov	r2, r5
 800d518:	f000 fad4 	bl	800dac4 <_realloc_r>
 800d51c:	4606      	mov	r6, r0
 800d51e:	2800      	cmp	r0, #0
 800d520:	d1e0      	bne.n	800d4e4 <__ssputs_r+0x5c>
 800d522:	6921      	ldr	r1, [r4, #16]
 800d524:	4650      	mov	r0, sl
 800d526:	f7ff feb7 	bl	800d298 <_free_r>
 800d52a:	230c      	movs	r3, #12
 800d52c:	f8ca 3000 	str.w	r3, [sl]
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e7e9      	b.n	800d512 <__ssputs_r+0x8a>
	...

0800d540 <_svfiprintf_r>:
 800d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	4698      	mov	r8, r3
 800d546:	898b      	ldrh	r3, [r1, #12]
 800d548:	061b      	lsls	r3, r3, #24
 800d54a:	b09d      	sub	sp, #116	@ 0x74
 800d54c:	4607      	mov	r7, r0
 800d54e:	460d      	mov	r5, r1
 800d550:	4614      	mov	r4, r2
 800d552:	d510      	bpl.n	800d576 <_svfiprintf_r+0x36>
 800d554:	690b      	ldr	r3, [r1, #16]
 800d556:	b973      	cbnz	r3, 800d576 <_svfiprintf_r+0x36>
 800d558:	2140      	movs	r1, #64	@ 0x40
 800d55a:	f7ff ff09 	bl	800d370 <_malloc_r>
 800d55e:	6028      	str	r0, [r5, #0]
 800d560:	6128      	str	r0, [r5, #16]
 800d562:	b930      	cbnz	r0, 800d572 <_svfiprintf_r+0x32>
 800d564:	230c      	movs	r3, #12
 800d566:	603b      	str	r3, [r7, #0]
 800d568:	f04f 30ff 	mov.w	r0, #4294967295
 800d56c:	b01d      	add	sp, #116	@ 0x74
 800d56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d572:	2340      	movs	r3, #64	@ 0x40
 800d574:	616b      	str	r3, [r5, #20]
 800d576:	2300      	movs	r3, #0
 800d578:	9309      	str	r3, [sp, #36]	@ 0x24
 800d57a:	2320      	movs	r3, #32
 800d57c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d580:	f8cd 800c 	str.w	r8, [sp, #12]
 800d584:	2330      	movs	r3, #48	@ 0x30
 800d586:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d724 <_svfiprintf_r+0x1e4>
 800d58a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d58e:	f04f 0901 	mov.w	r9, #1
 800d592:	4623      	mov	r3, r4
 800d594:	469a      	mov	sl, r3
 800d596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d59a:	b10a      	cbz	r2, 800d5a0 <_svfiprintf_r+0x60>
 800d59c:	2a25      	cmp	r2, #37	@ 0x25
 800d59e:	d1f9      	bne.n	800d594 <_svfiprintf_r+0x54>
 800d5a0:	ebba 0b04 	subs.w	fp, sl, r4
 800d5a4:	d00b      	beq.n	800d5be <_svfiprintf_r+0x7e>
 800d5a6:	465b      	mov	r3, fp
 800d5a8:	4622      	mov	r2, r4
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	4638      	mov	r0, r7
 800d5ae:	f7ff ff6b 	bl	800d488 <__ssputs_r>
 800d5b2:	3001      	adds	r0, #1
 800d5b4:	f000 80a7 	beq.w	800d706 <_svfiprintf_r+0x1c6>
 800d5b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5ba:	445a      	add	r2, fp
 800d5bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5be:	f89a 3000 	ldrb.w	r3, [sl]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f000 809f 	beq.w	800d706 <_svfiprintf_r+0x1c6>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5d2:	f10a 0a01 	add.w	sl, sl, #1
 800d5d6:	9304      	str	r3, [sp, #16]
 800d5d8:	9307      	str	r3, [sp, #28]
 800d5da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5de:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5e0:	4654      	mov	r4, sl
 800d5e2:	2205      	movs	r2, #5
 800d5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e8:	484e      	ldr	r0, [pc, #312]	@ (800d724 <_svfiprintf_r+0x1e4>)
 800d5ea:	f7f2 fe11 	bl	8000210 <memchr>
 800d5ee:	9a04      	ldr	r2, [sp, #16]
 800d5f0:	b9d8      	cbnz	r0, 800d62a <_svfiprintf_r+0xea>
 800d5f2:	06d0      	lsls	r0, r2, #27
 800d5f4:	bf44      	itt	mi
 800d5f6:	2320      	movmi	r3, #32
 800d5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d5fc:	0711      	lsls	r1, r2, #28
 800d5fe:	bf44      	itt	mi
 800d600:	232b      	movmi	r3, #43	@ 0x2b
 800d602:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d606:	f89a 3000 	ldrb.w	r3, [sl]
 800d60a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d60c:	d015      	beq.n	800d63a <_svfiprintf_r+0xfa>
 800d60e:	9a07      	ldr	r2, [sp, #28]
 800d610:	4654      	mov	r4, sl
 800d612:	2000      	movs	r0, #0
 800d614:	f04f 0c0a 	mov.w	ip, #10
 800d618:	4621      	mov	r1, r4
 800d61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d61e:	3b30      	subs	r3, #48	@ 0x30
 800d620:	2b09      	cmp	r3, #9
 800d622:	d94b      	bls.n	800d6bc <_svfiprintf_r+0x17c>
 800d624:	b1b0      	cbz	r0, 800d654 <_svfiprintf_r+0x114>
 800d626:	9207      	str	r2, [sp, #28]
 800d628:	e014      	b.n	800d654 <_svfiprintf_r+0x114>
 800d62a:	eba0 0308 	sub.w	r3, r0, r8
 800d62e:	fa09 f303 	lsl.w	r3, r9, r3
 800d632:	4313      	orrs	r3, r2
 800d634:	9304      	str	r3, [sp, #16]
 800d636:	46a2      	mov	sl, r4
 800d638:	e7d2      	b.n	800d5e0 <_svfiprintf_r+0xa0>
 800d63a:	9b03      	ldr	r3, [sp, #12]
 800d63c:	1d19      	adds	r1, r3, #4
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	9103      	str	r1, [sp, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	bfbb      	ittet	lt
 800d646:	425b      	neglt	r3, r3
 800d648:	f042 0202 	orrlt.w	r2, r2, #2
 800d64c:	9307      	strge	r3, [sp, #28]
 800d64e:	9307      	strlt	r3, [sp, #28]
 800d650:	bfb8      	it	lt
 800d652:	9204      	strlt	r2, [sp, #16]
 800d654:	7823      	ldrb	r3, [r4, #0]
 800d656:	2b2e      	cmp	r3, #46	@ 0x2e
 800d658:	d10a      	bne.n	800d670 <_svfiprintf_r+0x130>
 800d65a:	7863      	ldrb	r3, [r4, #1]
 800d65c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d65e:	d132      	bne.n	800d6c6 <_svfiprintf_r+0x186>
 800d660:	9b03      	ldr	r3, [sp, #12]
 800d662:	1d1a      	adds	r2, r3, #4
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	9203      	str	r2, [sp, #12]
 800d668:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d66c:	3402      	adds	r4, #2
 800d66e:	9305      	str	r3, [sp, #20]
 800d670:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d734 <_svfiprintf_r+0x1f4>
 800d674:	7821      	ldrb	r1, [r4, #0]
 800d676:	2203      	movs	r2, #3
 800d678:	4650      	mov	r0, sl
 800d67a:	f7f2 fdc9 	bl	8000210 <memchr>
 800d67e:	b138      	cbz	r0, 800d690 <_svfiprintf_r+0x150>
 800d680:	9b04      	ldr	r3, [sp, #16]
 800d682:	eba0 000a 	sub.w	r0, r0, sl
 800d686:	2240      	movs	r2, #64	@ 0x40
 800d688:	4082      	lsls	r2, r0
 800d68a:	4313      	orrs	r3, r2
 800d68c:	3401      	adds	r4, #1
 800d68e:	9304      	str	r3, [sp, #16]
 800d690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d694:	4824      	ldr	r0, [pc, #144]	@ (800d728 <_svfiprintf_r+0x1e8>)
 800d696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d69a:	2206      	movs	r2, #6
 800d69c:	f7f2 fdb8 	bl	8000210 <memchr>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d036      	beq.n	800d712 <_svfiprintf_r+0x1d2>
 800d6a4:	4b21      	ldr	r3, [pc, #132]	@ (800d72c <_svfiprintf_r+0x1ec>)
 800d6a6:	bb1b      	cbnz	r3, 800d6f0 <_svfiprintf_r+0x1b0>
 800d6a8:	9b03      	ldr	r3, [sp, #12]
 800d6aa:	3307      	adds	r3, #7
 800d6ac:	f023 0307 	bic.w	r3, r3, #7
 800d6b0:	3308      	adds	r3, #8
 800d6b2:	9303      	str	r3, [sp, #12]
 800d6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6b6:	4433      	add	r3, r6
 800d6b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ba:	e76a      	b.n	800d592 <_svfiprintf_r+0x52>
 800d6bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	2001      	movs	r0, #1
 800d6c4:	e7a8      	b.n	800d618 <_svfiprintf_r+0xd8>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	3401      	adds	r4, #1
 800d6ca:	9305      	str	r3, [sp, #20]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	f04f 0c0a 	mov.w	ip, #10
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6d8:	3a30      	subs	r2, #48	@ 0x30
 800d6da:	2a09      	cmp	r2, #9
 800d6dc:	d903      	bls.n	800d6e6 <_svfiprintf_r+0x1a6>
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d0c6      	beq.n	800d670 <_svfiprintf_r+0x130>
 800d6e2:	9105      	str	r1, [sp, #20]
 800d6e4:	e7c4      	b.n	800d670 <_svfiprintf_r+0x130>
 800d6e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e7f0      	b.n	800d6d2 <_svfiprintf_r+0x192>
 800d6f0:	ab03      	add	r3, sp, #12
 800d6f2:	9300      	str	r3, [sp, #0]
 800d6f4:	462a      	mov	r2, r5
 800d6f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d730 <_svfiprintf_r+0x1f0>)
 800d6f8:	a904      	add	r1, sp, #16
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	f3af 8000 	nop.w
 800d700:	1c42      	adds	r2, r0, #1
 800d702:	4606      	mov	r6, r0
 800d704:	d1d6      	bne.n	800d6b4 <_svfiprintf_r+0x174>
 800d706:	89ab      	ldrh	r3, [r5, #12]
 800d708:	065b      	lsls	r3, r3, #25
 800d70a:	f53f af2d 	bmi.w	800d568 <_svfiprintf_r+0x28>
 800d70e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d710:	e72c      	b.n	800d56c <_svfiprintf_r+0x2c>
 800d712:	ab03      	add	r3, sp, #12
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	462a      	mov	r2, r5
 800d718:	4b05      	ldr	r3, [pc, #20]	@ (800d730 <_svfiprintf_r+0x1f0>)
 800d71a:	a904      	add	r1, sp, #16
 800d71c:	4638      	mov	r0, r7
 800d71e:	f000 f879 	bl	800d814 <_printf_i>
 800d722:	e7ed      	b.n	800d700 <_svfiprintf_r+0x1c0>
 800d724:	0800dbf0 	.word	0x0800dbf0
 800d728:	0800dbfa 	.word	0x0800dbfa
 800d72c:	00000000 	.word	0x00000000
 800d730:	0800d489 	.word	0x0800d489
 800d734:	0800dbf6 	.word	0x0800dbf6

0800d738 <_printf_common>:
 800d738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d73c:	4616      	mov	r6, r2
 800d73e:	4698      	mov	r8, r3
 800d740:	688a      	ldr	r2, [r1, #8]
 800d742:	690b      	ldr	r3, [r1, #16]
 800d744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d748:	4293      	cmp	r3, r2
 800d74a:	bfb8      	it	lt
 800d74c:	4613      	movlt	r3, r2
 800d74e:	6033      	str	r3, [r6, #0]
 800d750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d754:	4607      	mov	r7, r0
 800d756:	460c      	mov	r4, r1
 800d758:	b10a      	cbz	r2, 800d75e <_printf_common+0x26>
 800d75a:	3301      	adds	r3, #1
 800d75c:	6033      	str	r3, [r6, #0]
 800d75e:	6823      	ldr	r3, [r4, #0]
 800d760:	0699      	lsls	r1, r3, #26
 800d762:	bf42      	ittt	mi
 800d764:	6833      	ldrmi	r3, [r6, #0]
 800d766:	3302      	addmi	r3, #2
 800d768:	6033      	strmi	r3, [r6, #0]
 800d76a:	6825      	ldr	r5, [r4, #0]
 800d76c:	f015 0506 	ands.w	r5, r5, #6
 800d770:	d106      	bne.n	800d780 <_printf_common+0x48>
 800d772:	f104 0a19 	add.w	sl, r4, #25
 800d776:	68e3      	ldr	r3, [r4, #12]
 800d778:	6832      	ldr	r2, [r6, #0]
 800d77a:	1a9b      	subs	r3, r3, r2
 800d77c:	42ab      	cmp	r3, r5
 800d77e:	dc26      	bgt.n	800d7ce <_printf_common+0x96>
 800d780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d784:	6822      	ldr	r2, [r4, #0]
 800d786:	3b00      	subs	r3, #0
 800d788:	bf18      	it	ne
 800d78a:	2301      	movne	r3, #1
 800d78c:	0692      	lsls	r2, r2, #26
 800d78e:	d42b      	bmi.n	800d7e8 <_printf_common+0xb0>
 800d790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d794:	4641      	mov	r1, r8
 800d796:	4638      	mov	r0, r7
 800d798:	47c8      	blx	r9
 800d79a:	3001      	adds	r0, #1
 800d79c:	d01e      	beq.n	800d7dc <_printf_common+0xa4>
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	6922      	ldr	r2, [r4, #16]
 800d7a2:	f003 0306 	and.w	r3, r3, #6
 800d7a6:	2b04      	cmp	r3, #4
 800d7a8:	bf02      	ittt	eq
 800d7aa:	68e5      	ldreq	r5, [r4, #12]
 800d7ac:	6833      	ldreq	r3, [r6, #0]
 800d7ae:	1aed      	subeq	r5, r5, r3
 800d7b0:	68a3      	ldr	r3, [r4, #8]
 800d7b2:	bf0c      	ite	eq
 800d7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7b8:	2500      	movne	r5, #0
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	bfc4      	itt	gt
 800d7be:	1a9b      	subgt	r3, r3, r2
 800d7c0:	18ed      	addgt	r5, r5, r3
 800d7c2:	2600      	movs	r6, #0
 800d7c4:	341a      	adds	r4, #26
 800d7c6:	42b5      	cmp	r5, r6
 800d7c8:	d11a      	bne.n	800d800 <_printf_common+0xc8>
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	e008      	b.n	800d7e0 <_printf_common+0xa8>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	4652      	mov	r2, sl
 800d7d2:	4641      	mov	r1, r8
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	47c8      	blx	r9
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d103      	bne.n	800d7e4 <_printf_common+0xac>
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7e4:	3501      	adds	r5, #1
 800d7e6:	e7c6      	b.n	800d776 <_printf_common+0x3e>
 800d7e8:	18e1      	adds	r1, r4, r3
 800d7ea:	1c5a      	adds	r2, r3, #1
 800d7ec:	2030      	movs	r0, #48	@ 0x30
 800d7ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d7f2:	4422      	add	r2, r4
 800d7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7fc:	3302      	adds	r3, #2
 800d7fe:	e7c7      	b.n	800d790 <_printf_common+0x58>
 800d800:	2301      	movs	r3, #1
 800d802:	4622      	mov	r2, r4
 800d804:	4641      	mov	r1, r8
 800d806:	4638      	mov	r0, r7
 800d808:	47c8      	blx	r9
 800d80a:	3001      	adds	r0, #1
 800d80c:	d0e6      	beq.n	800d7dc <_printf_common+0xa4>
 800d80e:	3601      	adds	r6, #1
 800d810:	e7d9      	b.n	800d7c6 <_printf_common+0x8e>
	...

0800d814 <_printf_i>:
 800d814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d818:	7e0f      	ldrb	r7, [r1, #24]
 800d81a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d81c:	2f78      	cmp	r7, #120	@ 0x78
 800d81e:	4691      	mov	r9, r2
 800d820:	4680      	mov	r8, r0
 800d822:	460c      	mov	r4, r1
 800d824:	469a      	mov	sl, r3
 800d826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d82a:	d807      	bhi.n	800d83c <_printf_i+0x28>
 800d82c:	2f62      	cmp	r7, #98	@ 0x62
 800d82e:	d80a      	bhi.n	800d846 <_printf_i+0x32>
 800d830:	2f00      	cmp	r7, #0
 800d832:	f000 80d2 	beq.w	800d9da <_printf_i+0x1c6>
 800d836:	2f58      	cmp	r7, #88	@ 0x58
 800d838:	f000 80b9 	beq.w	800d9ae <_printf_i+0x19a>
 800d83c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d844:	e03a      	b.n	800d8bc <_printf_i+0xa8>
 800d846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d84a:	2b15      	cmp	r3, #21
 800d84c:	d8f6      	bhi.n	800d83c <_printf_i+0x28>
 800d84e:	a101      	add	r1, pc, #4	@ (adr r1, 800d854 <_printf_i+0x40>)
 800d850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d854:	0800d8ad 	.word	0x0800d8ad
 800d858:	0800d8c1 	.word	0x0800d8c1
 800d85c:	0800d83d 	.word	0x0800d83d
 800d860:	0800d83d 	.word	0x0800d83d
 800d864:	0800d83d 	.word	0x0800d83d
 800d868:	0800d83d 	.word	0x0800d83d
 800d86c:	0800d8c1 	.word	0x0800d8c1
 800d870:	0800d83d 	.word	0x0800d83d
 800d874:	0800d83d 	.word	0x0800d83d
 800d878:	0800d83d 	.word	0x0800d83d
 800d87c:	0800d83d 	.word	0x0800d83d
 800d880:	0800d9c1 	.word	0x0800d9c1
 800d884:	0800d8eb 	.word	0x0800d8eb
 800d888:	0800d97b 	.word	0x0800d97b
 800d88c:	0800d83d 	.word	0x0800d83d
 800d890:	0800d83d 	.word	0x0800d83d
 800d894:	0800d9e3 	.word	0x0800d9e3
 800d898:	0800d83d 	.word	0x0800d83d
 800d89c:	0800d8eb 	.word	0x0800d8eb
 800d8a0:	0800d83d 	.word	0x0800d83d
 800d8a4:	0800d83d 	.word	0x0800d83d
 800d8a8:	0800d983 	.word	0x0800d983
 800d8ac:	6833      	ldr	r3, [r6, #0]
 800d8ae:	1d1a      	adds	r2, r3, #4
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6032      	str	r2, [r6, #0]
 800d8b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e09d      	b.n	800d9fc <_printf_i+0x1e8>
 800d8c0:	6833      	ldr	r3, [r6, #0]
 800d8c2:	6820      	ldr	r0, [r4, #0]
 800d8c4:	1d19      	adds	r1, r3, #4
 800d8c6:	6031      	str	r1, [r6, #0]
 800d8c8:	0606      	lsls	r6, r0, #24
 800d8ca:	d501      	bpl.n	800d8d0 <_printf_i+0xbc>
 800d8cc:	681d      	ldr	r5, [r3, #0]
 800d8ce:	e003      	b.n	800d8d8 <_printf_i+0xc4>
 800d8d0:	0645      	lsls	r5, r0, #25
 800d8d2:	d5fb      	bpl.n	800d8cc <_printf_i+0xb8>
 800d8d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d8d8:	2d00      	cmp	r5, #0
 800d8da:	da03      	bge.n	800d8e4 <_printf_i+0xd0>
 800d8dc:	232d      	movs	r3, #45	@ 0x2d
 800d8de:	426d      	negs	r5, r5
 800d8e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8e4:	4859      	ldr	r0, [pc, #356]	@ (800da4c <_printf_i+0x238>)
 800d8e6:	230a      	movs	r3, #10
 800d8e8:	e011      	b.n	800d90e <_printf_i+0xfa>
 800d8ea:	6821      	ldr	r1, [r4, #0]
 800d8ec:	6833      	ldr	r3, [r6, #0]
 800d8ee:	0608      	lsls	r0, r1, #24
 800d8f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d8f4:	d402      	bmi.n	800d8fc <_printf_i+0xe8>
 800d8f6:	0649      	lsls	r1, r1, #25
 800d8f8:	bf48      	it	mi
 800d8fa:	b2ad      	uxthmi	r5, r5
 800d8fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8fe:	4853      	ldr	r0, [pc, #332]	@ (800da4c <_printf_i+0x238>)
 800d900:	6033      	str	r3, [r6, #0]
 800d902:	bf14      	ite	ne
 800d904:	230a      	movne	r3, #10
 800d906:	2308      	moveq	r3, #8
 800d908:	2100      	movs	r1, #0
 800d90a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d90e:	6866      	ldr	r6, [r4, #4]
 800d910:	60a6      	str	r6, [r4, #8]
 800d912:	2e00      	cmp	r6, #0
 800d914:	bfa2      	ittt	ge
 800d916:	6821      	ldrge	r1, [r4, #0]
 800d918:	f021 0104 	bicge.w	r1, r1, #4
 800d91c:	6021      	strge	r1, [r4, #0]
 800d91e:	b90d      	cbnz	r5, 800d924 <_printf_i+0x110>
 800d920:	2e00      	cmp	r6, #0
 800d922:	d04b      	beq.n	800d9bc <_printf_i+0x1a8>
 800d924:	4616      	mov	r6, r2
 800d926:	fbb5 f1f3 	udiv	r1, r5, r3
 800d92a:	fb03 5711 	mls	r7, r3, r1, r5
 800d92e:	5dc7      	ldrb	r7, [r0, r7]
 800d930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d934:	462f      	mov	r7, r5
 800d936:	42bb      	cmp	r3, r7
 800d938:	460d      	mov	r5, r1
 800d93a:	d9f4      	bls.n	800d926 <_printf_i+0x112>
 800d93c:	2b08      	cmp	r3, #8
 800d93e:	d10b      	bne.n	800d958 <_printf_i+0x144>
 800d940:	6823      	ldr	r3, [r4, #0]
 800d942:	07df      	lsls	r7, r3, #31
 800d944:	d508      	bpl.n	800d958 <_printf_i+0x144>
 800d946:	6923      	ldr	r3, [r4, #16]
 800d948:	6861      	ldr	r1, [r4, #4]
 800d94a:	4299      	cmp	r1, r3
 800d94c:	bfde      	ittt	le
 800d94e:	2330      	movle	r3, #48	@ 0x30
 800d950:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d954:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d958:	1b92      	subs	r2, r2, r6
 800d95a:	6122      	str	r2, [r4, #16]
 800d95c:	f8cd a000 	str.w	sl, [sp]
 800d960:	464b      	mov	r3, r9
 800d962:	aa03      	add	r2, sp, #12
 800d964:	4621      	mov	r1, r4
 800d966:	4640      	mov	r0, r8
 800d968:	f7ff fee6 	bl	800d738 <_printf_common>
 800d96c:	3001      	adds	r0, #1
 800d96e:	d14a      	bne.n	800da06 <_printf_i+0x1f2>
 800d970:	f04f 30ff 	mov.w	r0, #4294967295
 800d974:	b004      	add	sp, #16
 800d976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	f043 0320 	orr.w	r3, r3, #32
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	4833      	ldr	r0, [pc, #204]	@ (800da50 <_printf_i+0x23c>)
 800d984:	2778      	movs	r7, #120	@ 0x78
 800d986:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	6831      	ldr	r1, [r6, #0]
 800d98e:	061f      	lsls	r7, r3, #24
 800d990:	f851 5b04 	ldr.w	r5, [r1], #4
 800d994:	d402      	bmi.n	800d99c <_printf_i+0x188>
 800d996:	065f      	lsls	r7, r3, #25
 800d998:	bf48      	it	mi
 800d99a:	b2ad      	uxthmi	r5, r5
 800d99c:	6031      	str	r1, [r6, #0]
 800d99e:	07d9      	lsls	r1, r3, #31
 800d9a0:	bf44      	itt	mi
 800d9a2:	f043 0320 	orrmi.w	r3, r3, #32
 800d9a6:	6023      	strmi	r3, [r4, #0]
 800d9a8:	b11d      	cbz	r5, 800d9b2 <_printf_i+0x19e>
 800d9aa:	2310      	movs	r3, #16
 800d9ac:	e7ac      	b.n	800d908 <_printf_i+0xf4>
 800d9ae:	4827      	ldr	r0, [pc, #156]	@ (800da4c <_printf_i+0x238>)
 800d9b0:	e7e9      	b.n	800d986 <_printf_i+0x172>
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	f023 0320 	bic.w	r3, r3, #32
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	e7f6      	b.n	800d9aa <_printf_i+0x196>
 800d9bc:	4616      	mov	r6, r2
 800d9be:	e7bd      	b.n	800d93c <_printf_i+0x128>
 800d9c0:	6833      	ldr	r3, [r6, #0]
 800d9c2:	6825      	ldr	r5, [r4, #0]
 800d9c4:	6961      	ldr	r1, [r4, #20]
 800d9c6:	1d18      	adds	r0, r3, #4
 800d9c8:	6030      	str	r0, [r6, #0]
 800d9ca:	062e      	lsls	r6, r5, #24
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	d501      	bpl.n	800d9d4 <_printf_i+0x1c0>
 800d9d0:	6019      	str	r1, [r3, #0]
 800d9d2:	e002      	b.n	800d9da <_printf_i+0x1c6>
 800d9d4:	0668      	lsls	r0, r5, #25
 800d9d6:	d5fb      	bpl.n	800d9d0 <_printf_i+0x1bc>
 800d9d8:	8019      	strh	r1, [r3, #0]
 800d9da:	2300      	movs	r3, #0
 800d9dc:	6123      	str	r3, [r4, #16]
 800d9de:	4616      	mov	r6, r2
 800d9e0:	e7bc      	b.n	800d95c <_printf_i+0x148>
 800d9e2:	6833      	ldr	r3, [r6, #0]
 800d9e4:	1d1a      	adds	r2, r3, #4
 800d9e6:	6032      	str	r2, [r6, #0]
 800d9e8:	681e      	ldr	r6, [r3, #0]
 800d9ea:	6862      	ldr	r2, [r4, #4]
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	f7f2 fc0e 	bl	8000210 <memchr>
 800d9f4:	b108      	cbz	r0, 800d9fa <_printf_i+0x1e6>
 800d9f6:	1b80      	subs	r0, r0, r6
 800d9f8:	6060      	str	r0, [r4, #4]
 800d9fa:	6863      	ldr	r3, [r4, #4]
 800d9fc:	6123      	str	r3, [r4, #16]
 800d9fe:	2300      	movs	r3, #0
 800da00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da04:	e7aa      	b.n	800d95c <_printf_i+0x148>
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	4632      	mov	r2, r6
 800da0a:	4649      	mov	r1, r9
 800da0c:	4640      	mov	r0, r8
 800da0e:	47d0      	blx	sl
 800da10:	3001      	adds	r0, #1
 800da12:	d0ad      	beq.n	800d970 <_printf_i+0x15c>
 800da14:	6823      	ldr	r3, [r4, #0]
 800da16:	079b      	lsls	r3, r3, #30
 800da18:	d413      	bmi.n	800da42 <_printf_i+0x22e>
 800da1a:	68e0      	ldr	r0, [r4, #12]
 800da1c:	9b03      	ldr	r3, [sp, #12]
 800da1e:	4298      	cmp	r0, r3
 800da20:	bfb8      	it	lt
 800da22:	4618      	movlt	r0, r3
 800da24:	e7a6      	b.n	800d974 <_printf_i+0x160>
 800da26:	2301      	movs	r3, #1
 800da28:	4632      	mov	r2, r6
 800da2a:	4649      	mov	r1, r9
 800da2c:	4640      	mov	r0, r8
 800da2e:	47d0      	blx	sl
 800da30:	3001      	adds	r0, #1
 800da32:	d09d      	beq.n	800d970 <_printf_i+0x15c>
 800da34:	3501      	adds	r5, #1
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	9903      	ldr	r1, [sp, #12]
 800da3a:	1a5b      	subs	r3, r3, r1
 800da3c:	42ab      	cmp	r3, r5
 800da3e:	dcf2      	bgt.n	800da26 <_printf_i+0x212>
 800da40:	e7eb      	b.n	800da1a <_printf_i+0x206>
 800da42:	2500      	movs	r5, #0
 800da44:	f104 0619 	add.w	r6, r4, #25
 800da48:	e7f5      	b.n	800da36 <_printf_i+0x222>
 800da4a:	bf00      	nop
 800da4c:	0800dc01 	.word	0x0800dc01
 800da50:	0800dc12 	.word	0x0800dc12

0800da54 <memmove>:
 800da54:	4288      	cmp	r0, r1
 800da56:	b510      	push	{r4, lr}
 800da58:	eb01 0402 	add.w	r4, r1, r2
 800da5c:	d902      	bls.n	800da64 <memmove+0x10>
 800da5e:	4284      	cmp	r4, r0
 800da60:	4623      	mov	r3, r4
 800da62:	d807      	bhi.n	800da74 <memmove+0x20>
 800da64:	1e43      	subs	r3, r0, #1
 800da66:	42a1      	cmp	r1, r4
 800da68:	d008      	beq.n	800da7c <memmove+0x28>
 800da6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da72:	e7f8      	b.n	800da66 <memmove+0x12>
 800da74:	4402      	add	r2, r0
 800da76:	4601      	mov	r1, r0
 800da78:	428a      	cmp	r2, r1
 800da7a:	d100      	bne.n	800da7e <memmove+0x2a>
 800da7c:	bd10      	pop	{r4, pc}
 800da7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da86:	e7f7      	b.n	800da78 <memmove+0x24>

0800da88 <_sbrk_r>:
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	4d06      	ldr	r5, [pc, #24]	@ (800daa4 <_sbrk_r+0x1c>)
 800da8c:	2300      	movs	r3, #0
 800da8e:	4604      	mov	r4, r0
 800da90:	4608      	mov	r0, r1
 800da92:	602b      	str	r3, [r5, #0]
 800da94:	f7f4 f99a 	bl	8001dcc <_sbrk>
 800da98:	1c43      	adds	r3, r0, #1
 800da9a:	d102      	bne.n	800daa2 <_sbrk_r+0x1a>
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	b103      	cbz	r3, 800daa2 <_sbrk_r+0x1a>
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	bd38      	pop	{r3, r4, r5, pc}
 800daa4:	2000227c 	.word	0x2000227c

0800daa8 <memcpy>:
 800daa8:	440a      	add	r2, r1
 800daaa:	4291      	cmp	r1, r2
 800daac:	f100 33ff 	add.w	r3, r0, #4294967295
 800dab0:	d100      	bne.n	800dab4 <memcpy+0xc>
 800dab2:	4770      	bx	lr
 800dab4:	b510      	push	{r4, lr}
 800dab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dabe:	4291      	cmp	r1, r2
 800dac0:	d1f9      	bne.n	800dab6 <memcpy+0xe>
 800dac2:	bd10      	pop	{r4, pc}

0800dac4 <_realloc_r>:
 800dac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac8:	4680      	mov	r8, r0
 800daca:	4615      	mov	r5, r2
 800dacc:	460c      	mov	r4, r1
 800dace:	b921      	cbnz	r1, 800dada <_realloc_r+0x16>
 800dad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dad4:	4611      	mov	r1, r2
 800dad6:	f7ff bc4b 	b.w	800d370 <_malloc_r>
 800dada:	b92a      	cbnz	r2, 800dae8 <_realloc_r+0x24>
 800dadc:	f7ff fbdc 	bl	800d298 <_free_r>
 800dae0:	2400      	movs	r4, #0
 800dae2:	4620      	mov	r0, r4
 800dae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae8:	f000 f81a 	bl	800db20 <_malloc_usable_size_r>
 800daec:	4285      	cmp	r5, r0
 800daee:	4606      	mov	r6, r0
 800daf0:	d802      	bhi.n	800daf8 <_realloc_r+0x34>
 800daf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800daf6:	d8f4      	bhi.n	800dae2 <_realloc_r+0x1e>
 800daf8:	4629      	mov	r1, r5
 800dafa:	4640      	mov	r0, r8
 800dafc:	f7ff fc38 	bl	800d370 <_malloc_r>
 800db00:	4607      	mov	r7, r0
 800db02:	2800      	cmp	r0, #0
 800db04:	d0ec      	beq.n	800dae0 <_realloc_r+0x1c>
 800db06:	42b5      	cmp	r5, r6
 800db08:	462a      	mov	r2, r5
 800db0a:	4621      	mov	r1, r4
 800db0c:	bf28      	it	cs
 800db0e:	4632      	movcs	r2, r6
 800db10:	f7ff ffca 	bl	800daa8 <memcpy>
 800db14:	4621      	mov	r1, r4
 800db16:	4640      	mov	r0, r8
 800db18:	f7ff fbbe 	bl	800d298 <_free_r>
 800db1c:	463c      	mov	r4, r7
 800db1e:	e7e0      	b.n	800dae2 <_realloc_r+0x1e>

0800db20 <_malloc_usable_size_r>:
 800db20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db24:	1f18      	subs	r0, r3, #4
 800db26:	2b00      	cmp	r3, #0
 800db28:	bfbc      	itt	lt
 800db2a:	580b      	ldrlt	r3, [r1, r0]
 800db2c:	18c0      	addlt	r0, r0, r3
 800db2e:	4770      	bx	lr

0800db30 <_init>:
 800db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db32:	bf00      	nop
 800db34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db36:	bc08      	pop	{r3}
 800db38:	469e      	mov	lr, r3
 800db3a:	4770      	bx	lr

0800db3c <_fini>:
 800db3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3e:	bf00      	nop
 800db40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db42:	bc08      	pop	{r3}
 800db44:	469e      	mov	lr, r3
 800db46:	4770      	bx	lr
