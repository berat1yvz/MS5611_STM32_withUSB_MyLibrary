
MS5611_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800dd24  0800dd24  0000ed24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de00  0800de00  0000f15c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de00  0800de00  0000ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de08  0800de08  0000f15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de08  0800de08  0000ee08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800de0c  0800de0c  0000ee0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  0800de10  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000212c  20000160  0800df6c  0000f160  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000228c  0800df6c  0000f28c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002292c  00000000  00000000  0000f18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057bc  00000000  00000000  00031ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001598  00000000  00000000  00038ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002910e  00000000  00000000  0003a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c986  00000000  00000000  0006354e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da30d  00000000  00000000  0008fed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a1e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007948  00000000  00000000  0016a224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00171b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000160 	.word	0x20000160
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dd0c 	.word	0x0800dd0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000164 	.word	0x20000164
 800020c:	0800dd0c 	.word	0x0800dd0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9b5 	b.w	800064c <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96a 	b.w	800064c <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	460c      	mov	r4, r1
 8000398:	2b00      	cmp	r3, #0
 800039a:	d14e      	bne.n	800043a <__udivmoddi4+0xaa>
 800039c:	4694      	mov	ip, r2
 800039e:	458c      	cmp	ip, r1
 80003a0:	4686      	mov	lr, r0
 80003a2:	fab2 f282 	clz	r2, r2
 80003a6:	d962      	bls.n	800046e <__udivmoddi4+0xde>
 80003a8:	b14a      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003aa:	f1c2 0320 	rsb	r3, r2, #32
 80003ae:	4091      	lsls	r1, r2
 80003b0:	fa20 f303 	lsr.w	r3, r0, r3
 80003b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b8:	4319      	orrs	r1, r3
 80003ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80003be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c2:	fa1f f68c 	uxth.w	r6, ip
 80003c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb07 1114 	mls	r1, r7, r4, r1
 80003d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d6:	fb04 f106 	mul.w	r1, r4, r6
 80003da:	4299      	cmp	r1, r3
 80003dc:	d90a      	bls.n	80003f4 <__udivmoddi4+0x64>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003e6:	f080 8112 	bcs.w	800060e <__udivmoddi4+0x27e>
 80003ea:	4299      	cmp	r1, r3
 80003ec:	f240 810f 	bls.w	800060e <__udivmoddi4+0x27e>
 80003f0:	3c02      	subs	r4, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	fa1f f38e 	uxth.w	r3, lr
 80003fa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003fe:	fb07 1110 	mls	r1, r7, r0, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb00 f606 	mul.w	r6, r0, r6
 800040a:	429e      	cmp	r6, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x94>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f100 31ff 	add.w	r1, r0, #4294967295
 8000416:	f080 80fc 	bcs.w	8000612 <__udivmoddi4+0x282>
 800041a:	429e      	cmp	r6, r3
 800041c:	f240 80f9 	bls.w	8000612 <__udivmoddi4+0x282>
 8000420:	4463      	add	r3, ip
 8000422:	3802      	subs	r0, #2
 8000424:	1b9b      	subs	r3, r3, r6
 8000426:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800042a:	2100      	movs	r1, #0
 800042c:	b11d      	cbz	r5, 8000436 <__udivmoddi4+0xa6>
 800042e:	40d3      	lsrs	r3, r2
 8000430:	2200      	movs	r2, #0
 8000432:	e9c5 3200 	strd	r3, r2, [r5]
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	428b      	cmp	r3, r1
 800043c:	d905      	bls.n	800044a <__udivmoddi4+0xba>
 800043e:	b10d      	cbz	r5, 8000444 <__udivmoddi4+0xb4>
 8000440:	e9c5 0100 	strd	r0, r1, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	4608      	mov	r0, r1
 8000448:	e7f5      	b.n	8000436 <__udivmoddi4+0xa6>
 800044a:	fab3 f183 	clz	r1, r3
 800044e:	2900      	cmp	r1, #0
 8000450:	d146      	bne.n	80004e0 <__udivmoddi4+0x150>
 8000452:	42a3      	cmp	r3, r4
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xcc>
 8000456:	4290      	cmp	r0, r2
 8000458:	f0c0 80f0 	bcc.w	800063c <__udivmoddi4+0x2ac>
 800045c:	1a86      	subs	r6, r0, r2
 800045e:	eb64 0303 	sbc.w	r3, r4, r3
 8000462:	2001      	movs	r0, #1
 8000464:	2d00      	cmp	r5, #0
 8000466:	d0e6      	beq.n	8000436 <__udivmoddi4+0xa6>
 8000468:	e9c5 6300 	strd	r6, r3, [r5]
 800046c:	e7e3      	b.n	8000436 <__udivmoddi4+0xa6>
 800046e:	2a00      	cmp	r2, #0
 8000470:	f040 8090 	bne.w	8000594 <__udivmoddi4+0x204>
 8000474:	eba1 040c 	sub.w	r4, r1, ip
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa1f f78c 	uxth.w	r7, ip
 8000480:	2101      	movs	r1, #1
 8000482:	fbb4 f6f8 	udiv	r6, r4, r8
 8000486:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800048a:	fb08 4416 	mls	r4, r8, r6, r4
 800048e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000492:	fb07 f006 	mul.w	r0, r7, r6
 8000496:	4298      	cmp	r0, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x11c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f106 34ff 	add.w	r4, r6, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x11a>
 80004a4:	4298      	cmp	r0, r3
 80004a6:	f200 80cd 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 80004aa:	4626      	mov	r6, r4
 80004ac:	1a1c      	subs	r4, r3, r0
 80004ae:	fa1f f38e 	uxth.w	r3, lr
 80004b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004b6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004be:	fb00 f707 	mul.w	r7, r0, r7
 80004c2:	429f      	cmp	r7, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x148>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ce:	d202      	bcs.n	80004d6 <__udivmoddi4+0x146>
 80004d0:	429f      	cmp	r7, r3
 80004d2:	f200 80b0 	bhi.w	8000636 <__udivmoddi4+0x2a6>
 80004d6:	4620      	mov	r0, r4
 80004d8:	1bdb      	subs	r3, r3, r7
 80004da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004de:	e7a5      	b.n	800042c <__udivmoddi4+0x9c>
 80004e0:	f1c1 0620 	rsb	r6, r1, #32
 80004e4:	408b      	lsls	r3, r1
 80004e6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ea:	431f      	orrs	r7, r3
 80004ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80004f0:	fa04 f301 	lsl.w	r3, r4, r1
 80004f4:	ea43 030c 	orr.w	r3, r3, ip
 80004f8:	40f4      	lsrs	r4, r6
 80004fa:	fa00 f801 	lsl.w	r8, r0, r1
 80004fe:	0c38      	lsrs	r0, r7, #16
 8000500:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000504:	fbb4 fef0 	udiv	lr, r4, r0
 8000508:	fa1f fc87 	uxth.w	ip, r7
 800050c:	fb00 441e 	mls	r4, r0, lr, r4
 8000510:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000514:	fb0e f90c 	mul.w	r9, lr, ip
 8000518:	45a1      	cmp	r9, r4
 800051a:	fa02 f201 	lsl.w	r2, r2, r1
 800051e:	d90a      	bls.n	8000536 <__udivmoddi4+0x1a6>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000526:	f080 8084 	bcs.w	8000632 <__udivmoddi4+0x2a2>
 800052a:	45a1      	cmp	r9, r4
 800052c:	f240 8081 	bls.w	8000632 <__udivmoddi4+0x2a2>
 8000530:	f1ae 0e02 	sub.w	lr, lr, #2
 8000534:	443c      	add	r4, r7
 8000536:	eba4 0409 	sub.w	r4, r4, r9
 800053a:	fa1f f983 	uxth.w	r9, r3
 800053e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000542:	fb00 4413 	mls	r4, r0, r3, r4
 8000546:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800054a:	fb03 fc0c 	mul.w	ip, r3, ip
 800054e:	45a4      	cmp	ip, r4
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x1d2>
 8000552:	193c      	adds	r4, r7, r4
 8000554:	f103 30ff 	add.w	r0, r3, #4294967295
 8000558:	d267      	bcs.n	800062a <__udivmoddi4+0x29a>
 800055a:	45a4      	cmp	ip, r4
 800055c:	d965      	bls.n	800062a <__udivmoddi4+0x29a>
 800055e:	3b02      	subs	r3, #2
 8000560:	443c      	add	r4, r7
 8000562:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000566:	fba0 9302 	umull	r9, r3, r0, r2
 800056a:	eba4 040c 	sub.w	r4, r4, ip
 800056e:	429c      	cmp	r4, r3
 8000570:	46ce      	mov	lr, r9
 8000572:	469c      	mov	ip, r3
 8000574:	d351      	bcc.n	800061a <__udivmoddi4+0x28a>
 8000576:	d04e      	beq.n	8000616 <__udivmoddi4+0x286>
 8000578:	b155      	cbz	r5, 8000590 <__udivmoddi4+0x200>
 800057a:	ebb8 030e 	subs.w	r3, r8, lr
 800057e:	eb64 040c 	sbc.w	r4, r4, ip
 8000582:	fa04 f606 	lsl.w	r6, r4, r6
 8000586:	40cb      	lsrs	r3, r1
 8000588:	431e      	orrs	r6, r3
 800058a:	40cc      	lsrs	r4, r1
 800058c:	e9c5 6400 	strd	r6, r4, [r5]
 8000590:	2100      	movs	r1, #0
 8000592:	e750      	b.n	8000436 <__udivmoddi4+0xa6>
 8000594:	f1c2 0320 	rsb	r3, r2, #32
 8000598:	fa20 f103 	lsr.w	r1, r0, r3
 800059c:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a0:	fa24 f303 	lsr.w	r3, r4, r3
 80005a4:	4094      	lsls	r4, r2
 80005a6:	430c      	orrs	r4, r1
 80005a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80005b0:	fa1f f78c 	uxth.w	r7, ip
 80005b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005b8:	fb08 3110 	mls	r1, r8, r0, r3
 80005bc:	0c23      	lsrs	r3, r4, #16
 80005be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c2:	fb00 f107 	mul.w	r1, r0, r7
 80005c6:	4299      	cmp	r1, r3
 80005c8:	d908      	bls.n	80005dc <__udivmoddi4+0x24c>
 80005ca:	eb1c 0303 	adds.w	r3, ip, r3
 80005ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80005d2:	d22c      	bcs.n	800062e <__udivmoddi4+0x29e>
 80005d4:	4299      	cmp	r1, r3
 80005d6:	d92a      	bls.n	800062e <__udivmoddi4+0x29e>
 80005d8:	3802      	subs	r0, #2
 80005da:	4463      	add	r3, ip
 80005dc:	1a5b      	subs	r3, r3, r1
 80005de:	b2a4      	uxth	r4, r4
 80005e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005e4:	fb08 3311 	mls	r3, r8, r1, r3
 80005e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ec:	fb01 f307 	mul.w	r3, r1, r7
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d908      	bls.n	8000606 <__udivmoddi4+0x276>
 80005f4:	eb1c 0404 	adds.w	r4, ip, r4
 80005f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005fc:	d213      	bcs.n	8000626 <__udivmoddi4+0x296>
 80005fe:	42a3      	cmp	r3, r4
 8000600:	d911      	bls.n	8000626 <__udivmoddi4+0x296>
 8000602:	3902      	subs	r1, #2
 8000604:	4464      	add	r4, ip
 8000606:	1ae4      	subs	r4, r4, r3
 8000608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800060c:	e739      	b.n	8000482 <__udivmoddi4+0xf2>
 800060e:	4604      	mov	r4, r0
 8000610:	e6f0      	b.n	80003f4 <__udivmoddi4+0x64>
 8000612:	4608      	mov	r0, r1
 8000614:	e706      	b.n	8000424 <__udivmoddi4+0x94>
 8000616:	45c8      	cmp	r8, r9
 8000618:	d2ae      	bcs.n	8000578 <__udivmoddi4+0x1e8>
 800061a:	ebb9 0e02 	subs.w	lr, r9, r2
 800061e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000622:	3801      	subs	r0, #1
 8000624:	e7a8      	b.n	8000578 <__udivmoddi4+0x1e8>
 8000626:	4631      	mov	r1, r6
 8000628:	e7ed      	b.n	8000606 <__udivmoddi4+0x276>
 800062a:	4603      	mov	r3, r0
 800062c:	e799      	b.n	8000562 <__udivmoddi4+0x1d2>
 800062e:	4630      	mov	r0, r6
 8000630:	e7d4      	b.n	80005dc <__udivmoddi4+0x24c>
 8000632:	46d6      	mov	lr, sl
 8000634:	e77f      	b.n	8000536 <__udivmoddi4+0x1a6>
 8000636:	4463      	add	r3, ip
 8000638:	3802      	subs	r0, #2
 800063a:	e74d      	b.n	80004d8 <__udivmoddi4+0x148>
 800063c:	4606      	mov	r6, r0
 800063e:	4623      	mov	r3, r4
 8000640:	4608      	mov	r0, r1
 8000642:	e70f      	b.n	8000464 <__udivmoddi4+0xd4>
 8000644:	3e02      	subs	r6, #2
 8000646:	4463      	add	r3, ip
 8000648:	e730      	b.n	80004ac <__udivmoddi4+0x11c>
 800064a:	bf00      	nop

0800064c <__aeabi_idiv0>:
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <MS5611_Rest>:

/*
 * Function for reseting the sensor
 */
void MS5611_Rest(I2C_HandleTypeDef* I2Cx)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	uint8_t RESET = (uint8_t)MS5611_CMD_REST;
 8000658:	231e      	movs	r3, #30
 800065a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_SLAVE_ADDR, &RESET, 1, 1000);
 800065c:	f107 020f 	add.w	r2, r7, #15
 8000660:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21ee      	movs	r1, #238	@ 0xee
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f002 fe58 	bl	8003320 <HAL_I2C_Master_Transmit>
	HAL_Delay(4);
 8000670:	2004      	movs	r0, #4
 8000672:	f001 fd6d 	bl	8002150 <HAL_Delay>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MS5611_PROM_read>:
/*
 * Function for reading PROM memories of the sensor
 */
uint8_t MS5611_PROM_read(I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct){
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af02      	add	r7, sp, #8
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]

	uint8_t i;
	uint8_t data[2];
	uint8_t PROM[8] = {MS5611_PROM_READ_0,
 800068a:	4a4a      	ldr	r2, [pc, #296]	@ (80007b4 <MS5611_PROM_read+0x134>)
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000694:	e883 0003 	stmia.w	r3, {r0, r1}
			MS5611_PROM_READ_4,
			MS5611_PROM_READ_5,
			MS5611_PROM_READ_6,
			MS5611_PROM_READ_7
	};
	I2C_HandleTypeDef* Handle = I2Cx;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	61bb      	str	r3, [r7, #24]
	uint8_t address = datastruct->adress;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	75fb      	strb	r3, [r7, #23]

	while(HAL_I2C_Master_Transmit(Handle, address, &PROM[0], 1, 100) != HAL_OK);
 80006a2:	bf00      	nop
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	b299      	uxth	r1, r3
 80006a8:	f107 020c 	add.w	r2, r7, #12
 80006ac:	2364      	movs	r3, #100	@ 0x64
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	69b8      	ldr	r0, [r7, #24]
 80006b4:	f002 fe34 	bl	8003320 <HAL_I2C_Master_Transmit>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1f2      	bne.n	80006a4 <MS5611_PROM_read+0x24>

	while(HAL_I2C_Master_Receive(Handle, address, data, 2, 100) != HAL_OK);
 80006be:	bf00      	nop
 80006c0:	7dfb      	ldrb	r3, [r7, #23]
 80006c2:	b299      	uxth	r1, r3
 80006c4:	f107 0214 	add.w	r2, r7, #20
 80006c8:	2364      	movs	r3, #100	@ 0x64
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2302      	movs	r3, #2
 80006ce:	69b8      	ldr	r0, [r7, #24]
 80006d0:	f002 ff24 	bl	800351c <HAL_I2C_Master_Receive>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f2      	bne.n	80006c0 <MS5611_PROM_read+0x40>

	datastruct->reserve = (uint16_t)(data[0] << 8 | data[1]);
 80006da:	7d3b      	ldrb	r3, [r7, #20]
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b21a      	sxth	r2, r3
 80006e0:	7d7b      	ldrb	r3, [r7, #21]
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	81da      	strh	r2, [r3, #14]

	for (i=1;i<=6;i++){
 80006ee:	2301      	movs	r3, #1
 80006f0:	77fb      	strb	r3, [r7, #31]
 80006f2:	e02f      	b.n	8000754 <MS5611_PROM_read+0xd4>

		while(HAL_I2C_Master_Transmit(Handle, address, &PROM[i], 1, 100) != HAL_OK);
 80006f4:	bf00      	nop
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	b299      	uxth	r1, r3
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	441a      	add	r2, r3
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	69b8      	ldr	r0, [r7, #24]
 800070a:	f002 fe09 	bl	8003320 <HAL_I2C_Master_Transmit>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f0      	bne.n	80006f6 <MS5611_PROM_read+0x76>

		while(HAL_I2C_Master_Receive(Handle, address, data, 2, 100) != HAL_OK);
 8000714:	bf00      	nop
 8000716:	7dfb      	ldrb	r3, [r7, #23]
 8000718:	b299      	uxth	r1, r3
 800071a:	f107 0214 	add.w	r2, r7, #20
 800071e:	2364      	movs	r3, #100	@ 0x64
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2302      	movs	r3, #2
 8000724:	69b8      	ldr	r0, [r7, #24]
 8000726:	f002 fef9 	bl	800351c <HAL_I2C_Master_Receive>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1f2      	bne.n	8000716 <MS5611_PROM_read+0x96>

		datastruct->C[i-1] = (uint16_t )(data[0] << 8 | data[1]);
 8000730:	7d3b      	ldrb	r3, [r7, #20]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	b21a      	sxth	r2, r3
 8000736:	7d7b      	ldrb	r3, [r7, #21]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21a      	sxth	r2, r3
 800073e:	7ffb      	ldrb	r3, [r7, #31]
 8000740:	3b01      	subs	r3, #1
 8000742:	b291      	uxth	r1, r2
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	805a      	strh	r2, [r3, #2]
	for (i=1;i<=6;i++){
 800074e:	7ffb      	ldrb	r3, [r7, #31]
 8000750:	3301      	adds	r3, #1
 8000752:	77fb      	strb	r3, [r7, #31]
 8000754:	7ffb      	ldrb	r3, [r7, #31]
 8000756:	2b06      	cmp	r3, #6
 8000758:	d9cc      	bls.n	80006f4 <MS5611_PROM_read+0x74>
	}

	while(HAL_I2C_Master_Transmit(Handle, address, &PROM[7], 1, 100) != HAL_OK);
 800075a:	bf00      	nop
 800075c:	7dfb      	ldrb	r3, [r7, #23]
 800075e:	b299      	uxth	r1, r3
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	1dda      	adds	r2, r3, #7
 8000766:	2364      	movs	r3, #100	@ 0x64
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	69b8      	ldr	r0, [r7, #24]
 800076e:	f002 fdd7 	bl	8003320 <HAL_I2C_Master_Transmit>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d1f1      	bne.n	800075c <MS5611_PROM_read+0xdc>

	while(HAL_I2C_Master_Receive(Handle, address, data, 2, 100) != HAL_OK);
 8000778:	bf00      	nop
 800077a:	7dfb      	ldrb	r3, [r7, #23]
 800077c:	b299      	uxth	r1, r3
 800077e:	f107 0214 	add.w	r2, r7, #20
 8000782:	2364      	movs	r3, #100	@ 0x64
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2302      	movs	r3, #2
 8000788:	69b8      	ldr	r0, [r7, #24]
 800078a:	f002 fec7 	bl	800351c <HAL_I2C_Master_Receive>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f2      	bne.n	800077a <MS5611_PROM_read+0xfa>

	datastruct->crc = (uint16_t)(data[0] << 8 | data[1]);
 8000794:	7d3b      	ldrb	r3, [r7, #20]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	7d7b      	ldrb	r3, [r7, #21]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	821a      	strh	r2, [r3, #16]

	return MS5611_OK;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	0800dd24 	.word	0x0800dd24

080007b8 <MS5611_init>:
uint8_t MS5611_init(I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
	MS5611_Rest(I2Cx);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff44 	bl	8000650 <MS5611_Rest>
	datastruct->adress = MS5611_SLAVE_ADDR; //add slave adress to the datastruct
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	22ee      	movs	r2, #238	@ 0xee
 80007cc:	701a      	strb	r2, [r3, #0]
	MS5611_PROM_read(I2Cx,datastruct);
 80007ce:	6839      	ldr	r1, [r7, #0]
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff55 	bl	8000680 <MS5611_PROM_read>
	return MS5611_OK;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <MS5611_read_temp>:

/*
 * Function for reading raw temperature of the sensor
 */
uint8_t MS5611_read_temp(I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct, uint8_t resolution)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	@ 0x30
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef* Handle = I2Cx;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	623b      	str	r3, [r7, #32]
	uint8_t address = datastruct->adress;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	77fb      	strb	r3, [r7, #31]
	uint8_t reg = MS6511_ADC_READ;
 80007f8:	2300      	movs	r3, #0
 80007fa:	77bb      	strb	r3, [r7, #30]
	uint8_t data[5];
	uint8_t cmd;
	uint8_t conv_T;

	switch(resolution){
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	3b50      	subs	r3, #80	@ 0x50
 8000800:	2b08      	cmp	r3, #8
 8000802:	d833      	bhi.n	800086c <MS5611_read_temp+0x8c>
 8000804:	a201      	add	r2, pc, #4	@ (adr r2, 800080c <MS5611_read_temp+0x2c>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	08000831 	.word	0x08000831
 8000810:	0800086d 	.word	0x0800086d
 8000814:	0800083d 	.word	0x0800083d
 8000818:	0800086d 	.word	0x0800086d
 800081c:	08000849 	.word	0x08000849
 8000820:	0800086d 	.word	0x0800086d
 8000824:	08000855 	.word	0x08000855
 8000828:	0800086d 	.word	0x0800086d
 800082c:	08000861 	.word	0x08000861
	case MS5611_CMD_CONVERT_D2_256 : cmd = MS5611_CMD_CONVERT_D2_256; conv_T = 1;
 8000830:	2350      	movs	r3, #80	@ 0x50
 8000832:	75fb      	strb	r3, [r7, #23]
 8000834:	2301      	movs	r3, #1
 8000836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800083a:	e01c      	b.n	8000876 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_512 : cmd = MS5611_CMD_CONVERT_D2_512; conv_T = 2;
 800083c:	2352      	movs	r3, #82	@ 0x52
 800083e:	75fb      	strb	r3, [r7, #23]
 8000840:	2302      	movs	r3, #2
 8000842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000846:	e016      	b.n	8000876 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_1024 : cmd = MS5611_CMD_CONVERT_D2_1024; conv_T = 3;
 8000848:	2354      	movs	r3, #84	@ 0x54
 800084a:	75fb      	strb	r3, [r7, #23]
 800084c:	2303      	movs	r3, #3
 800084e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000852:	e010      	b.n	8000876 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_2048 : cmd = MS5611_CMD_CONVERT_D2_2048; conv_T = 5;
 8000854:	2356      	movs	r3, #86	@ 0x56
 8000856:	75fb      	strb	r3, [r7, #23]
 8000858:	2305      	movs	r3, #5
 800085a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800085e:	e00a      	b.n	8000876 <MS5611_read_temp+0x96>
	case MS5611_CMD_CONVERT_D2_4096 : cmd = MS5611_CMD_CONVERT_D2_4096; conv_T = 9;
 8000860:	2358      	movs	r3, #88	@ 0x58
 8000862:	75fb      	strb	r3, [r7, #23]
 8000864:	2309      	movs	r3, #9
 8000866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800086a:	e004      	b.n	8000876 <MS5611_read_temp+0x96>
	default : cmd = MS5611_CMD_CONVERT_D2_4096; conv_T = 9;
 800086c:	2358      	movs	r3, #88	@ 0x58
 800086e:	75fb      	strb	r3, [r7, #23]
 8000870:	2309      	movs	r3, #9
 8000872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	while(HAL_I2C_Master_Transmit(Handle, address, &cmd, 1, 100) != HAL_OK);//asking adc to store data
 8000876:	bf00      	nop
 8000878:	7ffb      	ldrb	r3, [r7, #31]
 800087a:	b299      	uxth	r1, r3
 800087c:	f107 0217 	add.w	r2, r7, #23
 8000880:	2364      	movs	r3, #100	@ 0x64
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2301      	movs	r3, #1
 8000886:	6a38      	ldr	r0, [r7, #32]
 8000888:	f002 fd4a 	bl	8003320 <HAL_I2C_Master_Transmit>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1f2      	bne.n	8000878 <MS5611_read_temp+0x98>
	HAL_Delay(conv_T); 														//convertion time
 8000892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fc5a 	bl	8002150 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle, address, &reg, 1, 100) != HAL_OK);//asking for the data
 800089c:	bf00      	nop
 800089e:	7ffb      	ldrb	r3, [r7, #31]
 80008a0:	b299      	uxth	r1, r3
 80008a2:	f107 021e 	add.w	r2, r7, #30
 80008a6:	2364      	movs	r3, #100	@ 0x64
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	6a38      	ldr	r0, [r7, #32]
 80008ae:	f002 fd37 	bl	8003320 <HAL_I2C_Master_Transmit>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f2      	bne.n	800089e <MS5611_read_temp+0xbe>
	while(HAL_I2C_Master_Receive(Handle, address, data, 3, 100) != HAL_OK);//receive the data
 80008b8:	bf00      	nop
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	b299      	uxth	r1, r3
 80008be:	f107 0218 	add.w	r2, r7, #24
 80008c2:	2364      	movs	r3, #100	@ 0x64
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2303      	movs	r3, #3
 80008c8:	6a38      	ldr	r0, [r7, #32]
 80008ca:	f002 fe27 	bl	800351c <HAL_I2C_Master_Receive>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1f2      	bne.n	80008ba <MS5611_read_temp+0xda>

	datastruct->D[1] = (data[0] << 16 | data[1] << 8 | data[2]);
 80008d4:	7e3b      	ldrb	r3, [r7, #24]
 80008d6:	041a      	lsls	r2, r3, #16
 80008d8:	7e7b      	ldrb	r3, [r7, #25]
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	4313      	orrs	r3, r2
 80008de:	7eba      	ldrb	r2, [r7, #26]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	461a      	mov	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	619a      	str	r2, [r3, #24]
	return MS5611_OK;
 80008e8:	2301      	movs	r3, #1
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3728      	adds	r7, #40	@ 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop

080008f4 <MS5611_read_press>:

/*
 * Function for reading raw pressure of the sensor
 */
uint8_t MS5611_read_press (I2C_HandleTypeDef* I2Cx, MS5611_t* datastruct, uint8_t resolution)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	@ 0x30
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	4613      	mov	r3, r2
 8000900:	71fb      	strb	r3, [r7, #7]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	623b      	str	r3, [r7, #32]
	uint8_t address = datastruct->adress;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	77fb      	strb	r3, [r7, #31]
	uint8_t reg = MS6511_ADC_READ;
 800090c:	2300      	movs	r3, #0
 800090e:	77bb      	strb	r3, [r7, #30]
	uint8_t data[3];
	uint8_t cmd;
	uint8_t conv_T;

	switch(resolution){
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	3b40      	subs	r3, #64	@ 0x40
 8000914:	2b08      	cmp	r3, #8
 8000916:	d833      	bhi.n	8000980 <MS5611_read_press+0x8c>
 8000918:	a201      	add	r2, pc, #4	@ (adr r2, 8000920 <MS5611_read_press+0x2c>)
 800091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091e:	bf00      	nop
 8000920:	08000945 	.word	0x08000945
 8000924:	08000981 	.word	0x08000981
 8000928:	08000951 	.word	0x08000951
 800092c:	08000981 	.word	0x08000981
 8000930:	0800095d 	.word	0x0800095d
 8000934:	08000981 	.word	0x08000981
 8000938:	08000969 	.word	0x08000969
 800093c:	08000981 	.word	0x08000981
 8000940:	08000975 	.word	0x08000975
	case MS5611_CMD_CONVERT_D1_256 : cmd = MS5611_CMD_CONVERT_D1_256; conv_T = 1;
 8000944:	2340      	movs	r3, #64	@ 0x40
 8000946:	75fb      	strb	r3, [r7, #23]
 8000948:	2301      	movs	r3, #1
 800094a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800094e:	e01c      	b.n	800098a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_512 : cmd = MS5611_CMD_CONVERT_D1_512; conv_T = 2;
 8000950:	2342      	movs	r3, #66	@ 0x42
 8000952:	75fb      	strb	r3, [r7, #23]
 8000954:	2302      	movs	r3, #2
 8000956:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800095a:	e016      	b.n	800098a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_1024 : cmd = MS5611_CMD_CONVERT_D1_1024; conv_T = 3;
 800095c:	2344      	movs	r3, #68	@ 0x44
 800095e:	75fb      	strb	r3, [r7, #23]
 8000960:	2303      	movs	r3, #3
 8000962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000966:	e010      	b.n	800098a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_2048 : cmd = MS5611_CMD_CONVERT_D1_2048; conv_T = 5;
 8000968:	2346      	movs	r3, #70	@ 0x46
 800096a:	75fb      	strb	r3, [r7, #23]
 800096c:	2305      	movs	r3, #5
 800096e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 8000972:	e00a      	b.n	800098a <MS5611_read_press+0x96>
	case MS5611_CMD_CONVERT_D1_4096 : cmd = MS5611_CMD_CONVERT_D1_4096; conv_T = 9;
 8000974:	2348      	movs	r3, #72	@ 0x48
 8000976:	75fb      	strb	r3, [r7, #23]
 8000978:	2309      	movs	r3, #9
 800097a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	break;
 800097e:	e004      	b.n	800098a <MS5611_read_press+0x96>
	default : cmd = MS5611_CMD_CONVERT_D1_4096; conv_T = 9;
 8000980:	2348      	movs	r3, #72	@ 0x48
 8000982:	75fb      	strb	r3, [r7, #23]
 8000984:	2309      	movs	r3, #9
 8000986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	while(HAL_I2C_Master_Transmit(Handle, address, &cmd, 1, 100) != HAL_OK);//asking adc to store data
 800098a:	bf00      	nop
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	b299      	uxth	r1, r3
 8000990:	f107 0217 	add.w	r2, r7, #23
 8000994:	2364      	movs	r3, #100	@ 0x64
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	6a38      	ldr	r0, [r7, #32]
 800099c:	f002 fcc0 	bl	8003320 <HAL_I2C_Master_Transmit>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f2      	bne.n	800098c <MS5611_read_press+0x98>
	HAL_Delay(conv_T); 														//convertion time
 80009a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fbd0 	bl	8002150 <HAL_Delay>
	while(HAL_I2C_Master_Transmit(Handle, address, &reg, 1, 100) != HAL_OK);//asking for the data
 80009b0:	bf00      	nop
 80009b2:	7ffb      	ldrb	r3, [r7, #31]
 80009b4:	b299      	uxth	r1, r3
 80009b6:	f107 021e 	add.w	r2, r7, #30
 80009ba:	2364      	movs	r3, #100	@ 0x64
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2301      	movs	r3, #1
 80009c0:	6a38      	ldr	r0, [r7, #32]
 80009c2:	f002 fcad 	bl	8003320 <HAL_I2C_Master_Transmit>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f2      	bne.n	80009b2 <MS5611_read_press+0xbe>
	while(HAL_I2C_Master_Receive(Handle, address, data, 3, 100) != HAL_OK);//receive the data
 80009cc:	bf00      	nop
 80009ce:	7ffb      	ldrb	r3, [r7, #31]
 80009d0:	b299      	uxth	r1, r3
 80009d2:	f107 0218 	add.w	r2, r7, #24
 80009d6:	2364      	movs	r3, #100	@ 0x64
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2303      	movs	r3, #3
 80009dc:	6a38      	ldr	r0, [r7, #32]
 80009de:	f002 fd9d 	bl	800351c <HAL_I2C_Master_Receive>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f2      	bne.n	80009ce <MS5611_read_press+0xda>

	datastruct->D[0] = (data[0] << 16 | data[1] << 8 | data[2]);
 80009e8:	7e3b      	ldrb	r3, [r7, #24]
 80009ea:	041a      	lsls	r2, r3, #16
 80009ec:	7e7b      	ldrb	r3, [r7, #25]
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	4313      	orrs	r3, r2
 80009f2:	7eba      	ldrb	r2, [r7, #26]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	461a      	mov	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	615a      	str	r2, [r3, #20]
	return MS5611_OK;
 80009fc:	2301      	movs	r3, #1
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop

08000a08 <MS5611_calculate>:

/*
 * Function for pressure and temperature calculation
 */
uint8_t MS5611_calculate(MS5611_t* datastruct)
{
 8000a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a0c:	b0e0      	sub	sp, #384	@ 0x180
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
	int64_t dT = 0,TEMP = 0,T2 = 0,OFF = 0,OFF2 = 0,SENS2 = 0,SENS = 0,PRES = 0;
 8000a14:	f04f 0200 	mov.w	r2, #0
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 8000a2c:	f04f 0200 	mov.w	r2, #0
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	f04f 0300 	mov.w	r3, #0
 8000a4c:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	f04f 0300 	mov.w	r3, #0
 8000a70:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

	dT = datastruct->D[1] - ((int32_t) (datastruct->C[4])<<8);
 8000a74:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a78:	699a      	ldr	r2, [r3, #24]
 8000a7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a7e:	895b      	ldrh	r3, [r3, #10]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	663b      	str	r3, [r7, #96]	@ 0x60
 8000a88:	667a      	str	r2, [r7, #100]	@ 0x64
 8000a8a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000a8e:	e9c7 2358 	strd	r2, r3, [r7, #352]	@ 0x160
	TEMP = 2000 + ((int32_t) (dT*(datastruct->C[5]))>>23);
 8000a92:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8000a96:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000a9a:	899b      	ldrh	r3, [r3, #12]
 8000a9c:	fb02 f303 	mul.w	r3, r2, r3
 8000aa0:	15db      	asrs	r3, r3, #23
 8000aa2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000aa6:	17da      	asrs	r2, r3, #31
 8000aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000aaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000ab0:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
	OFF = (((int64_t)(datastruct->C[1])) << 16) + (((datastruct->C[3]) * dT) >> 7);
 8000ab4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000ab8:	889b      	ldrh	r3, [r3, #4]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000ac2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8000ac6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8000aca:	460b      	mov	r3, r1
 8000acc:	0c1b      	lsrs	r3, r3, #16
 8000ace:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	041b      	lsls	r3, r3, #16
 8000ad6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000ada:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000ade:	891b      	ldrh	r3, [r3, #8]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	4693      	mov	fp, r2
 8000ae8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000aec:	fb0b f203 	mul.w	r2, fp, r3
 8000af0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000af4:	fb0a f303 	mul.w	r3, sl, r3
 8000af8:	441a      	add	r2, r3
 8000afa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000afe:	fba3 450a 	umull	r4, r5, r3, sl
 8000b02:	1953      	adds	r3, r2, r5
 8000b04:	461d      	mov	r5, r3
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	f04f 0300 	mov.w	r3, #0
 8000b0e:	09e2      	lsrs	r2, r4, #7
 8000b10:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8000b14:	11eb      	asrs	r3, r5, #7
 8000b16:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	1889      	adds	r1, r1, r2
 8000b1e:	6539      	str	r1, [r7, #80]	@ 0x50
 8000b20:	4629      	mov	r1, r5
 8000b22:	eb43 0101 	adc.w	r1, r3, r1
 8000b26:	6579      	str	r1, [r7, #84]	@ 0x54
 8000b28:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8000b2c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
	SENS = (((int64_t)(datastruct->C[0])) << 15) + (((datastruct->C[2]) * dT) >> 8);
 8000b30:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000b34:	885b      	ldrh	r3, [r3, #2]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8000b3e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	f04f 0100 	mov.w	r1, #0
 8000b4a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b4e:	462b      	mov	r3, r5
 8000b50:	03d9      	lsls	r1, r3, #15
 8000b52:	4623      	mov	r3, r4
 8000b54:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
 8000b58:	4623      	mov	r3, r4
 8000b5a:	03d8      	lsls	r0, r3, #15
 8000b5c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000b60:	88db      	ldrh	r3, [r3, #6]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	2200      	movs	r2, #0
 8000b66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8000b6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000b72:	e9d7 ab3a 	ldrd	sl, fp, [r7, #232]	@ 0xe8
 8000b76:	465a      	mov	r2, fp
 8000b78:	fb02 f203 	mul.w	r2, r2, r3
 8000b7c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000b80:	4654      	mov	r4, sl
 8000b82:	fb04 f303 	mul.w	r3, r4, r3
 8000b86:	441a      	add	r2, r3
 8000b88:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000b8c:	4654      	mov	r4, sl
 8000b8e:	fba3 8904 	umull	r8, r9, r3, r4
 8000b92:	eb02 0309 	add.w	r3, r2, r9
 8000b96:	4699      	mov	r9, r3
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8000ba4:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8000ba8:	ea4f 2329 	mov.w	r3, r9, asr #8
 8000bac:	1884      	adds	r4, r0, r2
 8000bae:	64bc      	str	r4, [r7, #72]	@ 0x48
 8000bb0:	eb41 0303 	adc.w	r3, r1, r3
 8000bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000bb6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8000bba:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148


	if(TEMP < 2000) { //temperature < 20°C
 8000bbe:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000bc2:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8000bc6:	f173 0300 	sbcs.w	r3, r3, #0
 8000bca:	f280 81d2 	bge.w	8000f72 <MS5611_calculate+0x56a>
		T2 = ( dT*dT )>>31;
 8000bce:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8000bd2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bd6:	fb03 f102 	mul.w	r1, r3, r2
 8000bda:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8000bde:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000be2:	fb02 f303 	mul.w	r3, r2, r3
 8000be6:	18ca      	adds	r2, r1, r3
 8000be8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000bec:	fba3 1303 	umull	r1, r3, r3, r3
 8000bf0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8000bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000bfe:	18d3      	adds	r3, r2, r3
 8000c00:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8000c10:	4621      	mov	r1, r4
 8000c12:	0fca      	lsrs	r2, r1, #31
 8000c14:	4629      	mov	r1, r5
 8000c16:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	17cb      	asrs	r3, r1, #31
 8000c1e:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		OFF2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 2;
 8000c22:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000c26:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000c2a:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8000c2e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000c32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c36:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000c3a:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000c3e:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8000c42:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000c46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000c4a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c4e:	462b      	mov	r3, r5
 8000c50:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8000c54:	4642      	mov	r2, r8
 8000c56:	fb02 f203 	mul.w	r2, r2, r3
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	fb01 f303 	mul.w	r3, r1, r3
 8000c62:	4413      	add	r3, r2
 8000c64:	4622      	mov	r2, r4
 8000c66:	4641      	mov	r1, r8
 8000c68:	fba2 1201 	umull	r1, r2, r2, r1
 8000c6c:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8000c70:	460a      	mov	r2, r1
 8000c72:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8000c76:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000c7a:	4413      	add	r3, r2
 8000c7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000c80:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8000c84:	4622      	mov	r2, r4
 8000c86:	462b      	mov	r3, r5
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	f04f 0100 	mov.w	r1, #0
 8000c90:	0099      	lsls	r1, r3, #2
 8000c92:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000c96:	0090      	lsls	r0, r2, #2
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	1851      	adds	r1, r2, r1
 8000ca0:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	eb43 0101 	adc.w	r1, r3, r1
 8000caa:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8000cae:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	0fdb      	lsrs	r3, r3, #31
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8000cba:	647a      	str	r2, [r7, #68]	@ 0x44
 8000cbc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8000cc0:	4623      	mov	r3, r4
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	189b      	adds	r3, r3, r2
 8000cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cc8:	460b      	mov	r3, r1
 8000cca:	462a      	mov	r2, r5
 8000ccc:	eb42 0303 	adc.w	r3, r2, r3
 8000cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8000cde:	4621      	mov	r1, r4
 8000ce0:	084a      	lsrs	r2, r1, #1
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000ce8:	4629      	mov	r1, r5
 8000cea:	104b      	asrs	r3, r1, #1
 8000cec:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		SENS2 = 5 * (TEMP - 2000) * (TEMP - 2000) / 4;
 8000cf0:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000cf4:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000cf8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8000cfc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000d00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000d04:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000d08:	f5b2 61fa 	subs.w	r1, r2, #2000	@ 0x7d0
 8000d0c:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8000d10:	f143 33ff 	adc.w	r3, r3, #4294967295
 8000d14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000d18:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000d1c:	462b      	mov	r3, r5
 8000d1e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8000d22:	4642      	mov	r2, r8
 8000d24:	fb02 f203 	mul.w	r2, r2, r3
 8000d28:	464b      	mov	r3, r9
 8000d2a:	4621      	mov	r1, r4
 8000d2c:	fb01 f303 	mul.w	r3, r1, r3
 8000d30:	4413      	add	r3, r2
 8000d32:	4622      	mov	r2, r4
 8000d34:	4641      	mov	r1, r8
 8000d36:	fba2 1201 	umull	r1, r2, r2, r1
 8000d3a:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8000d3e:	460a      	mov	r2, r1
 8000d40:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 8000d44:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000d48:	4413      	add	r3, r2
 8000d4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000d4e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8000d52:	4622      	mov	r2, r4
 8000d54:	462b      	mov	r3, r5
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	f04f 0100 	mov.w	r1, #0
 8000d5e:	0099      	lsls	r1, r3, #2
 8000d60:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000d64:	0090      	lsls	r0, r2, #2
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	1851      	adds	r1, r2, r1
 8000d6e:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8000d72:	4629      	mov	r1, r5
 8000d74:	eb43 0101 	adc.w	r1, r3, r1
 8000d78:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 8000d7c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	da06      	bge.n	8000d92 <MS5611_calculate+0x38a>
 8000d84:	1cd1      	adds	r1, r2, #3
 8000d86:	6339      	str	r1, [r7, #48]	@ 0x30
 8000d88:	f143 0300 	adc.w	r3, r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000d92:	f04f 0000 	mov.w	r0, #0
 8000d96:	f04f 0100 	mov.w	r1, #0
 8000d9a:	0890      	lsrs	r0, r2, #2
 8000d9c:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8000da0:	1099      	asrs	r1, r3, #2
 8000da2:	e9c7 015a 	strd	r0, r1, [r7, #360]	@ 0x168

		if (TEMP < -1500) { //temperature < -15°C
 8000da6:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000daa:	49c5      	ldr	r1, [pc, #788]	@ (80010c0 <MS5611_calculate+0x6b8>)
 8000dac:	428a      	cmp	r2, r1
 8000dae:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8000db2:	f280 80f0 	bge.w	8000f96 <MS5611_calculate+0x58e>
			OFF2 = OFF2 + (7 * (TEMP + 1500) * (TEMP + 1500));
 8000db6:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000dba:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000dbe:	1851      	adds	r1, r2, r1
 8000dc0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8000dc4:	f143 0300 	adc.w	r3, r3, #0
 8000dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000dcc:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000dd0:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000dd4:	1851      	adds	r1, r2, r1
 8000dd6:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8000dda:	f143 0300 	adc.w	r3, r3, #0
 8000dde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000de2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000de6:	462b      	mov	r3, r5
 8000de8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8000dec:	4642      	mov	r2, r8
 8000dee:	fb02 f203 	mul.w	r2, r2, r3
 8000df2:	464b      	mov	r3, r9
 8000df4:	4621      	mov	r1, r4
 8000df6:	fb01 f303 	mul.w	r3, r1, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	4641      	mov	r1, r8
 8000e00:	fba2 1201 	umull	r1, r2, r2, r1
 8000e04:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000e08:	460a      	mov	r2, r1
 8000e0a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8000e0e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000e12:	4413      	add	r3, r2
 8000e14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8000e18:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	462b      	mov	r3, r5
 8000e20:	f04f 0000 	mov.w	r0, #0
 8000e24:	f04f 0100 	mov.w	r1, #0
 8000e28:	00d9      	lsls	r1, r3, #3
 8000e2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000e2e:	00d0      	lsls	r0, r2, #3
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	4621      	mov	r1, r4
 8000e36:	1a51      	subs	r1, r2, r1
 8000e38:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8000e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e46:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8000e4a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8000e4e:	4621      	mov	r1, r4
 8000e50:	1851      	adds	r1, r2, r1
 8000e52:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000e54:	4629      	mov	r1, r5
 8000e56:	eb43 0101 	adc.w	r1, r3, r1
 8000e5a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8000e5c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000e60:	e9c7 345c 	strd	r3, r4, [r7, #368]	@ 0x170
			SENS2 = SENS2 + (11 * (TEMP + 1500) * (TEMP + 1500) / 2);
 8000e64:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000e68:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000e6c:	1851      	adds	r1, r2, r1
 8000e6e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8000e72:	f143 0300 	adc.w	r3, r3, #0
 8000e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000e7a:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8000e7e:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000e82:	1851      	adds	r1, r2, r1
 8000e84:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8000e88:	f143 0300 	adc.w	r3, r3, #0
 8000e8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e90:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8000e94:	462b      	mov	r3, r5
 8000e96:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8000e9a:	4642      	mov	r2, r8
 8000e9c:	fb02 f203 	mul.w	r2, r2, r3
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	4621      	mov	r1, r4
 8000ea4:	fb01 f303 	mul.w	r3, r1, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4622      	mov	r2, r4
 8000eac:	4641      	mov	r1, r8
 8000eae:	fba2 1201 	umull	r1, r2, r2, r1
 8000eb2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8000eb6:	460a      	mov	r2, r1
 8000eb8:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8000ebc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000ec0:	4413      	add	r3, r2
 8000ec2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000ec6:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8000eca:	4622      	mov	r2, r4
 8000ecc:	462b      	mov	r3, r5
 8000ece:	1891      	adds	r1, r2, r2
 8000ed0:	6239      	str	r1, [r7, #32]
 8000ed2:	415b      	adcs	r3, r3
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000eda:	4621      	mov	r1, r4
 8000edc:	1851      	adds	r1, r2, r1
 8000ede:	61b9      	str	r1, [r7, #24]
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	414b      	adcs	r3, r1
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	008b      	lsls	r3, r1, #2
 8000ef6:	4641      	mov	r1, r8
 8000ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000efc:	4641      	mov	r1, r8
 8000efe:	008a      	lsls	r2, r1, #2
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	4603      	mov	r3, r0
 8000f06:	4622      	mov	r2, r4
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000f0e:	460b      	mov	r3, r1
 8000f10:	462a      	mov	r2, r5
 8000f12:	eb63 0302 	sbc.w	r3, r3, r2
 8000f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f1a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8000f1e:	460b      	mov	r3, r1
 8000f20:	0fdb      	lsrs	r3, r3, #31
 8000f22:	2200      	movs	r2, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	617a      	str	r2, [r7, #20]
 8000f28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000f2c:	4623      	mov	r3, r4
 8000f2e:	4602      	mov	r2, r0
 8000f30:	189b      	adds	r3, r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	460b      	mov	r3, r1
 8000f36:	462a      	mov	r2, r5
 8000f38:	eb42 0303 	adc.w	r3, r2, r3
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	f04f 0300 	mov.w	r3, #0
 8000f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000f4a:	4621      	mov	r1, r4
 8000f4c:	084a      	lsrs	r2, r1, #1
 8000f4e:	4629      	mov	r1, r5
 8000f50:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000f54:	4629      	mov	r1, r5
 8000f56:	104b      	asrs	r3, r1, #1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8000f60:	1814      	adds	r4, r2, r0
 8000f62:	603c      	str	r4, [r7, #0]
 8000f64:	414b      	adcs	r3, r1
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f6c:	e9c7 345a 	strd	r3, r4, [r7, #360]	@ 0x168
 8000f70:	e011      	b.n	8000f96 <MS5611_calculate+0x58e>
		}
	}
	else { //temperature > 20°C
		T2 = 0;
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		OFF2 = 0;
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	f04f 0300 	mov.w	r3, #0
 8000f86:	e9c7 235c 	strd	r2, r3, [r7, #368]	@ 0x170
		SENS2 = 0;
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	}

	datastruct->dT = dT;
 8000f96:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8000f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000f9e:	61da      	str	r2, [r3, #28]
	datastruct->OFF = OFF - OFF2;
 8000fa0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8000fa4:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8000fa8:	1a84      	subs	r4, r0, r2
 8000faa:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8000fae:	eb61 0303 	sbc.w	r3, r1, r3
 8000fb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000fb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000fba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8000fbe:	e9c3 1208 	strd	r1, r2, [r3, #32]
	datastruct->TEMP = TEMP - T2;
 8000fc2:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000fc6:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000fd2:	631a      	str	r2, [r3, #48]	@ 0x30
	datastruct->SENS = SENS - SENS2;
 8000fd4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8000fd8:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8000fdc:	1a84      	subs	r4, r0, r2
 8000fde:	67bc      	str	r4, [r7, #120]	@ 0x78
 8000fe0:	eb61 0303 	sbc.w	r3, r1, r3
 8000fe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000fe6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000fea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8000fee:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
	datastruct->end_temp = (TEMP/100);
 8000ff2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8000ff6:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	f7ff f95f 	bl	80002c0 <__aeabi_ldivmod>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800100a:	635a      	str	r2, [r3, #52]	@ 0x34

	PRES = ((((int32_t)(datastruct->D[0]) * (datastruct->SENS))>>21) - (datastruct->OFF))>>15;
 800100c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	17da      	asrs	r2, r3, #31
 8001014:	673b      	str	r3, [r7, #112]	@ 0x70
 8001016:	677a      	str	r2, [r7, #116]	@ 0x74
 8001018:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800101c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001020:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001024:	4629      	mov	r1, r5
 8001026:	fb02 f001 	mul.w	r0, r2, r1
 800102a:	4621      	mov	r1, r4
 800102c:	fb01 f103 	mul.w	r1, r1, r3
 8001030:	4401      	add	r1, r0
 8001032:	4620      	mov	r0, r4
 8001034:	fba0 2302 	umull	r2, r3, r0, r2
 8001038:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800103c:	4613      	mov	r3, r2
 800103e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001046:	18cb      	adds	r3, r1, r3
 8001048:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001058:	4621      	mov	r1, r4
 800105a:	0d4a      	lsrs	r2, r1, #21
 800105c:	4629      	mov	r1, r5
 800105e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001062:	4629      	mov	r1, r5
 8001064:	154b      	asrs	r3, r1, #21
 8001066:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800106a:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800106e:	1a14      	subs	r4, r2, r0
 8001070:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001072:	eb63 0301 	sbc.w	r3, r3, r1
 8001076:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001084:	4621      	mov	r1, r4
 8001086:	0bca      	lsrs	r2, r1, #15
 8001088:	4629      	mov	r1, r5
 800108a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800108e:	4629      	mov	r1, r5
 8001090:	13cb      	asrs	r3, r1, #15
 8001092:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140

	datastruct->end_pres = (PRES / 100);
 8001096:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800109a:	f04f 0264 	mov.w	r2, #100	@ 0x64
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	f7ff f90d 	bl	80002c0 <__aeabi_ldivmod>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80010ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	return MS5611_OK;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010be:	bf00      	nop
 80010c0:	fffffa24 	.word	0xfffffa24

080010c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_DMA_Init+0x4c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <MX_DMA_Init+0x4c>)
 80010d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <MX_DMA_Init+0x4c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	203b      	movs	r0, #59	@ 0x3b
 80010ec:	f001 f92f 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010f0:	203b      	movs	r0, #59	@ 0x3b
 80010f2:	f001 f948 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2045      	movs	r0, #69	@ 0x45
 80010fc:	f001 f927 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001100:	2045      	movs	r0, #69	@ 0x45
 8001102:	f001 f940 	bl	8002386 <HAL_NVIC_EnableIRQ>

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <MX_FMPI2C1_Init>:

FMPI2C_HandleTypeDef hfmpi2c1;

/* FMPI2C1 init function */
void MX_FMPI2C1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 800111a:	4a17      	ldr	r2, [pc, #92]	@ (8001178 <MX_FMPI2C1_Init+0x64>)
 800111c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00808CD2;
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 8001120:	4a16      	ldr	r2, [pc, #88]	@ (800117c <MX_FMPI2C1_Init+0x68>)
 8001122:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001124:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 800112c:	2201      	movs	r2, #1
 800112e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001130:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001136:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 8001138:	2200      	movs	r2, #0
 800113a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 8001144:	2200      	movs	r2, #0
 8001146:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800114e:	4809      	ldr	r0, [pc, #36]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 8001150:	f001 fcd2 	bl	8002af8 <HAL_FMPI2C_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800115a:	f000 fbd3 	bl	8001904 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <MX_FMPI2C1_Init+0x60>)
 8001162:	f001 fd64 	bl	8002c2e <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 800116c:	f000 fbca 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000017c 	.word	0x2000017c
 8001178:	40006000 	.word	0x40006000
 800117c:	00808cd2 	.word	0x00808cd2

08001180 <HAL_FMPI2C_MspInit>:

void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* fmpi2cHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0a0      	sub	sp, #128	@ 0x80
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	225c      	movs	r2, #92	@ 0x5c
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00c f933 	bl	800d40c <memset>
  if(fmpi2cHandle->Instance==FMPI2C1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a20      	ldr	r2, [pc, #128]	@ (800122c <HAL_FMPI2C_MspInit+0xac>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d139      	bne.n	8001224 <HAL_FMPI2C_MspInit+0xa4>

  /* USER CODE END FMPI2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1;
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80011b4:	2300      	movs	r3, #0
 80011b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4618      	mov	r0, r3
 80011be:	f004 fb1b 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_FMPI2C_MspInit+0x4c>
    {
      Error_Handler();
 80011c8:	f000 fb9c 	bl	8001904 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_FMPI2C_MspInit+0xb0>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <HAL_FMPI2C_MspInit+0xb0>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6313      	str	r3, [r2, #48]	@ 0x30
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_FMPI2C_MspInit+0xb0>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e8:	23c0      	movs	r3, #192	@ 0xc0
 80011ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <HAL_FMPI2C_MspInit+0xb4>)
 8001204:	f001 fd5e 	bl	8002cc4 <HAL_GPIO_Init>

    /* FMPI2C1 clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_FMPI2C_MspInit+0xb0>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_FMPI2C_MspInit+0xb0>)
 8001212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_FMPI2C_MspInit+0xb0>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }
}
 8001224:	bf00      	nop
 8001226:	3780      	adds	r7, #128	@ 0x80
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40006000 	.word	0x40006000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800

08001238 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b78      	ldr	r3, [pc, #480]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a77      	ldr	r2, [pc, #476]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b75      	ldr	r3, [pc, #468]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b71      	ldr	r3, [pc, #452]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a70      	ldr	r2, [pc, #448]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b6e      	ldr	r3, [pc, #440]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a69      	ldr	r2, [pc, #420]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b67      	ldr	r3, [pc, #412]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b63      	ldr	r3, [pc, #396]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a62      	ldr	r2, [pc, #392]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b60      	ldr	r3, [pc, #384]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b59      	ldr	r3, [pc, #356]	@ (8001434 <MX_GPIO_Init+0x1fc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, N_USERL1_Pin|N_USERL2_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2106      	movs	r1, #6
 80012de:	4856      	ldr	r0, [pc, #344]	@ (8001438 <MX_GPIO_Init+0x200>)
 80012e0:	f001 fe9c 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, N_98PW_RST_Pin|N_98PW_NSS_Pin|N_BUZZER_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f248 0118 	movw	r1, #32792	@ 0x8018
 80012ea:	4854      	ldr	r0, [pc, #336]	@ (800143c <MX_GPIO_Init+0x204>)
 80012ec:	f001 fe96 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|N_fire_b_Pin|N_fire_a_Pin, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 5198 	mov.w	r1, #4864	@ 0x1300
 80012f6:	4852      	ldr	r0, [pc, #328]	@ (8001440 <MX_GPIO_Init+0x208>)
 80012f8:	f001 fe90 	bl	800301c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_INPUT_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_INPUT_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4849      	ldr	r0, [pc, #292]	@ (8001438 <MX_GPIO_Init+0x200>)
 8001312:	f001 fcd7 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_sense_b_Pin;
 8001316:	2301      	movs	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_sense_b_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	4843      	ldr	r0, [pc, #268]	@ (8001438 <MX_GPIO_Init+0x200>)
 800132a:	f001 fccb 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = N_USERL1_Pin|N_USERL2_Pin;
 800132e:	2306      	movs	r3, #6
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001336:	2302      	movs	r3, #2
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	483c      	ldr	r0, [pc, #240]	@ (8001438 <MX_GPIO_Init+0x200>)
 8001346:	f001 fcbd 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_sense_a_Pin;
 800134a:	2304      	movs	r3, #4
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_sense_a_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4837      	ldr	r0, [pc, #220]	@ (800143c <MX_GPIO_Init+0x204>)
 800135e:	f001 fcb1 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = N_98PW_RST_Pin|N_98PW_NSS_Pin;
 8001362:	2318      	movs	r3, #24
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4830      	ldr	r0, [pc, #192]	@ (800143c <MX_GPIO_Init+0x204>)
 800137a:	f001 fca3 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = N_98PW_DIO0_Pin|N_98PW_DIO1_Pin;
 800137e:	2330      	movs	r3, #48	@ 0x30
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001382:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4829      	ldr	r0, [pc, #164]	@ (8001438 <MX_GPIO_Init+0x200>)
 8001394:	f001 fc96 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4823      	ldr	r0, [pc, #140]	@ (8001440 <MX_GPIO_Init+0x208>)
 80013b2:	f001 fc87 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_BUZZER_Pin;
 80013b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(N_BUZZER_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	481b      	ldr	r0, [pc, #108]	@ (800143c <MX_GPIO_Init+0x204>)
 80013d0:	f001 fc78 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = N_USER_BUTTON_Pin;
 80013d4:	2320      	movs	r3, #32
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(N_USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4816      	ldr	r0, [pc, #88]	@ (8001440 <MX_GPIO_Init+0x208>)
 80013e8:	f001 fc6c 	bl	8002cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = N_fire_b_Pin|N_fire_a_Pin;
 80013ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	480e      	ldr	r0, [pc, #56]	@ (8001440 <MX_GPIO_Init+0x208>)
 8001406:	f001 fc5d 	bl	8002cc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	200a      	movs	r0, #10
 8001410:	f000 ff9d 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001414:	200a      	movs	r0, #10
 8001416:	f000 ffb6 	bl	8002386 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	2017      	movs	r0, #23
 8001420:	f000 ff95 	bl	800234e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001424:	2017      	movs	r0, #23
 8001426:	f000 ffae 	bl	8002386 <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40020800 	.word	0x40020800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400

08001444 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	@ (8001498 <MX_I2C1_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <MX_I2C1_Init+0x58>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <MX_I2C1_Init+0x50>)
 8001482:	f001 fe09 	bl	8003098 <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800148c:	f000 fa3a 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200001d0 	.word	0x200001d0
 8001498:	40005400 	.word	0x40005400
 800149c:	000186a0 	.word	0x000186a0

080014a0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014a6:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <MX_I2C2_Init+0x54>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014ac:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_I2C2_Init+0x58>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <MX_I2C2_Init+0x50>)
 80014de:	f001 fddb 	bl	8003098 <HAL_I2C_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 fa0c 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000224 	.word	0x20000224
 80014f4:	40005800 	.word	0x40005800
 80014f8:	000186a0 	.word	0x000186a0

080014fc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_I2C3_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <MX_I2C3_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_I2C3_Init+0x50>)
 8001508:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <MX_I2C3_Init+0x58>)
 800150a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_I2C3_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_I2C3_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_I2C3_Init+0x50>)
 800151a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800151e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <MX_I2C3_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_I2C3_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <MX_I2C3_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_I2C3_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	@ (800154c <MX_I2C3_Init+0x50>)
 800153a:	f001 fdad 	bl	8003098 <HAL_I2C_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 f9de 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000278 	.word	0x20000278
 8001550:	40005c00 	.word	0x40005c00
 8001554:	000186a0 	.word	0x000186a0

08001558 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b090      	sub	sp, #64	@ 0x40
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a6b      	ldr	r2, [pc, #428]	@ (8001724 <HAL_I2C_MspInit+0x1cc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12c      	bne.n	80015d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800157e:	4b6a      	ldr	r3, [pc, #424]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a69      	ldr	r2, [pc, #420]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b67      	ldr	r3, [pc, #412]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001596:	23c0      	movs	r3, #192	@ 0xc0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159a:	2312      	movs	r3, #18
 800159c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a6:	2304      	movs	r3, #4
 80015a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ae:	4619      	mov	r1, r3
 80015b0:	485e      	ldr	r0, [pc, #376]	@ (800172c <HAL_I2C_MspInit+0x1d4>)
 80015b2:	f001 fb87 	bl	8002cc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a5a      	ldr	r2, [pc, #360]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80015c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015d2:	e0a2      	b.n	800171a <HAL_I2C_MspInit+0x1c2>
  else if(i2cHandle->Instance==I2C2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a55      	ldr	r2, [pc, #340]	@ (8001730 <HAL_I2C_MspInit+0x1d8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d14c      	bne.n	8001678 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
 80015e2:	4b51      	ldr	r3, [pc, #324]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a50      	ldr	r2, [pc, #320]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a49      	ldr	r2, [pc, #292]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001628:	2304      	movs	r3, #4
 800162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001630:	4619      	mov	r1, r3
 8001632:	483e      	ldr	r0, [pc, #248]	@ (800172c <HAL_I2C_MspInit+0x1d4>)
 8001634:	f001 fb46 	bl	8002cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163e:	2312      	movs	r3, #18
 8001640:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800164a:	2304      	movs	r3, #4
 800164c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001652:	4619      	mov	r1, r3
 8001654:	4837      	ldr	r0, [pc, #220]	@ (8001734 <HAL_I2C_MspInit+0x1dc>)
 8001656:	f001 fb35 	bl	8002cc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	4b32      	ldr	r3, [pc, #200]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a31      	ldr	r2, [pc, #196]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001664:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
}
 8001676:	e050      	b.n	800171a <HAL_I2C_MspInit+0x1c2>
  else if(i2cHandle->Instance==I2C3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2e      	ldr	r2, [pc, #184]	@ (8001738 <HAL_I2C_MspInit+0x1e0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d14b      	bne.n	800171a <HAL_I2C_MspInit+0x1c2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a27      	ldr	r2, [pc, #156]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b25      	ldr	r3, [pc, #148]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b21      	ldr	r3, [pc, #132]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a20      	ldr	r2, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016cc:	2304      	movs	r3, #4
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016d4:	4619      	mov	r1, r3
 80016d6:	4817      	ldr	r0, [pc, #92]	@ (8001734 <HAL_I2C_MspInit+0x1dc>)
 80016d8:	f001 faf4 	bl	8002cc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016ee:	2304      	movs	r3, #4
 80016f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016f6:	4619      	mov	r1, r3
 80016f8:	4810      	ldr	r0, [pc, #64]	@ (800173c <HAL_I2C_MspInit+0x1e4>)
 80016fa:	f001 fae3 	bl	8002cc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001708:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_I2C_MspInit+0x1d0>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
}
 800171a:	bf00      	nop
 800171c:	3740      	adds	r7, #64	@ 0x40
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40005400 	.word	0x40005400
 8001728:	40023800 	.word	0x40023800
 800172c:	40020400 	.word	0x40020400
 8001730:	40005800 	.word	0x40005800
 8001734:	40020800 	.word	0x40020800
 8001738:	40005c00 	.word	0x40005c00
 800173c:	40020000 	.word	0x40020000

08001740 <USB_VCP_ProcessData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_VCP_ProcessData(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b09e      	sub	sp, #120	@ 0x78
 8001744:	af02      	add	r7, sp, #8
    // Sıcaklık ve basınç verilerini oku
    if (MS5611_read_temp(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D2_4096) == MS5611_OK &&
 8001746:	2258      	movs	r2, #88	@ 0x58
 8001748:	491b      	ldr	r1, [pc, #108]	@ (80017b8 <USB_VCP_ProcessData+0x78>)
 800174a:	481c      	ldr	r0, [pc, #112]	@ (80017bc <USB_VCP_ProcessData+0x7c>)
 800174c:	f7ff f848 	bl	80007e0 <MS5611_read_temp>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d12c      	bne.n	80017b0 <USB_VCP_ProcessData+0x70>
        MS5611_read_press(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D1_4096) == MS5611_OK &&
 8001756:	2248      	movs	r2, #72	@ 0x48
 8001758:	4917      	ldr	r1, [pc, #92]	@ (80017b8 <USB_VCP_ProcessData+0x78>)
 800175a:	4818      	ldr	r0, [pc, #96]	@ (80017bc <USB_VCP_ProcessData+0x7c>)
 800175c:	f7ff f8ca 	bl	80008f4 <MS5611_read_press>
 8001760:	4603      	mov	r3, r0
    if (MS5611_read_temp(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D2_4096) == MS5611_OK &&
 8001762:	2b01      	cmp	r3, #1
 8001764:	d124      	bne.n	80017b0 <USB_VCP_ProcessData+0x70>
        MS5611_calculate(&ms5611_data) == MS5611_OK)
 8001766:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <USB_VCP_ProcessData+0x78>)
 8001768:	f7ff f94e 	bl	8000a08 <MS5611_calculate>
 800176c:	4603      	mov	r3, r0
        MS5611_read_press(&hi2c1, &ms5611_data, MS5611_CMD_CONVERT_D1_4096) == MS5611_OK &&
 800176e:	2b01      	cmp	r3, #1
 8001770:	d11e      	bne.n	80017b0 <USB_VCP_ProcessData+0x70>
    {
        int32_t pressure = ms5611_data.end_pres;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <USB_VCP_ProcessData+0x78>)
 8001774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001776:	66fb      	str	r3, [r7, #108]	@ 0x6c
        int32_t temperature = ms5611_data.end_temp;
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <USB_VCP_ProcessData+0x78>)
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	66bb      	str	r3, [r7, #104]	@ 0x68

        char buffer[100];
            int len = snprintf(buffer, sizeof(buffer), "Pressure: %ld mB, Temperature: %ld C\n", pressure, temperature);
 800177e:	4638      	mov	r0, r7
 8001780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001786:	4a0e      	ldr	r2, [pc, #56]	@ (80017c0 <USB_VCP_ProcessData+0x80>)
 8001788:	2164      	movs	r1, #100	@ 0x64
 800178a:	f00b fe0b 	bl	800d3a4 <sniprintf>
 800178e:	6678      	str	r0, [r7, #100]	@ 0x64



                HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(len), HAL_MAX_DELAY);
 8001790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd3c 	bl	8000210 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	4639      	mov	r1, r7
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <USB_VCP_ProcessData+0x84>)
 80017a4:	f006 fa13 	bl	8007bce <HAL_UART_Transmit>
                HAL_Delay(1000);  // 1 second delay
 80017a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ac:	f000 fcd0 	bl	8002150 <HAL_Delay>

    }



}
 80017b0:	bf00      	nop
 80017b2:	3770      	adds	r7, #112	@ 0x70
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200002d0 	.word	0x200002d0
 80017bc:	200001d0 	.word	0x200001d0
 80017c0:	0800dd2c 	.word	0x0800dd2c
 80017c4:	200004f8 	.word	0x200004f8

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017cc:	f000 fc4e 	bl	800206c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d0:	f000 f82c 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d4:	f7ff fd30 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 80017d8:	f7ff fc74 	bl	80010c4 <MX_DMA_Init>
  MX_FMPI2C1_Init();
 80017dc:	f7ff fc9a 	bl	8001114 <MX_FMPI2C1_Init>
  MX_I2C1_Init();
 80017e0:	f7ff fe30 	bl	8001444 <MX_I2C1_Init>
  MX_I2C2_Init();
 80017e4:	f7ff fe5c 	bl	80014a0 <MX_I2C2_Init>
  MX_I2C3_Init();
 80017e8:	f7ff fe88 	bl	80014fc <MX_I2C3_Init>
  MX_SDIO_SD_Init();
 80017ec:	f000 f890 	bl	8001910 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80017f0:	f000 f9ee 	bl	8001bd0 <MX_SPI1_Init>
  MX_UART4_Init();
 80017f4:	f000 fb40 	bl	8001e78 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017f8:	f000 fb68 	bl	8001ecc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80017fc:	f008 fe10 	bl	800a420 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001800:	f00b f866 	bl	800c8d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
      MS5611_Rest(&hi2c1);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <main+0x5c>)
 8001806:	f7fe ff23 	bl	8000650 <MS5611_Rest>
      MS5611_init(&hi2c1, &ms5611_data);
 800180a:	4907      	ldr	r1, [pc, #28]	@ (8001828 <main+0x60>)
 800180c:	4805      	ldr	r0, [pc, #20]	@ (8001824 <main+0x5c>)
 800180e:	f7fe ffd3 	bl	80007b8 <MS5611_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  USB_VCP_ProcessData();  // Sıcaklık ve basınç verilerini al ve USB VCP üzerinden gönder
 8001812:	f7ff ff95 	bl	8001740 <USB_VCP_ProcessData>
	       HAL_Delay(1000);
 8001816:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800181a:	f000 fc99 	bl	8002150 <HAL_Delay>
	  USB_VCP_ProcessData();  // Sıcaklık ve basınç verilerini al ve USB VCP üzerinden gönder
 800181e:	bf00      	nop
 8001820:	e7f7      	b.n	8001812 <main+0x4a>
 8001822:	bf00      	nop
 8001824:	200001d0 	.word	0x200001d0
 8001828:	200002d0 	.word	0x200002d0

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b094      	sub	sp, #80	@ 0x50
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	2234      	movs	r2, #52	@ 0x34
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f00b fde6 	bl	800d40c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	f107 0308 	add.w	r3, r7, #8
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <SystemClock_Config+0xd0>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	4a28      	ldr	r2, [pc, #160]	@ (80018fc <SystemClock_Config+0xd0>)
 800185a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001860:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <SystemClock_Config+0xd0>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800186c:	2300      	movs	r3, #0
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <SystemClock_Config+0xd4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001878:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <SystemClock_Config+0xd4>)
 800187a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <SystemClock_Config+0xd4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800188c:	2301      	movs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001894:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001896:	2302      	movs	r3, #2
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800189e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018a4:	2348      	movs	r3, #72	@ 0x48
 80018a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018ac:	2303      	movs	r3, #3
 80018ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 fcf7 	bl	80062ac <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80018c4:	f000 f81e 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80018cc:	2303      	movs	r3, #3
 80018ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fe6d 	bl	80055c4 <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80018f0:	f000 f808 	bl	8001904 <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3750      	adds	r7, #80	@ 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <Error_Handler+0x8>

08001910 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_SDIO_SD_Init+0x38>)
 8001916:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <MX_SDIO_SD_Init+0x3c>)
 8001918:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <MX_SDIO_SD_Init+0x38>)
 800191c:	2200      	movs	r2, #0
 800191e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_SDIO_SD_Init+0x38>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <MX_SDIO_SD_Init+0x38>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <MX_SDIO_SD_Init+0x38>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <MX_SDIO_SD_Init+0x38>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <MX_SDIO_SD_Init+0x38>)
 800193a:	2204      	movs	r2, #4
 800193c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	20000310 	.word	0x20000310
 800194c:	40012c00 	.word	0x40012c00

08001950 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b0a2      	sub	sp, #136	@ 0x88
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	225c      	movs	r2, #92	@ 0x5c
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f00b fd4b 	bl	800d40c <memset>
  if(sdHandle->Instance==SDIO)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a8c      	ldr	r2, [pc, #560]	@ (8001bac <HAL_SD_MspInit+0x25c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	f040 8111 	bne.w	8001ba4 <HAL_SD_MspInit+0x254>

  /* USER CODE END SDIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001982:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001986:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001988:	2300      	movs	r3, #0
 800198a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800198c:	2300      	movs	r3, #0
 800198e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	4618      	mov	r0, r3
 8001996:	f003 ff2f 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80019a0:	f7ff ffb0 	bl	8001904 <Error_Handler>
    }

    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	4b81      	ldr	r3, [pc, #516]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ac:	4a80      	ldr	r2, [pc, #512]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	4b7a      	ldr	r3, [pc, #488]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c8:	4a79      	ldr	r2, [pc, #484]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d0:	4b77      	ldr	r3, [pc, #476]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	4b73      	ldr	r3, [pc, #460]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e4:	4a72      	ldr	r2, [pc, #456]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ec:	4b70      	ldr	r3, [pc, #448]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	4a6b      	ldr	r2, [pc, #428]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a08:	4b69      	ldr	r3, [pc, #420]	@ (8001bb0 <HAL_SD_MspInit+0x260>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001a14:	2307      	movs	r3, #7
 8001a16:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a26:	230c      	movs	r3, #12
 8001a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a30:	4619      	mov	r1, r3
 8001a32:	4860      	ldr	r0, [pc, #384]	@ (8001bb4 <HAL_SD_MspInit+0x264>)
 8001a34:	f001 f946 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a52:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a56:	4619      	mov	r1, r3
 8001a58:	4857      	ldr	r0, [pc, #348]	@ (8001bb8 <HAL_SD_MspInit+0x268>)
 8001a5a:	f001 f933 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a72:	230c      	movs	r3, #12
 8001a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a78:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	484e      	ldr	r0, [pc, #312]	@ (8001bb8 <HAL_SD_MspInit+0x268>)
 8001a80:	f001 f920 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a84:	2304      	movs	r3, #4
 8001a86:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a96:	230c      	movs	r3, #12
 8001a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4846      	ldr	r0, [pc, #280]	@ (8001bbc <HAL_SD_MspInit+0x26c>)
 8001aa4:	f001 f90e 	bl	8002cc4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001aaa:	4a46      	ldr	r2, [pc, #280]	@ (8001bc4 <HAL_SD_MspInit+0x274>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001aae:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001ab0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ab4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ab6:	4b42      	ldr	r3, [pc, #264]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abc:	4b40      	ldr	r3, [pc, #256]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001ac4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aca:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001acc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ad0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001ad4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ad8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001ada:	4b39      	ldr	r3, [pc, #228]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001adc:	2220      	movs	r2, #32
 8001ade:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ae0:	4b37      	ldr	r3, [pc, #220]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001ae6:	4b36      	ldr	r3, [pc, #216]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001ae8:	2204      	movs	r2, #4
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001aec:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001aee:	2203      	movs	r2, #3
 8001af0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001af2:	4b33      	ldr	r3, [pc, #204]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001af4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001af8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001afa:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001afc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b00:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001b02:	482f      	ldr	r0, [pc, #188]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001b04:	f000 fc5a 	bl	80023bc <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_SD_MspInit+0x1c2>
    {
      Error_Handler();
 8001b0e:	f7ff fef9 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001b16:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b18:	4a29      	ldr	r2, [pc, #164]	@ (8001bc0 <HAL_SD_MspInit+0x270>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b20:	4a2a      	ldr	r2, [pc, #168]	@ (8001bcc <HAL_SD_MspInit+0x27c>)
 8001b22:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001b24:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b2a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2c:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b2e:	2240      	movs	r2, #64	@ 0x40
 8001b30:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b38:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b46:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b4e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b52:	2220      	movs	r2, #32
 8001b54:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b5e:	2204      	movs	r2, #4
 8001b60:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b64:	2203      	movs	r2, #3
 8001b66:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b72:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b76:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001b78:	4813      	ldr	r0, [pc, #76]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b7a:	f000 fc1f 	bl	80023bc <HAL_DMA_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_SD_MspInit+0x238>
    {
      Error_Handler();
 8001b84:	f7ff febe 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc8 <HAL_SD_MspInit+0x278>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2031      	movs	r0, #49	@ 0x31
 8001b9a:	f000 fbd8 	bl	800234e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001b9e:	2031      	movs	r0, #49	@ 0x31
 8001ba0:	f000 fbf1 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3788      	adds	r7, #136	@ 0x88
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40012c00 	.word	0x40012c00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00
 8001bc0:	20000394 	.word	0x20000394
 8001bc4:	40026458 	.word	0x40026458
 8001bc8:	200003f4 	.word	0x200003f4
 8001bcc:	400264a0 	.word	0x400264a0

08001bd0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001bd6:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <MX_SPI1_Init+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001bdc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be2:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001c04:	2210      	movs	r2, #16
 8001c06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c08:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c14:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001c1c:	220a      	movs	r2, #10
 8001c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c20:	4804      	ldr	r0, [pc, #16]	@ (8001c34 <MX_SPI1_Init+0x64>)
 8001c22:	f005 fefb 	bl	8007a1c <HAL_SPI_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c2c:	f7ff fe6a 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000454 	.word	0x20000454
 8001c38:	40013000 	.word	0x40013000

08001c3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	@ 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	@ (8001cc0 <HAL_SPI_MspInit+0x84>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d12b      	bne.n	8001cb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <HAL_SPI_MspInit+0x88>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a17      	ldr	r2, [pc, #92]	@ (8001cc4 <HAL_SPI_MspInit+0x88>)
 8001c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_SPI_MspInit+0x88>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_SPI_MspInit+0x88>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a10      	ldr	r2, [pc, #64]	@ (8001cc4 <HAL_SPI_MspInit+0x88>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_SPI_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = N_98PW_SCK_Pin|N_98PW_MISO_Pin|N_98PW_MOSI_Pin;
 8001c96:	23e0      	movs	r3, #224	@ 0xe0
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <HAL_SPI_MspInit+0x8c>)
 8001cb2:	f001 f807 	bl	8002cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	@ 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40013000 	.word	0x40013000
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <NMI_Handler+0x4>

08001d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <MemManage_Handler+0x4>

08001d34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d72:	f000 f9cd 	bl	8002110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_98PW_DIO0_Pin);
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f001 f966 	bl	8003050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(N_98PW_DIO1_Pin);
 8001d8c:	2020      	movs	r0, #32
 8001d8e:	f001 f95f 	bl	8003050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001d9c:	4802      	ldr	r0, [pc, #8]	@ (8001da8 <SDIO_IRQHandler+0x10>)
 8001d9e:	f004 ff95 	bl	8006ccc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000310 	.word	0x20000310

08001dac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001db0:	4802      	ldr	r0, [pc, #8]	@ (8001dbc <DMA2_Stream3_IRQHandler+0x10>)
 8001db2:	f000 fc2b 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000394 	.word	0x20000394

08001dc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <OTG_FS_IRQHandler+0x10>)
 8001dc6:	f002 faac 	bl	8004322 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20001a40 	.word	0x20001a40

08001dd4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001dd8:	4802      	ldr	r0, [pc, #8]	@ (8001de4 <DMA2_Stream6_IRQHandler+0x10>)
 8001dda:	f000 fc17 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200003f4 	.word	0x200003f4

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	@ (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f00b fb00 	bl	800d41c <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	@ (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20020000 	.word	0x20020000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	200004ac 	.word	0x200004ac
 8001e50:	20002290 	.word	0x20002290

08001e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <SystemInit+0x20>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5e:	4a05      	ldr	r2, [pc, #20]	@ (8001e74 <SystemInit+0x20>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart1;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <MX_UART4_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_UART4_Init+0x4c>)
 8001eb0:	f005 fe3d 	bl	8007b2e <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001eba:	f7ff fd23 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200004b0 	.word	0x200004b0
 8001ec8:	40004c00 	.word	0x40004c00

08001ecc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <MX_USART1_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_USART1_UART_Init+0x4c>)
 8001f04:	f005 fe13 	bl	8007b2e <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f7ff fcf9 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200004f8 	.word	0x200004f8
 8001f1c:	40011000 	.word	0x40011000

08001f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	@ 0x30
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a32      	ldr	r2, [pc, #200]	@ (8002008 <HAL_UART_MspInit+0xe8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d12c      	bne.n	8001f9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	4b31      	ldr	r3, [pc, #196]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a30      	ldr	r2, [pc, #192]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001f4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a29      	ldr	r2, [pc, #164]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b27      	ldr	r3, [pc, #156]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	481e      	ldr	r0, [pc, #120]	@ (8002010 <HAL_UART_MspInit+0xf0>)
 8001f96:	f000 fe95 	bl	8002cc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f9a:	e031      	b.n	8002000 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <HAL_UART_MspInit+0xf4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12c      	bne.n	8002000 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a17      	ldr	r2, [pc, #92]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f003 0310 	and.w	r3, r3, #16
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b11      	ldr	r3, [pc, #68]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a10      	ldr	r2, [pc, #64]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_UART_MspInit+0xec>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4805      	ldr	r0, [pc, #20]	@ (8002010 <HAL_UART_MspInit+0xf0>)
 8001ffc:	f000 fe62 	bl	8002cc4 <HAL_GPIO_Init>
}
 8002000:	bf00      	nop
 8002002:	3730      	adds	r7, #48	@ 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40004c00 	.word	0x40004c00
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	40011000 	.word	0x40011000

08002018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002050 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800201c:	f7ff ff1a 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002020:	480c      	ldr	r0, [pc, #48]	@ (8002054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002022:	490d      	ldr	r1, [pc, #52]	@ (8002058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002024:	4a0d      	ldr	r2, [pc, #52]	@ (800205c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002038:	4c0a      	ldr	r4, [pc, #40]	@ (8002064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002046:	f00b f9ef 	bl	800d428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204a:	f7ff fbbd 	bl	80017c8 <main>
  bx  lr    
 800204e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002058:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 800205c:	0800de10 	.word	0x0800de10
  ldr r2, =_sbss
 8002060:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002064:	2000228c 	.word	0x2000228c

08002068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002070:	4b0e      	ldr	r3, [pc, #56]	@ (80020ac <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0d      	ldr	r2, [pc, #52]	@ (80020ac <HAL_Init+0x40>)
 8002076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800207a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <HAL_Init+0x40>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <HAL_Init+0x40>)
 8002082:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a07      	ldr	r2, [pc, #28]	@ (80020ac <HAL_Init+0x40>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002094:	2003      	movs	r0, #3
 8002096:	f000 f94f 	bl	8002338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209a:	200f      	movs	r0, #15
 800209c:	f000 f808 	bl	80020b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a0:	f7ff fe14 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_InitTick+0x54>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_InitTick+0x58>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f967 	bl	80023a2 <HAL_SYSTICK_Config>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00e      	b.n	80020fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b0f      	cmp	r3, #15
 80020e2:	d80a      	bhi.n	80020fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e4:	2200      	movs	r2, #0
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	f000 f92f 	bl	800234e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f0:	4a06      	ldr	r2, [pc, #24]	@ (800210c <HAL_InitTick+0x5c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000000 	.word	0x20000000
 8002108:	20000008 	.word	0x20000008
 800210c:	20000004 	.word	0x20000004

08002110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_IncTick+0x20>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_IncTick+0x24>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4413      	add	r3, r2
 8002120:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <HAL_IncTick+0x24>)
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000008 	.word	0x20000008
 8002134:	20000540 	.word	0x20000540

08002138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <HAL_GetTick+0x14>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000540 	.word	0x20000540

08002150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff ffee 	bl	8002138 <HAL_GetTick>
 800215c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d005      	beq.n	8002176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_Delay+0x44>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002176:	bf00      	nop
 8002178:	f7ff ffde 	bl	8002138 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	429a      	cmp	r2, r3
 8002186:	d8f7      	bhi.n	8002178 <HAL_Delay+0x28>
  {
  }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000008 	.word	0x20000008

08002198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <__NVIC_SetPriorityGrouping+0x44>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b4:	4013      	ands	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ca:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <__NVIC_SetPriorityGrouping+0x44>)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	60d3      	str	r3, [r2, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e4:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <__NVIC_GetPriorityGrouping+0x18>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	f003 0307 	and.w	r3, r3, #7
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	db0b      	blt.n	8002226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	4907      	ldr	r1, [pc, #28]	@ (8002234 <__NVIC_EnableIRQ+0x38>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	2001      	movs	r0, #1
 800221e:	fa00 f202 	lsl.w	r2, r0, r2
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	@ (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	@ (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	@ 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f1c3 0307 	rsb	r3, r3, #7
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	bf28      	it	cs
 80022aa:	2304      	movcs	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d902      	bls.n	80022bc <NVIC_EncodePriority+0x30>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b03      	subs	r3, #3
 80022ba:	e000      	b.n	80022be <NVIC_EncodePriority+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43d9      	mvns	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	4313      	orrs	r3, r2
         );
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	@ 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002304:	d301      	bcc.n	800230a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002306:	2301      	movs	r3, #1
 8002308:	e00f      	b.n	800232a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800230a:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <SysTick_Config+0x40>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002312:	210f      	movs	r1, #15
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f7ff ff8e 	bl	8002238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <SysTick_Config+0x40>)
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002322:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <SysTick_Config+0x40>)
 8002324:	2207      	movs	r2, #7
 8002326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	e000e010 	.word	0xe000e010

08002338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff29 	bl	8002198 <__NVIC_SetPriorityGrouping>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002360:	f7ff ff3e 	bl	80021e0 <__NVIC_GetPriorityGrouping>
 8002364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	6978      	ldr	r0, [r7, #20]
 800236c:	f7ff ff8e 	bl	800228c <NVIC_EncodePriority>
 8002370:	4602      	mov	r2, r0
 8002372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff5d 	bl	8002238 <__NVIC_SetPriority>
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff31 	bl	80021fc <__NVIC_EnableIRQ>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffa2 	bl	80022f4 <SysTick_Config>
 80023b0:	4603      	mov	r3, r0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff feb6 	bl	8002138 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e099      	b.n	800250c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f8:	e00f      	b.n	800241a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023fa:	f7ff fe9d 	bl	8002138 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b05      	cmp	r3, #5
 8002406:	d908      	bls.n	800241a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2220      	movs	r2, #32
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2203      	movs	r2, #3
 8002412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e078      	b.n	800250c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e8      	bne.n	80023fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <HAL_DMA_Init+0x158>)
 8002434:	4013      	ands	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002446:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	2b04      	cmp	r3, #4
 8002472:	d107      	bne.n	8002484 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247c:	4313      	orrs	r3, r2
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4313      	orrs	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f023 0307 	bic.w	r3, r3, #7
 800249a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d117      	bne.n	80024de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa9d 	bl	8002a00 <DMA_CheckFifoParam>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2240      	movs	r2, #64	@ 0x40
 80024d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024da:	2301      	movs	r3, #1
 80024dc:	e016      	b.n	800250c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa54 	bl	8002994 <DMA_CalcBaseAndBitshift>
 80024ec:	4603      	mov	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	223f      	movs	r2, #63	@ 0x3f
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	f010803f 	.word	0xf010803f

08002518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_DMA_Start_IT+0x26>
 800253a:	2302      	movs	r3, #2
 800253c:	e040      	b.n	80025c0 <HAL_DMA_Start_IT+0xa8>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d12f      	bne.n	80025b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f9e6 	bl	8002938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	223f      	movs	r2, #63	@ 0x3f
 8002572:	409a      	lsls	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0216 	orr.w	r2, r2, #22
 8002586:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0208 	orr.w	r2, r2, #8
 800259e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0201 	orr.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e005      	b.n	80025be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025be:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d004      	beq.n	80025e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	@ 0x80
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00c      	b.n	8002600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002618:	4b8e      	ldr	r3, [pc, #568]	@ (8002854 <HAL_DMA_IRQHandler+0x248>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a8e      	ldr	r2, [pc, #568]	@ (8002858 <HAL_DMA_IRQHandler+0x24c>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0a9b      	lsrs	r3, r3, #10
 8002624:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002636:	2208      	movs	r2, #8
 8002638:	409a      	lsls	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01a      	beq.n	8002678 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	2208      	movs	r2, #8
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2201      	movs	r2, #1
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2201      	movs	r2, #1
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a6:	f043 0202 	orr.w	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2204      	movs	r2, #4
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	2204      	movs	r2, #4
 80026d2:	409a      	lsls	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026dc:	f043 0204 	orr.w	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2210      	movs	r2, #16
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d043      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03c      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	2210      	movs	r2, #16
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d018      	beq.n	800274e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d108      	bne.n	800273c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d024      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e01f      	b.n	800277c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
 800274c:	e016      	b.n	800277c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0208 	bic.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	2220      	movs	r2, #32
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 808f 	beq.w	80028ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8087 	beq.w	80028ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	2220      	movs	r2, #32
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d136      	bne.n	8002824 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0216 	bic.w	r2, r2, #22
 80027c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_DMA_IRQHandler+0x1da>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0208 	bic.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	223f      	movs	r2, #63	@ 0x3f
 80027fc:	409a      	lsls	r2, r3
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002816:	2b00      	cmp	r3, #0
 8002818:	d07e      	beq.n	8002918 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
        }
        return;
 8002822:	e079      	b.n	8002918 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01d      	beq.n	800286e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002844:	2b00      	cmp	r3, #0
 8002846:	d031      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
 8002850:	e02c      	b.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000
 8002858:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d023      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	e01e      	b.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0210 	bic.w	r2, r2, #16
 800288a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d032      	beq.n	800291a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d022      	beq.n	8002906 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2205      	movs	r2, #5
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	3301      	adds	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d307      	bcc.n	80028f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f2      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x2cc>
 80028f2:	e000      	b.n	80028f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
 8002916:	e000      	b.n	800291a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002918:	bf00      	nop
    }
  }
}
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d108      	bne.n	8002978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002976:	e007      	b.n	8002988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b10      	subs	r3, #16
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <DMA_CalcBaseAndBitshift+0x64>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ae:	4a13      	ldr	r2, [pc, #76]	@ (80029fc <DMA_CalcBaseAndBitshift+0x68>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d909      	bls.n	80029d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	1d1a      	adds	r2, r3, #4
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d4:	e007      	b.n	80029e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	aaaaaaab 	.word	0xaaaaaaab
 80029fc:	0800ddb0 	.word	0x0800ddb0

08002a00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d856      	bhi.n	8002ace <DMA_CheckFifoParam+0xce>
 8002a20:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <DMA_CheckFifoParam+0x28>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a4b 	.word	0x08002a4b
 8002a30:	08002a39 	.word	0x08002a39
 8002a34:	08002acf 	.word	0x08002acf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e043      	b.n	8002ad2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a52:	d140      	bne.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e03d      	b.n	8002ad6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d121      	bne.n	8002aa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d837      	bhi.n	8002ada <DMA_CheckFifoParam+0xda>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <DMA_CheckFifoParam+0x70>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a87 	.word	0x08002a87
 8002a78:	08002a81 	.word	0x08002a81
 8002a7c:	08002a99 	.word	0x08002a99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e030      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d025      	beq.n	8002ade <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a96:	e022      	b.n	8002ade <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa6:	e01c      	b.n	8002ae2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d903      	bls.n	8002ab6 <DMA_CheckFifoParam+0xb6>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d003      	beq.n	8002abc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab4:	e018      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aba:	e015      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e00b      	b.n	8002ae6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e00a      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e008      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e006      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e004      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e002      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ae2:	bf00      	nop
 8002ae4:	e000      	b.n	8002ae8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08d      	b.n	8002c26 <HAL_FMPI2C_Init+0x12e>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fb2e 	bl	8001180 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	@ 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b58:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e006      	b.n	8002b80 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d108      	bne.n	8002b9a <HAL_FMPI2C_Init+0xa2>
  {
    SET_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	e007      	b.n	8002baa <HAL_FMPI2C_Init+0xb2>
  }
  else
  {
    /* Clear the FMPI2C ADD10 bit */
    CLEAR_BIT(hfmpi2c->Instance->CR2, FMPI2C_CR2_ADD10);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	ea42 0103 	orr.w	r1, r2, r3
                             (hfmpi2c->Init.OwnAddress2Masks << 8));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	021a      	lsls	r2, r3, #8
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | \
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69d9      	ldr	r1, [r3, #28]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d138      	bne.n	8002cb6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e032      	b.n	8002cb8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2224      	movs	r2, #36	@ 0x24
 8002c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0201 	bic.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	@ 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e165      	b.n	8002fac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	f040 8154 	bne.w	8002fa6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d005      	beq.n	8002d16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d130      	bne.n	8002d78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	2203      	movs	r2, #3
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 0201 	and.w	r2, r3, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d017      	beq.n	8002db4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d123      	bne.n	8002e08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3208      	adds	r2, #8
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0203 	and.w	r2, r3, #3
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80ae 	beq.w	8002fa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fc4 <HAL_GPIO_Init+0x300>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <HAL_GPIO_Init+0x300>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fc4 <HAL_GPIO_Init+0x300>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e66:	4a58      	ldr	r2, [pc, #352]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	220f      	movs	r2, #15
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fcc <HAL_GPIO_Init+0x308>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d025      	beq.n	8002ede <HAL_GPIO_Init+0x21a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd0 <HAL_GPIO_Init+0x30c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_GPIO_Init+0x216>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd4 <HAL_GPIO_Init+0x310>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x212>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd8 <HAL_GPIO_Init+0x314>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	@ (8002fdc <HAL_GPIO_Init+0x318>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x20a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe0 <HAL_GPIO_Init+0x31c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x206>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a49      	ldr	r2, [pc, #292]	@ (8002fe4 <HAL_GPIO_Init+0x320>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x202>
 8002ec2:	2306      	movs	r3, #6
 8002ec4:	e00c      	b.n	8002ee0 <HAL_GPIO_Init+0x21c>
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	e00a      	b.n	8002ee0 <HAL_GPIO_Init+0x21c>
 8002eca:	2305      	movs	r3, #5
 8002ecc:	e008      	b.n	8002ee0 <HAL_GPIO_Init+0x21c>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x21c>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e004      	b.n	8002ee0 <HAL_GPIO_Init+0x21c>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e002      	b.n	8002ee0 <HAL_GPIO_Init+0x21c>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x21c>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	f002 0203 	and.w	r2, r2, #3
 8002ee6:	0092      	lsls	r2, r2, #2
 8002ee8:	4093      	lsls	r3, r2
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef0:	4935      	ldr	r1, [pc, #212]	@ (8002fc8 <HAL_GPIO_Init+0x304>)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002efe:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f22:	4a31      	ldr	r2, [pc, #196]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f28:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f4c:	4a26      	ldr	r2, [pc, #152]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f52:	4b25      	ldr	r3, [pc, #148]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f76:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa0:	4a11      	ldr	r2, [pc, #68]	@ (8002fe8 <HAL_GPIO_Init+0x324>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	2b0f      	cmp	r3, #15
 8002fb0:	f67f ae96 	bls.w	8002ce0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	bf00      	nop
 8002fb8:	3724      	adds	r7, #36	@ 0x24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	40020000 	.word	0x40020000
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020c00 	.word	0x40020c00
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40021400 	.word	0x40021400
 8002fe4:	40021800 	.word	0x40021800
 8002fe8:	40013c00 	.word	0x40013c00

08002fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e001      	b.n	800300e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
 8003028:	4613      	mov	r3, r2
 800302a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003032:	887a      	ldrh	r2, [r7, #2]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003038:	e003      	b.n	8003042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	041a      	lsls	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	619a      	str	r2, [r3, #24]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800305a:	4b08      	ldr	r3, [pc, #32]	@ (800307c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d006      	beq.n	8003074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003066:	4a05      	ldr	r2, [pc, #20]	@ (800307c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f806 	bl	8003080 <HAL_GPIO_EXTI_Callback>
  }
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40013c00 	.word	0x40013c00

08003080 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e12b      	b.n	8003302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fe fa4a 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2224      	movs	r2, #36	@ 0x24
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030fc:	f002 fb54 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a81      	ldr	r2, [pc, #516]	@ (800330c <HAL_I2C_Init+0x274>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d807      	bhi.n	800311c <HAL_I2C_Init+0x84>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a80      	ldr	r2, [pc, #512]	@ (8003310 <HAL_I2C_Init+0x278>)
 8003110:	4293      	cmp	r3, r2
 8003112:	bf94      	ite	ls
 8003114:	2301      	movls	r3, #1
 8003116:	2300      	movhi	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e006      	b.n	800312a <HAL_I2C_Init+0x92>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a7d      	ldr	r2, [pc, #500]	@ (8003314 <HAL_I2C_Init+0x27c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	bf94      	ite	ls
 8003124:	2301      	movls	r3, #1
 8003126:	2300      	movhi	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e0e7      	b.n	8003302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a78      	ldr	r2, [pc, #480]	@ (8003318 <HAL_I2C_Init+0x280>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0c9b      	lsrs	r3, r3, #18
 800313c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a6a      	ldr	r2, [pc, #424]	@ (800330c <HAL_I2C_Init+0x274>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d802      	bhi.n	800316c <HAL_I2C_Init+0xd4>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3301      	adds	r3, #1
 800316a:	e009      	b.n	8003180 <HAL_I2C_Init+0xe8>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	4a69      	ldr	r2, [pc, #420]	@ (800331c <HAL_I2C_Init+0x284>)
 8003178:	fba2 2303 	umull	r2, r3, r2, r3
 800317c:	099b      	lsrs	r3, r3, #6
 800317e:	3301      	adds	r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	430b      	orrs	r3, r1
 8003186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003192:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	495c      	ldr	r1, [pc, #368]	@ (800330c <HAL_I2C_Init+0x274>)
 800319c:	428b      	cmp	r3, r1
 800319e:	d819      	bhi.n	80031d4 <HAL_I2C_Init+0x13c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1e59      	subs	r1, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ae:	1c59      	adds	r1, r3, #1
 80031b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031b4:	400b      	ands	r3, r1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_I2C_Init+0x138>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e59      	subs	r1, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ce:	e051      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e04f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <HAL_I2C_Init+0x168>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e012      	b.n	8003226 <HAL_I2C_Init+0x18e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1e58      	subs	r0, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	0099      	lsls	r1, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	fbb0 f3f3 	udiv	r3, r0, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x196>
 800322a:	2301      	movs	r3, #1
 800322c:	e022      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10e      	bne.n	8003254 <HAL_I2C_Init+0x1bc>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1e58      	subs	r0, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	440b      	add	r3, r1
 8003244:	fbb0 f3f3 	udiv	r3, r0, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003252:	e00f      	b.n	8003274 <HAL_I2C_Init+0x1dc>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	6809      	ldr	r1, [r1, #0]
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6911      	ldr	r1, [r2, #16]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	4311      	orrs	r1, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	000186a0 	.word	0x000186a0
 8003310:	001e847f 	.word	0x001e847f
 8003314:	003d08ff 	.word	0x003d08ff
 8003318:	431bde83 	.word	0x431bde83
 800331c:	10624dd3 	.word	0x10624dd3

08003320 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	460b      	mov	r3, r1
 800332e:	817b      	strh	r3, [r7, #10]
 8003330:	4613      	mov	r3, r2
 8003332:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003334:	f7fe ff00 	bl	8002138 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b20      	cmp	r3, #32
 8003344:	f040 80e0 	bne.w	8003508 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2319      	movs	r3, #25
 800334e:	2201      	movs	r2, #1
 8003350:	4970      	ldr	r1, [pc, #448]	@ (8003514 <HAL_I2C_Master_Transmit+0x1f4>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fc64 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	e0d3      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_I2C_Master_Transmit+0x50>
 800336c:	2302      	movs	r3, #2
 800336e:	e0cc      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b01      	cmp	r3, #1
 8003384:	d007      	beq.n	8003396 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2221      	movs	r2, #33	@ 0x21
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2210      	movs	r2, #16
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	893a      	ldrh	r2, [r7, #8]
 80033c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a50      	ldr	r2, [pc, #320]	@ (8003518 <HAL_I2C_Master_Transmit+0x1f8>)
 80033d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033d8:	8979      	ldrh	r1, [r7, #10]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 face 	bl	8003980 <I2C_MasterRequestWrite>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e08d      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003404:	e066      	b.n	80034d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	6a39      	ldr	r1, [r7, #32]
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fd22 	bl	8003e54 <I2C_WaitOnTXEFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	2b04      	cmp	r3, #4
 800341c:	d107      	bne.n	800342e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06b      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d11b      	bne.n	80034a8 <HAL_I2C_Master_Transmit+0x188>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d017      	beq.n	80034a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	6a39      	ldr	r1, [r7, #32]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fd19 	bl	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d107      	bne.n	80034d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01a      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d194      	bne.n	8003406 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	00100002 	.word	0x00100002
 8003518:	ffff0000 	.word	0xffff0000

0800351c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	@ 0x30
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7fe fe02 	bl	8002138 <HAL_GetTick>
 8003534:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	f040 8217 	bne.w	8003972 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	497c      	ldr	r1, [pc, #496]	@ (8003740 <HAL_I2C_Master_Receive+0x224>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fb66 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e20a      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_I2C_Master_Receive+0x50>
 8003568:	2302      	movs	r3, #2
 800356a:	e203      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2222      	movs	r2, #34	@ 0x22
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2210      	movs	r2, #16
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003744 <HAL_I2C_Master_Receive+0x228>)
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fa52 	bl	8003a84 <I2C_MasterRequestRead>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c4      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d113      	bne.n	800361a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	623b      	str	r3, [r7, #32]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	623b      	str	r3, [r7, #32]
 8003606:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e198      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361e:	2b01      	cmp	r3, #1
 8003620:	d11b      	bne.n	800365a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e178      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	2b02      	cmp	r3, #2
 8003660:	d11b      	bne.n	800369a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003670:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	e158      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036c0:	e144      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	f200 80f1 	bhi.w	80038ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d123      	bne.n	800371c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fc4b 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e145      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800371a:	e117      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	2b02      	cmp	r3, #2
 8003722:	d14e      	bne.n	80037c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	2200      	movs	r2, #0
 800372c:	4906      	ldr	r1, [pc, #24]	@ (8003748 <HAL_I2C_Master_Receive+0x22c>)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa76 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e11a      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
 800373e:	bf00      	nop
 8003740:	00100002 	.word	0x00100002
 8003744:	ffff0000 	.word	0xffff0000
 8003748:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037c0:	e0c4      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	496c      	ldr	r1, [pc, #432]	@ (800397c <HAL_I2C_Master_Receive+0x460>)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fa27 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0cb      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	2200      	movs	r2, #0
 8003826:	4955      	ldr	r1, [pc, #340]	@ (800397c <HAL_I2C_Master_Receive+0x460>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f9f9 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e09d      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038ac:	e04e      	b.n	800394c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fb5e 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e058      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d124      	bne.n	800394c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	2b03      	cmp	r3, #3
 8003908:	d107      	bne.n	800391a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003918:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f aeb6 	bne.w	80036c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3728      	adds	r7, #40	@ 0x28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	00010004 	.word	0x00010004

08003980 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	460b      	mov	r3, r1
 800398e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003994:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d006      	beq.n	80039aa <I2C_MasterRequestWrite+0x2a>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d003      	beq.n	80039aa <I2C_MasterRequestWrite+0x2a>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039a8:	d108      	bne.n	80039bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e00b      	b.n	80039d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	2b12      	cmp	r3, #18
 80039c2:	d107      	bne.n	80039d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f91d 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00d      	beq.n	8003a08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fa:	d103      	bne.n	8003a04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e035      	b.n	8003a74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a10:	d108      	bne.n	8003a24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a20:	611a      	str	r2, [r3, #16]
 8003a22:	e01b      	b.n	8003a5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a24:	897b      	ldrh	r3, [r7, #10]
 8003a26:	11db      	asrs	r3, r3, #7
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 0306 	and.w	r3, r3, #6
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f063 030f 	orn	r3, r3, #15
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	490e      	ldr	r1, [pc, #56]	@ (8003a7c <I2C_MasterRequestWrite+0xfc>)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f966 	bl	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e010      	b.n	8003a74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a52:	897b      	ldrh	r3, [r7, #10]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4907      	ldr	r1, [pc, #28]	@ (8003a80 <I2C_MasterRequestWrite+0x100>)
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f956 	bl	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	00010008 	.word	0x00010008
 8003a80:	00010002 	.word	0x00010002

08003a84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d006      	beq.n	8003abe <I2C_MasterRequestRead+0x3a>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d003      	beq.n	8003abe <I2C_MasterRequestRead+0x3a>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003abc:	d108      	bne.n	8003ad0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e00b      	b.n	8003ae8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	2b11      	cmp	r3, #17
 8003ad6:	d107      	bne.n	8003ae8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ae6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f893 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00d      	beq.n	8003b1c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0e:	d103      	bne.n	8003b18 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e079      	b.n	8003c10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b24:	d108      	bne.n	8003b38 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	611a      	str	r2, [r3, #16]
 8003b36:	e05f      	b.n	8003bf8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b38:	897b      	ldrh	r3, [r7, #10]
 8003b3a:	11db      	asrs	r3, r3, #7
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f003 0306 	and.w	r3, r3, #6
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	f063 030f 	orn	r3, r3, #15
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4930      	ldr	r1, [pc, #192]	@ (8003c18 <I2C_MasterRequestRead+0x194>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f8dc 	bl	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e054      	b.n	8003c10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4929      	ldr	r1, [pc, #164]	@ (8003c1c <I2C_MasterRequestRead+0x198>)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f8cc 	bl	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e044      	b.n	8003c10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003baa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f831 	bl	8003c20 <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd2:	d103      	bne.n	8003bdc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bda:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e017      	b.n	8003c10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003be0:	897b      	ldrh	r3, [r7, #10]
 8003be2:	11db      	asrs	r3, r3, #7
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0306 	and.w	r3, r3, #6
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f063 030e 	orn	r3, r3, #14
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4907      	ldr	r1, [pc, #28]	@ (8003c1c <I2C_MasterRequestRead+0x198>)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 f888 	bl	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	00010008 	.word	0x00010008
 8003c1c:	00010002 	.word	0x00010002

08003c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c30:	e048      	b.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d044      	beq.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3a:	f7fe fa7d 	bl	8002138 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d302      	bcc.n	8003c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d139      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	0c1b      	lsrs	r3, r3, #16
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10d      	bne.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	43da      	mvns	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4013      	ands	r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	e00c      	b.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	43da      	mvns	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4013      	ands	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d116      	bne.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e023      	b.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10d      	bne.n	8003cea <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	e00c      	b.n	8003d04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d093      	beq.n	8003c32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d22:	e071      	b.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d32:	d123      	bne.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e067      	b.n	8003e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d041      	beq.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fe f9d8 	bl	8002138 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d136      	bne.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	0c1b      	lsrs	r3, r3, #16
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10c      	bne.n	8003dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	43da      	mvns	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4013      	ands	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	bf14      	ite	ne
 8003db6:	2301      	movne	r3, #1
 8003db8:	2300      	moveq	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	e00b      	b.n	8003dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e021      	b.n	8003e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10c      	bne.n	8003e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	43da      	mvns	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e00b      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	43da      	mvns	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4013      	ands	r3, r2
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f47f af6d 	bne.w	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e60:	e034      	b.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f8e3 	bl	800402e <I2C_IsAcknowledgeFailed>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e034      	b.n	8003edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d028      	beq.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7fe f95d 	bl	8002138 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d11d      	bne.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b80      	cmp	r3, #128	@ 0x80
 8003e9c:	d016      	beq.n	8003ecc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f043 0220 	orr.w	r2, r3, #32
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed6:	2b80      	cmp	r3, #128	@ 0x80
 8003ed8:	d1c3      	bne.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef0:	e034      	b.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f89b 	bl	800402e <I2C_IsAcknowledgeFailed>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e034      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d028      	beq.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe f915 	bl	8002138 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11d      	bne.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d016      	beq.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e007      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d1c3      	bne.n	8003ef2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f80:	e049      	b.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d119      	bne.n	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e030      	b.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe f8b8 	bl	8002138 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11d      	bne.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d016      	beq.n	8004016 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e007      	b.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	d1ae      	bne.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004044:	d11b      	bne.n	800407e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800404e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f043 0204 	orr.w	r2, r3, #4
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e108      	b.n	80042b0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f008 fdfb 	bl	800ccb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2203      	movs	r2, #3
 80040c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040cc:	d102      	bne.n	80040d4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f004 ff7c 	bl	8008fd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	7c1a      	ldrb	r2, [r3, #16]
 80040e6:	f88d 2000 	strb.w	r2, [sp]
 80040ea:	3304      	adds	r3, #4
 80040ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ee:	f004 fe5b 	bl	8008da8 <USB_CoreInit>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0d5      	b.n	80042b0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f004 ff74 	bl	8008ff8 <USB_SetCurrentMode>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0c6      	b.n	80042b0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	e04a      	b.n	80041be <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3315      	adds	r3, #21
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	3314      	adds	r3, #20
 800414c:	7bfa      	ldrb	r2, [r7, #15]
 800414e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	b298      	uxth	r0, r3
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	332e      	adds	r3, #46	@ 0x2e
 8004164:	4602      	mov	r2, r0
 8004166:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3318      	adds	r3, #24
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	331c      	adds	r3, #28
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004190:	7bfa      	ldrb	r2, [r7, #15]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	3320      	adds	r3, #32
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	3324      	adds	r3, #36	@ 0x24
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	3301      	adds	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	791b      	ldrb	r3, [r3, #4]
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d3af      	bcc.n	8004128 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e044      	b.n	8004258 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	3301      	adds	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	7bfa      	ldrb	r2, [r7, #15]
 800425e:	429a      	cmp	r2, r3
 8004260:	d3b5      	bcc.n	80041ce <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7c1a      	ldrb	r2, [r3, #16]
 800426a:	f88d 2000 	strb.w	r2, [sp]
 800426e:	3304      	adds	r3, #4
 8004270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004272:	f004 ff0d 	bl	8009090 <USB_DevInit>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e013      	b.n	80042b0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7b1b      	ldrb	r3, [r3, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d102      	bne.n	80042a4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f001 f96c 	bl	800557c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f005 ff44 	bl	800a136 <USB_DevDisconnect>

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_PCD_Start+0x1c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e022      	b.n	800431a <HAL_PCD_Start+0x62>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f004 fe57 	bl	8008fb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fef2 	bl	800a0f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004322:	b590      	push	{r4, r7, lr}
 8004324:	b08d      	sub	sp, #52	@ 0x34
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f005 ffb0 	bl	800a29e <USB_GetMode>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 84b9 	bne.w	8004cb8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f005 ff14 	bl	800a178 <USB_ReadInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 84af 	beq.w	8004cb6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f005 ff01 	bl	800a178 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d107      	bne.n	8004390 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f002 0202 	and.w	r2, r2, #2
 800438e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f005 feef 	bl	800a178 <USB_ReadInterrupts>
 800439a:	4603      	mov	r3, r0
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d161      	bne.n	8004468 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0210 	bic.w	r2, r2, #16
 80043b2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f003 020f 	and.w	r2, r3, #15
 80043c0:	4613      	mov	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4413      	add	r3, r2
 80043d0:	3304      	adds	r3, #4
 80043d2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	0c5b      	lsrs	r3, r3, #17
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d124      	bne.n	800442a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d035      	beq.n	8004458 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	6a38      	ldr	r0, [r7, #32]
 8004400:	f005 fd26 	bl	8009e50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	091b      	lsrs	r3, r3, #4
 800440c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004410:	441a      	add	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	695a      	ldr	r2, [r3, #20]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004422:	441a      	add	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	615a      	str	r2, [r3, #20]
 8004428:	e016      	b.n	8004458 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	0c5b      	lsrs	r3, r3, #17
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	2b06      	cmp	r3, #6
 8004434:	d110      	bne.n	8004458 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800443c:	2208      	movs	r2, #8
 800443e:	4619      	mov	r1, r3
 8004440:	6a38      	ldr	r0, [r7, #32]
 8004442:	f005 fd05 	bl	8009e50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004452:	441a      	add	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0210 	orr.w	r2, r2, #16
 8004466:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f005 fe83 	bl	800a178 <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004478:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800447c:	f040 80a7 	bne.w	80045ce <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f005 fe88 	bl	800a19e <USB_ReadDevAllOutEpInterrupt>
 800448e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004490:	e099      	b.n	80045c6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 808e 	beq.w	80045ba <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f005 feac 	bl	800a206 <USB_ReadDevOutEPInterrupt>
 80044ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	2301      	movs	r3, #1
 80044ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80044cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fece 	bl	8005270 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ea:	461a      	mov	r2, r3
 80044ec:	2308      	movs	r3, #8
 80044ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 ffa4 	bl	8005440 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450e:	461a      	mov	r2, r3
 8004510:	2310      	movs	r3, #16
 8004512:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d030      	beq.n	8004580 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004526:	2b80      	cmp	r3, #128	@ 0x80
 8004528:	d109      	bne.n	800453e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004538:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800453c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800453e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	3304      	adds	r3, #4
 8004552:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	78db      	ldrb	r3, [r3, #3]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d108      	bne.n	800456e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2200      	movs	r2, #0
 8004560:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	b2db      	uxtb	r3, r3
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f008 fcbf 	bl	800ceec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	2302      	movs	r3, #2
 800457e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004596:	461a      	mov	r2, r3
 8004598:	2320      	movs	r3, #32
 800459a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b2:	461a      	mov	r2, r3
 80045b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	3301      	adds	r3, #1
 80045be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f47f af62 	bne.w	8004492 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f005 fdd0 	bl	800a178 <USB_ReadInterrupts>
 80045d8:	4603      	mov	r3, r0
 80045da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045e2:	f040 80db 	bne.w	800479c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f005 fdf1 	bl	800a1d2 <USB_ReadDevAllInEpInterrupt>
 80045f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80045f6:	e0cd      	b.n	8004794 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80c2 	beq.w	8004788 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f005 fe17 	bl	800a242 <USB_ReadDevInEPInterrupt>
 8004614:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d057      	beq.n	80046d0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	2201      	movs	r2, #1
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	43db      	mvns	r3, r3
 800463a:	69f9      	ldr	r1, [r7, #28]
 800463c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004640:	4013      	ands	r3, r2
 8004642:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004650:	461a      	mov	r2, r3
 8004652:	2301      	movs	r3, #1
 8004654:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	799b      	ldrb	r3, [r3, #6]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d132      	bne.n	80046c4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	3320      	adds	r3, #32
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4403      	add	r3, r0
 800467e:	331c      	adds	r3, #28
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4419      	add	r1, r3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4403      	add	r3, r0
 8004692:	3320      	adds	r3, #32
 8004694:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d113      	bne.n	80046c4 <HAL_PCD_IRQHandler+0x3a2>
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	3324      	adds	r3, #36	@ 0x24
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046bc:	461a      	mov	r2, r3
 80046be:	2101      	movs	r1, #1
 80046c0:	f005 fe1e 	bl	800a300 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f008 fb89 	bl	800cde2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e6:	461a      	mov	r2, r3
 80046e8:	2308      	movs	r3, #8
 80046ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004702:	461a      	mov	r2, r3
 8004704:	2310      	movs	r3, #16
 8004706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d008      	beq.n	8004724 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	461a      	mov	r2, r3
 8004720:	2340      	movs	r3, #64	@ 0x40
 8004722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d023      	beq.n	8004776 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800472e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004730:	6a38      	ldr	r0, [r7, #32]
 8004732:	f004 fe0b 	bl	800934c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	3310      	adds	r3, #16
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	3304      	adds	r3, #4
 8004748:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	78db      	ldrb	r3, [r3, #3]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d108      	bne.n	8004764 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	b2db      	uxtb	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f008 fbd6 	bl	800cf10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004770:	461a      	mov	r2, r3
 8004772:	2302      	movs	r3, #2
 8004774:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fce8 	bl	8005158 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	3301      	adds	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	f47f af2e 	bne.w	80045f8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f005 fce9 	bl	800a178 <USB_ReadInterrupts>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80047ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047b0:	d122      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d108      	bne.n	80047e2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047d8:	2100      	movs	r1, #0
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f008 fd50 	bl	800d280 <HAL_PCDEx_LPM_Callback>
 80047e0:	e002      	b.n	80047e8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f008 fb74 	bl	800ced0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80047f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f005 fcbb 	bl	800a178 <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800480c:	d112      	bne.n	8004834 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d102      	bne.n	8004824 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f008 fb30 	bl	800ce84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004832:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f005 fc9d 	bl	800a178 <USB_ReadInterrupts>
 800483e:	4603      	mov	r3, r0
 8004840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004848:	d121      	bne.n	800488e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004858:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004860:	2b00      	cmp	r3, #0
 8004862:	d111      	bne.n	8004888 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800487e:	2101      	movs	r1, #1
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f008 fcfd 	bl	800d280 <HAL_PCDEx_LPM_Callback>
 8004886:	e002      	b.n	800488e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f008 fafb 	bl	800ce84 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f005 fc70 	bl	800a178 <USB_ReadInterrupts>
 8004898:	4603      	mov	r3, r0
 800489a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a2:	f040 80b7 	bne.w	8004a14 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2110      	movs	r1, #16
 80048c0:	4618      	mov	r0, r3
 80048c2:	f004 fd43 	bl	800934c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c6:	2300      	movs	r3, #0
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ca:	e046      	b.n	800495a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d8:	461a      	mov	r2, r3
 80048da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490c:	461a      	mov	r2, r3
 800490e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004912:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	440a      	add	r2, r1
 800492a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800492e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004932:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800494e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004952:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004956:	3301      	adds	r3, #1
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	791b      	ldrb	r3, [r3, #4]
 800495e:	461a      	mov	r2, r3
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	4293      	cmp	r3, r2
 8004964:	d3b2      	bcc.n	80048cc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004974:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004978:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7bdb      	ldrb	r3, [r3, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004992:	f043 030b 	orr.w	r3, r3, #11
 8004996:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049a8:	f043 030b 	orr.w	r3, r3, #11
 80049ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ae:	e015      	b.n	80049dc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049c2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80049c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d6:	f043 030b 	orr.w	r3, r3, #11
 80049da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80049ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049fe:	461a      	mov	r2, r3
 8004a00:	f005 fc7e 	bl	800a300 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f005 fbad 	bl	800a178 <USB_ReadInterrupts>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a28:	d123      	bne.n	8004a72 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f005 fc43 	bl	800a2ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f004 fd00 	bl	800943e <USB_GetDevSpeed>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681c      	ldr	r4, [r3, #0]
 8004a4a:	f000 fea1 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 8004a4e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a54:	461a      	mov	r2, r3
 8004a56:	4620      	mov	r0, r4
 8004a58:	f004 fa0a 	bl	8008e70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f008 f9e8 	bl	800ce32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f005 fb7e 	bl	800a178 <USB_ReadInterrupts>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d10a      	bne.n	8004a9c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f008 f9c5 	bl	800ce16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f002 0208 	and.w	r2, r2, #8
 8004a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f005 fb69 	bl	800a178 <USB_ReadInterrupts>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b80      	cmp	r3, #128	@ 0x80
 8004aae:	d123      	bne.n	8004af8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004abc:	2301      	movs	r3, #1
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac0:	e014      	b.n	8004aec <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fb08 	bl	80050f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	3301      	adds	r3, #1
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	791b      	ldrb	r3, [r3, #4]
 8004af0:	461a      	mov	r2, r3
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d3e4      	bcc.n	8004ac2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f005 fb3b 	bl	800a178 <USB_ReadInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0c:	d13c      	bne.n	8004b88 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b0e:	2301      	movs	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b12:	e02b      	b.n	8004b6c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3318      	adds	r3, #24
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d115      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da12      	bge.n	8004b66 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3317      	adds	r3, #23
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fac8 	bl	80050f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	3301      	adds	r3, #1
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	791b      	ldrb	r3, [r3, #4]
 8004b70:	461a      	mov	r2, r3
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d3cd      	bcc.n	8004b14 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f005 faf3 	bl	800a178 <USB_ReadInterrupts>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b9c:	d156      	bne.n	8004c4c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba2:	e045      	b.n	8004c30 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d12e      	bne.n	8004c2a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	da2b      	bge.n	8004c2a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004bde:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d121      	bne.n	8004c2a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c26:	6053      	str	r3, [r2, #4]
            break;
 8004c28:	e008      	b.n	8004c3c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	791b      	ldrb	r3, [r3, #4]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d3b3      	bcc.n	8004ba4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f005 fa91 	bl	800a178 <USB_ReadInterrupts>
 8004c56:	4603      	mov	r3, r0
 8004c58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c60:	d10a      	bne.n	8004c78 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f008 f966 	bl	800cf34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f005 fa7b 	bl	800a178 <USB_ReadInterrupts>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d115      	bne.n	8004cb8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f008 f956 	bl	800cf50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	e000      	b.n	8004cb8 <HAL_PCD_IRQHandler+0x996>
      return;
 8004cb6:	bf00      	nop
    }
  }
}
 8004cb8:	3734      	adds	r7, #52	@ 0x34
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}

08004cbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_PCD_SetAddress+0x1a>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e012      	b.n	8004cfe <HAL_PCD_SetAddress+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f005 f9da 	bl	800a0a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4611      	mov	r1, r2
 8004d12:	461a      	mov	r2, r3
 8004d14:	4603      	mov	r3, r0
 8004d16:	70fb      	strb	r3, [r7, #3]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	803b      	strh	r3, [r7, #0]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	da0f      	bge.n	8004d4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	4613      	mov	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3304      	adds	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	705a      	strb	r2, [r3, #1]
 8004d4a:	e00f      	b.n	8004d6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	f003 020f 	and.w	r2, r3, #15
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	3304      	adds	r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d78:	883a      	ldrh	r2, [r7, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	78ba      	ldrb	r2, [r7, #2]
 8004d82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d96:	78bb      	ldrb	r3, [r7, #2]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d102      	bne.n	8004da2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_PCD_EP_Open+0xaa>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e00e      	b.n	8004dce <HAL_PCD_EP_Open+0xc8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f004 fb62 	bl	8009488 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b084      	sub	sp, #16
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da0f      	bge.n	8004e0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	4613      	mov	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	3310      	adds	r3, #16
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3304      	adds	r3, #4
 8004e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	705a      	strb	r2, [r3, #1]
 8004e08:	e00f      	b.n	8004e2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3304      	adds	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	f003 030f 	and.w	r3, r3, #15
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_PCD_EP_Close+0x6e>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e00e      	b.n	8004e62 <HAL_PCD_EP_Close+0x8c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f004 fba0 	bl	8009598 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	460b      	mov	r3, r1
 8004e78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e7a:	7afb      	ldrb	r3, [r7, #11]
 8004e7c:	f003 020f 	and.w	r2, r3, #15
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	3304      	adds	r3, #4
 8004e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	799b      	ldrb	r3, [r3, #6]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d102      	bne.n	8004ec6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	799b      	ldrb	r3, [r3, #6]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6979      	ldr	r1, [r7, #20]
 8004ed2:	f004 fc3d 	bl	8009750 <USB_EPStartXfer>

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004f02:	681b      	ldr	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f20:	7afb      	ldrb	r3, [r7, #11]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	3310      	adds	r3, #16
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2200      	movs	r2, #0
 8004f48:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f50:	7afb      	ldrb	r3, [r7, #11]
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	799b      	ldrb	r3, [r3, #6]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d102      	bne.n	8004f6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	799b      	ldrb	r3, [r3, #6]
 8004f72:	461a      	mov	r2, r3
 8004f74:	6979      	ldr	r1, [r7, #20]
 8004f76:	f004 fbeb 	bl	8009750 <USB_EPStartXfer>

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f90:	78fb      	ldrb	r3, [r7, #3]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	7912      	ldrb	r2, [r2, #4]
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e04f      	b.n	8005042 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	da0f      	bge.n	8004fca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f003 020f 	and.w	r2, r3, #15
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	3310      	adds	r3, #16
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	705a      	strb	r2, [r3, #1]
 8004fc8:	e00d      	b.n	8004fe6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	3304      	adds	r3, #4
 8004fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_PCD_EP_SetStall+0x82>
 8005002:	2302      	movs	r3, #2
 8005004:	e01d      	b.n	8005042 <HAL_PCD_EP_SetStall+0xbe>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	4618      	mov	r0, r3
 8005016:	f004 ff73 	bl	8009f00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	7999      	ldrb	r1, [r3, #6]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005032:	461a      	mov	r2, r3
 8005034:	f005 f964 	bl	800a300 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	7912      	ldrb	r2, [r2, #4]
 8005060:	4293      	cmp	r3, r2
 8005062:	d901      	bls.n	8005068 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e042      	b.n	80050ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506c:	2b00      	cmp	r3, #0
 800506e:	da0f      	bge.n	8005090 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 020f 	and.w	r2, r3, #15
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	3310      	adds	r3, #16
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4413      	add	r3, r2
 8005084:	3304      	adds	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	705a      	strb	r2, [r3, #1]
 800508e:	e00f      	b.n	80050b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	f003 020f 	and.w	r2, r3, #15
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	3304      	adds	r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_PCD_EP_ClrStall+0x86>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e00e      	b.n	80050ee <HAL_PCD_EP_ClrStall+0xa4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 ff7c 	bl	8009fdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da0c      	bge.n	8005124 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	3310      	adds	r3, #16
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	3304      	adds	r3, #4
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e00c      	b.n	800513e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	3304      	adds	r3, #4
 800513c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68f9      	ldr	r1, [r7, #12]
 8005144:	4618      	mov	r0, r3
 8005146:	f004 fd9b 	bl	8009c80 <USB_EPStopXfer>
 800514a:	4603      	mov	r3, r0
 800514c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800514e:	7afb      	ldrb	r3, [r7, #11]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	@ 0x28
 800515c:	af02      	add	r7, sp, #8
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	4613      	mov	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	3310      	adds	r3, #16
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	4413      	add	r3, r2
 800517c:	3304      	adds	r3, #4
 800517e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	429a      	cmp	r2, r3
 800518a:	d901      	bls.n	8005190 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e06b      	b.n	8005268 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d902      	bls.n	80051ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	3303      	adds	r3, #3
 80051b0:	089b      	lsrs	r3, r3, #2
 80051b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051b4:	e02a      	b.n	800520c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d902      	bls.n	80051d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3303      	adds	r3, #3
 80051d6:	089b      	lsrs	r3, r3, #2
 80051d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	6978      	ldr	r0, [r7, #20]
 80051f0:	f004 fdf0 	bl	8009dd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	441a      	add	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	441a      	add	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	429a      	cmp	r2, r3
 8005220:	d809      	bhi.n	8005236 <PCD_WriteEmptyTxFifo+0xde>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800522a:	429a      	cmp	r2, r3
 800522c:	d203      	bcs.n	8005236 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1bf      	bne.n	80051b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	429a      	cmp	r2, r3
 8005240:	d811      	bhi.n	8005266 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	2201      	movs	r2, #1
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005256:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	43db      	mvns	r3, r3
 800525c:	6939      	ldr	r1, [r7, #16]
 800525e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005262:	4013      	ands	r3, r2
 8005264:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	333c      	adds	r3, #60	@ 0x3c
 8005288:	3304      	adds	r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	799b      	ldrb	r3, [r3, #6]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d17b      	bne.n	800539e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d015      	beq.n	80052dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4a61      	ldr	r2, [pc, #388]	@ (8005438 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	f240 80b9 	bls.w	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80b3 	beq.w	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052d8:	6093      	str	r3, [r2, #8]
 80052da:	e0a7      	b.n	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f2:	461a      	mov	r2, r3
 80052f4:	2320      	movs	r3, #32
 80052f6:	6093      	str	r3, [r2, #8]
 80052f8:	e098      	b.n	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 8093 	bne.w	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	4a4b      	ldr	r2, [pc, #300]	@ (8005438 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d90f      	bls.n	800532e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005324:	461a      	mov	r2, r3
 8005326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532a:	6093      	str	r3, [r2, #8]
 800532c:	e07e      	b.n	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	4413      	add	r3, r2
 8005340:	3304      	adds	r3, #4
 8005342:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	0159      	lsls	r1, r3, #5
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	440b      	add	r3, r1
 8005350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d114      	bne.n	8005390 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005378:	461a      	mov	r2, r3
 800537a:	2101      	movs	r1, #1
 800537c:	f004 ffc0 	bl	800a300 <USB_EP0_OutStart>
 8005380:	e006      	b.n	8005390 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	441a      	add	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f007 fd08 	bl	800cdac <HAL_PCD_DataOutStageCallback>
 800539c:	e046      	b.n	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4a26      	ldr	r2, [pc, #152]	@ (800543c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d124      	bne.n	80053f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053bc:	461a      	mov	r2, r3
 80053be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053c2:	6093      	str	r3, [r2, #8]
 80053c4:	e032      	b.n	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	461a      	mov	r2, r3
 80053de:	2320      	movs	r3, #32
 80053e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f007 fcdf 	bl	800cdac <HAL_PCD_DataOutStageCallback>
 80053ee:	e01d      	b.n	800542c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d114      	bne.n	8005420 <PCD_EP_OutXfrComplete_int+0x1b0>
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	4613      	mov	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005418:	461a      	mov	r2, r3
 800541a:	2100      	movs	r1, #0
 800541c:	f004 ff70 	bl	800a300 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f007 fcc0 	bl	800cdac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	4f54300a 	.word	0x4f54300a
 800543c:	4f54310a 	.word	0x4f54310a

08005440 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	333c      	adds	r3, #60	@ 0x3c
 8005458:	3304      	adds	r3, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4a15      	ldr	r2, [pc, #84]	@ (80054c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d90e      	bls.n	8005494 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005492:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f007 fc77 	bl	800cd88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a0a      	ldr	r2, [pc, #40]	@ (80054c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d90c      	bls.n	80054bc <PCD_EP_OutSetupPacket_int+0x7c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	799b      	ldrb	r3, [r3, #6]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d108      	bne.n	80054bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054b4:	461a      	mov	r2, r3
 80054b6:	2101      	movs	r1, #1
 80054b8:	f004 ff22 	bl	800a300 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	4f54300a 	.word	0x4f54300a

080054cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
 80054d8:	4613      	mov	r3, r2
 80054da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d107      	bne.n	80054fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054ea:	883b      	ldrh	r3, [r7, #0]
 80054ec:	0419      	lsls	r1, r3, #16
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80054f8:	e028      	b.n	800554c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4413      	add	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005508:	2300      	movs	r3, #0
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	e00d      	b.n	800552a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	3340      	adds	r3, #64	@ 0x40
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	3301      	adds	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
 800552a:	7bfa      	ldrb	r2, [r7, #15]
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	3b01      	subs	r3, #1
 8005530:	429a      	cmp	r2, r3
 8005532:	d3ec      	bcc.n	800550e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005534:	883b      	ldrh	r3, [r7, #0]
 8005536:	0418      	lsls	r0, r3, #16
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	3b01      	subs	r3, #1
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	4302      	orrs	r2, r0
 8005544:	3340      	adds	r3, #64	@ 0x40
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	887a      	ldrh	r2, [r7, #2]
 800556c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ae:	f043 0303 	orr.w	r3, r3, #3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0cc      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055d8:	4b68      	ldr	r3, [pc, #416]	@ (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d90c      	bls.n	8005600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e6:	4b65      	ldr	r3, [pc, #404]	@ (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ee:	4b63      	ldr	r3, [pc, #396]	@ (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d001      	beq.n	8005600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0b8      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d020      	beq.n	800564e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005618:	4b59      	ldr	r3, [pc, #356]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a58      	ldr	r2, [pc, #352]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005630:	4b53      	ldr	r3, [pc, #332]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4a52      	ldr	r2, [pc, #328]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800563a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800563c:	4b50      	ldr	r3, [pc, #320]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	494d      	ldr	r1, [pc, #308]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d044      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d107      	bne.n	8005672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005662:	4b47      	ldr	r3, [pc, #284]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d119      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e07f      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d003      	beq.n	8005682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567e:	2b03      	cmp	r3, #3
 8005680:	d107      	bne.n	8005692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005682:	4b3f      	ldr	r3, [pc, #252]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e06f      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005692:	4b3b      	ldr	r3, [pc, #236]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e067      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a2:	4b37      	ldr	r3, [pc, #220]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f023 0203 	bic.w	r2, r3, #3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4934      	ldr	r1, [pc, #208]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b4:	f7fc fd40 	bl	8002138 <HAL_GetTick>
 80056b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056bc:	f7fc fd3c 	bl	8002138 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e04f      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 020c 	and.w	r2, r3, #12
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d1eb      	bne.n	80056bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056e4:	4b25      	ldr	r3, [pc, #148]	@ (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d20c      	bcs.n	800570c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	4b22      	ldr	r3, [pc, #136]	@ (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	4b20      	ldr	r3, [pc, #128]	@ (800577c <HAL_RCC_ClockConfig+0x1b8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d001      	beq.n	800570c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e032      	b.n	8005772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005718:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4916      	ldr	r1, [pc, #88]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d009      	beq.n	800574a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	490e      	ldr	r1, [pc, #56]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	4313      	orrs	r3, r2
 8005748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800574a:	f000 fb7f 	bl	8005e4c <HAL_RCC_GetSysClockFreq>
 800574e:	4602      	mov	r2, r0
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	490a      	ldr	r1, [pc, #40]	@ (8005784 <HAL_RCC_ClockConfig+0x1c0>)
 800575c:	5ccb      	ldrb	r3, [r1, r3]
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	4a09      	ldr	r2, [pc, #36]	@ (8005788 <HAL_RCC_ClockConfig+0x1c4>)
 8005764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005766:	4b09      	ldr	r3, [pc, #36]	@ (800578c <HAL_RCC_ClockConfig+0x1c8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7fc fca0 	bl	80020b0 <HAL_InitTick>

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40023c00 	.word	0x40023c00
 8005780:	40023800 	.word	0x40023800
 8005784:	0800dd98 	.word	0x0800dd98
 8005788:	20000000 	.word	0x20000000
 800578c:	20000004 	.word	0x20000004

08005790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005794:	4b03      	ldr	r3, [pc, #12]	@ (80057a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000

080057a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057ac:	f7ff fff0 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057b0:	4602      	mov	r2, r0
 80057b2:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	0a9b      	lsrs	r3, r3, #10
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	4903      	ldr	r1, [pc, #12]	@ (80057cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057be:	5ccb      	ldrb	r3, [r1, r3]
 80057c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	0800dda8 	.word	0x0800dda8

080057d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057d4:	f7ff ffdc 	bl	8005790 <HAL_RCC_GetHCLKFreq>
 80057d8:	4602      	mov	r2, r0
 80057da:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	0b5b      	lsrs	r3, r3, #13
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	4903      	ldr	r1, [pc, #12]	@ (80057f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057e6:	5ccb      	ldrb	r3, [r1, r3]
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40023800 	.word	0x40023800
 80057f4:	0800dda8 	.word	0x0800dda8

080057f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	@ 0x30
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005830:	4b6f      	ldr	r3, [pc, #444]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005836:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583e:	496c      	ldr	r1, [pc, #432]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800584e:	2301      	movs	r3, #1
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d010      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800585e:	4b64      	ldr	r3, [pc, #400]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005864:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	4960      	ldr	r1, [pc, #384]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800587c:	2301      	movs	r3, #1
 800587e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d017      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800588c:	4b58      	ldr	r3, [pc, #352]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800588e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	4955      	ldr	r1, [pc, #340]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058aa:	d101      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80058ac:	2301      	movs	r3, #1
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80058b8:	2301      	movs	r3, #1
 80058ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d017      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058c8:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d6:	4946      	ldr	r1, [pc, #280]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e6:	d101      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80058e8:	2301      	movs	r3, #1
 80058ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80058f4:	2301      	movs	r3, #1
 80058f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 808a 	beq.w	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	4a38      	ldr	r2, [pc, #224]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005914:	6413      	str	r3, [r2, #64]	@ 0x40
 8005916:	4b36      	ldr	r3, [pc, #216]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005922:	4b34      	ldr	r3, [pc, #208]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a33      	ldr	r2, [pc, #204]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800592c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800592e:	f7fc fc03 	bl	8002138 <HAL_GetTick>
 8005932:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005934:	e008      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005936:	f7fc fbff 	bl	8002138 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e278      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005948:	4b2a      	ldr	r3, [pc, #168]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005954:	4b26      	ldr	r3, [pc, #152]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800595c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d02f      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	429a      	cmp	r2, r3
 8005970:	d028      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005972:	4b1f      	ldr	r3, [pc, #124]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800597a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800597c:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005982:	4b1d      	ldr	r3, [pc, #116]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005988:	4a19      	ldr	r2, [pc, #100]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800598e:	4b18      	ldr	r3, [pc, #96]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b01      	cmp	r3, #1
 8005998:	d114      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800599a:	f7fc fbcd 	bl	8002138 <HAL_GetTick>
 800599e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a0:	e00a      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a2:	f7fc fbc9 	bl	8002138 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e240      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b8:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0ee      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059d0:	d114      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80059d2:	4b07      	ldr	r3, [pc, #28]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e6:	4902      	ldr	r1, [pc, #8]	@ (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	608b      	str	r3, [r1, #8]
 80059ec:	e00c      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40007000 	.word	0x40007000
 80059f8:	42470e40 	.word	0x42470e40
 80059fc:	4b4a      	ldr	r3, [pc, #296]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	4a49      	ldr	r2, [pc, #292]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a06:	6093      	str	r3, [r2, #8]
 8005a08:	4b47      	ldr	r3, [pc, #284]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a14:	4944      	ldr	r1, [pc, #272]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005a2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4a:	4937      	ldr	r1, [pc, #220]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a5e:	4b32      	ldr	r3, [pc, #200]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a64:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a6c:	492e      	ldr	r1, [pc, #184]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a80:	4b29      	ldr	r3, [pc, #164]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a86:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	4926      	ldr	r1, [pc, #152]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abe:	491a      	ldr	r1, [pc, #104]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d011      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005ad2:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ad8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae0:	4911      	ldr	r1, [pc, #68]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005af0:	d101      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005af2:	2301      	movs	r3, #1
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d005      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b04:	f040 80ff 	bne.w	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b08:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0e:	f7fc fb13 	bl	8002138 <HAL_GetTick>
 8005b12:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b14:	e00e      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b16:	f7fc fb0f 	bl	8002138 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d907      	bls.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e188      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	424711e0 	.word	0x424711e0
 8005b30:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b34:	4b7e      	ldr	r3, [pc, #504]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1ea      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d028      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d124      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005b68:	4b71      	ldr	r3, [pc, #452]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	3301      	adds	r3, #1
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	019b      	lsls	r3, r3, #6
 8005b92:	431a      	orrs	r2, r3
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	071b      	lsls	r3, r3, #28
 8005baa:	4961      	ldr	r1, [pc, #388]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bc6:	d00a      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d035      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bdc:	d130      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005bde:	4b54      	ldr	r3, [pc, #336]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	3301      	adds	r3, #1
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bf6:	0f1b      	lsrs	r3, r3, #28
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	019b      	lsls	r3, r3, #6
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	085b      	lsrs	r3, r3, #1
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	041b      	lsls	r3, r3, #16
 8005c12:	431a      	orrs	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	061b      	lsls	r3, r3, #24
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	071b      	lsls	r3, r3, #28
 8005c20:	4943      	ldr	r1, [pc, #268]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c28:	4b41      	ldr	r3, [pc, #260]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c2e:	f023 021f 	bic.w	r2, r3, #31
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	3b01      	subs	r3, #1
 8005c38:	493d      	ldr	r1, [pc, #244]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d029      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c54:	d124      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005c56:	4b36      	ldr	r3, [pc, #216]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	3301      	adds	r3, #1
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c68:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c6e:	0f1b      	lsrs	r3, r3, #28
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	019b      	lsls	r3, r3, #6
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	061b      	lsls	r3, r3, #24
 8005c92:	431a      	orrs	r2, r3
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	071b      	lsls	r3, r3, #28
 8005c98:	4925      	ldr	r1, [pc, #148]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d016      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	071b      	lsls	r3, r3, #28
 8005cd2:	4917      	ldr	r1, [pc, #92]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cda:	4b16      	ldr	r3, [pc, #88]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ce0:	f7fc fa2a 	bl	8002138 <HAL_GetTick>
 8005ce4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ce8:	f7fc fa26 	bl	8002138 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e09f      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	f040 8095 	bne.w	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d14:	f7fc fa10 	bl	8002138 <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d1a:	e00f      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d1c:	f7fc fa0c 	bl	8002138 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d908      	bls.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e085      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800
 8005d34:	42470068 	.word	0x42470068
 8005d38:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d3c:	4b41      	ldr	r3, [pc, #260]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d48:	d0e8      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d02b      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d127      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005d72:	4b34      	ldr	r3, [pc, #208]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	019b      	lsls	r3, r3, #6
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	3b01      	subs	r3, #1
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	061b      	lsls	r3, r3, #24
 8005da0:	4928      	ldr	r1, [pc, #160]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005da8:	4b26      	ldr	r3, [pc, #152]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dae:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	3b01      	subs	r3, #1
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	4922      	ldr	r1, [pc, #136]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d01d      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dd6:	d118      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dde:	0e1b      	lsrs	r3, r3, #24
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	019b      	lsls	r3, r3, #6
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	061b      	lsls	r3, r3, #24
 8005e02:	4910      	ldr	r1, [pc, #64]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e10:	f7fc f992 	bl	8002138 <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e18:	f7fc f98e 	bl	8002138 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e007      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e2a:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e36:	d1ef      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3730      	adds	r7, #48	@ 0x30
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40023800 	.word	0x40023800
 8005e48:	42470070 	.word	0x42470070

08005e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e50:	b0ae      	sub	sp, #184	@ 0xb8
 8005e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e72:	4bcb      	ldr	r3, [pc, #812]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b0c      	cmp	r3, #12
 8005e7c:	f200 8206 	bhi.w	800628c <HAL_RCC_GetSysClockFreq+0x440>
 8005e80:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005ebd 	.word	0x08005ebd
 8005e8c:	0800628d 	.word	0x0800628d
 8005e90:	0800628d 	.word	0x0800628d
 8005e94:	0800628d 	.word	0x0800628d
 8005e98:	08005ec5 	.word	0x08005ec5
 8005e9c:	0800628d 	.word	0x0800628d
 8005ea0:	0800628d 	.word	0x0800628d
 8005ea4:	0800628d 	.word	0x0800628d
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	0800628d 	.word	0x0800628d
 8005eb0:	0800628d 	.word	0x0800628d
 8005eb4:	0800628d 	.word	0x0800628d
 8005eb8:	080060bd 	.word	0x080060bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ebc:	4bb9      	ldr	r3, [pc, #740]	@ (80061a4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8005ec2:	e1e7      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ec4:	4bb8      	ldr	r3, [pc, #736]	@ (80061a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005eca:	e1e3      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ecc:	4bb4      	ldr	r3, [pc, #720]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ed8:	4bb1      	ldr	r3, [pc, #708]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d071      	beq.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee4:	4bae      	ldr	r3, [pc, #696]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	099b      	lsrs	r3, r3, #6
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ef0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f00:	2300      	movs	r3, #0
 8005f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	f04f 0000 	mov.w	r0, #0
 8005f12:	f04f 0100 	mov.w	r1, #0
 8005f16:	0159      	lsls	r1, r3, #5
 8005f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f1c:	0150      	lsls	r0, r2, #5
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4621      	mov	r1, r4
 8005f24:	1a51      	subs	r1, r2, r1
 8005f26:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f28:	4629      	mov	r1, r5
 8005f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	018b      	lsls	r3, r1, #6
 8005f40:	4641      	mov	r1, r8
 8005f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f46:	4641      	mov	r1, r8
 8005f48:	018a      	lsls	r2, r1, #6
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	1a51      	subs	r1, r2, r1
 8005f4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f50:	4649      	mov	r1, r9
 8005f52:	eb63 0301 	sbc.w	r3, r3, r1
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005f64:	4649      	mov	r1, r9
 8005f66:	00cb      	lsls	r3, r1, #3
 8005f68:	4641      	mov	r1, r8
 8005f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f6e:	4641      	mov	r1, r8
 8005f70:	00ca      	lsls	r2, r1, #3
 8005f72:	4610      	mov	r0, r2
 8005f74:	4619      	mov	r1, r3
 8005f76:	4603      	mov	r3, r0
 8005f78:	4622      	mov	r2, r4
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7e:	462b      	mov	r3, r5
 8005f80:	460a      	mov	r2, r1
 8005f82:	eb42 0303 	adc.w	r3, r2, r3
 8005f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f94:	4629      	mov	r1, r5
 8005f96:	024b      	lsls	r3, r1, #9
 8005f98:	4621      	mov	r1, r4
 8005f9a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	024a      	lsls	r2, r1, #9
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005fb8:	f7fa f9d2 	bl	8000360 <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fc6:	e067      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc8:	4b75      	ldr	r3, [pc, #468]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	099b      	lsrs	r3, r3, #6
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fd4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fe6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	f04f 0000 	mov.w	r0, #0
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	0159      	lsls	r1, r3, #5
 8005ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ffc:	0150      	lsls	r0, r2, #5
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4621      	mov	r1, r4
 8006004:	1a51      	subs	r1, r2, r1
 8006006:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006008:	4629      	mov	r1, r5
 800600a:	eb63 0301 	sbc.w	r3, r3, r1
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800601c:	4649      	mov	r1, r9
 800601e:	018b      	lsls	r3, r1, #6
 8006020:	4641      	mov	r1, r8
 8006022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006026:	4641      	mov	r1, r8
 8006028:	018a      	lsls	r2, r1, #6
 800602a:	4641      	mov	r1, r8
 800602c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006030:	4649      	mov	r1, r9
 8006032:	eb63 0b01 	sbc.w	fp, r3, r1
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006042:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006046:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800604a:	4692      	mov	sl, r2
 800604c:	469b      	mov	fp, r3
 800604e:	4623      	mov	r3, r4
 8006050:	eb1a 0303 	adds.w	r3, sl, r3
 8006054:	623b      	str	r3, [r7, #32]
 8006056:	462b      	mov	r3, r5
 8006058:	eb4b 0303 	adc.w	r3, fp, r3
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	f04f 0300 	mov.w	r3, #0
 8006066:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800606a:	4629      	mov	r1, r5
 800606c:	028b      	lsls	r3, r1, #10
 800606e:	4621      	mov	r1, r4
 8006070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006074:	4621      	mov	r1, r4
 8006076:	028a      	lsls	r2, r1, #10
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006080:	2200      	movs	r2, #0
 8006082:	673b      	str	r3, [r7, #112]	@ 0x70
 8006084:	677a      	str	r2, [r7, #116]	@ 0x74
 8006086:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800608a:	f7fa f969 	bl	8000360 <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4613      	mov	r3, r2
 8006094:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006098:	4b41      	ldr	r3, [pc, #260]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	0c1b      	lsrs	r3, r3, #16
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	3301      	adds	r3, #1
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80060aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80060ba:	e0eb      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060bc:	4b38      	ldr	r3, [pc, #224]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060c8:	4b35      	ldr	r3, [pc, #212]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d06b      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d4:	4b32      	ldr	r3, [pc, #200]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	2200      	movs	r2, #0
 80060dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80060e8:	2300      	movs	r3, #0
 80060ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80060ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80060f0:	4622      	mov	r2, r4
 80060f2:	462b      	mov	r3, r5
 80060f4:	f04f 0000 	mov.w	r0, #0
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	0159      	lsls	r1, r3, #5
 80060fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006102:	0150      	lsls	r0, r2, #5
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4621      	mov	r1, r4
 800610a:	1a51      	subs	r1, r2, r1
 800610c:	61b9      	str	r1, [r7, #24]
 800610e:	4629      	mov	r1, r5
 8006110:	eb63 0301 	sbc.w	r3, r3, r1
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006122:	4659      	mov	r1, fp
 8006124:	018b      	lsls	r3, r1, #6
 8006126:	4651      	mov	r1, sl
 8006128:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800612c:	4651      	mov	r1, sl
 800612e:	018a      	lsls	r2, r1, #6
 8006130:	4651      	mov	r1, sl
 8006132:	ebb2 0801 	subs.w	r8, r2, r1
 8006136:	4659      	mov	r1, fp
 8006138:	eb63 0901 	sbc.w	r9, r3, r1
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006148:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800614c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006150:	4690      	mov	r8, r2
 8006152:	4699      	mov	r9, r3
 8006154:	4623      	mov	r3, r4
 8006156:	eb18 0303 	adds.w	r3, r8, r3
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	462b      	mov	r3, r5
 800615e:	eb49 0303 	adc.w	r3, r9, r3
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006170:	4629      	mov	r1, r5
 8006172:	024b      	lsls	r3, r1, #9
 8006174:	4621      	mov	r1, r4
 8006176:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800617a:	4621      	mov	r1, r4
 800617c:	024a      	lsls	r2, r1, #9
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006186:	2200      	movs	r2, #0
 8006188:	65bb      	str	r3, [r7, #88]	@ 0x58
 800618a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800618c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006190:	f7fa f8e6 	bl	8000360 <__aeabi_uldivmod>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4613      	mov	r3, r2
 800619a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800619e:	e065      	b.n	800626c <HAL_RCC_GetSysClockFreq+0x420>
 80061a0:	40023800 	.word	0x40023800
 80061a4:	00f42400 	.word	0x00f42400
 80061a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061ac:	4b3d      	ldr	r3, [pc, #244]	@ (80062a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	099b      	lsrs	r3, r3, #6
 80061b2:	2200      	movs	r2, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	4611      	mov	r1, r2
 80061b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80061be:	2300      	movs	r3, #0
 80061c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80061c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80061c6:	4642      	mov	r2, r8
 80061c8:	464b      	mov	r3, r9
 80061ca:	f04f 0000 	mov.w	r0, #0
 80061ce:	f04f 0100 	mov.w	r1, #0
 80061d2:	0159      	lsls	r1, r3, #5
 80061d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d8:	0150      	lsls	r0, r2, #5
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4641      	mov	r1, r8
 80061e0:	1a51      	subs	r1, r2, r1
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	4649      	mov	r1, r9
 80061e6:	eb63 0301 	sbc.w	r3, r3, r1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80061f8:	4659      	mov	r1, fp
 80061fa:	018b      	lsls	r3, r1, #6
 80061fc:	4651      	mov	r1, sl
 80061fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006202:	4651      	mov	r1, sl
 8006204:	018a      	lsls	r2, r1, #6
 8006206:	4651      	mov	r1, sl
 8006208:	1a54      	subs	r4, r2, r1
 800620a:	4659      	mov	r1, fp
 800620c:	eb63 0501 	sbc.w	r5, r3, r1
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	00eb      	lsls	r3, r5, #3
 800621a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800621e:	00e2      	lsls	r2, r4, #3
 8006220:	4614      	mov	r4, r2
 8006222:	461d      	mov	r5, r3
 8006224:	4643      	mov	r3, r8
 8006226:	18e3      	adds	r3, r4, r3
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	464b      	mov	r3, r9
 800622c:	eb45 0303 	adc.w	r3, r5, r3
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800623e:	4629      	mov	r1, r5
 8006240:	028b      	lsls	r3, r1, #10
 8006242:	4621      	mov	r1, r4
 8006244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006248:	4621      	mov	r1, r4
 800624a:	028a      	lsls	r2, r1, #10
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006254:	2200      	movs	r2, #0
 8006256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006258:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800625a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800625e:	f7fa f87f 	bl	8000360 <__aeabi_uldivmod>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4613      	mov	r3, r2
 8006268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800626c:	4b0d      	ldr	r3, [pc, #52]	@ (80062a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	0f1b      	lsrs	r3, r3, #28
 8006272:	f003 0307 	and.w	r3, r3, #7
 8006276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800627a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800627e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006282:	fbb2 f3f3 	udiv	r3, r2, r3
 8006286:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800628a:	e003      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800628c:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800628e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006292:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006294:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006298:	4618      	mov	r0, r3
 800629a:	37b8      	adds	r7, #184	@ 0xb8
 800629c:	46bd      	mov	sp, r7
 800629e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	00f42400 	.word	0x00f42400

080062ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e28d      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 8083 	beq.w	80063d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062cc:	4b94      	ldr	r3, [pc, #592]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 030c 	and.w	r3, r3, #12
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d019      	beq.n	800630c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062d8:	4b91      	ldr	r3, [pc, #580]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d106      	bne.n	80062f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062e4:	4b8e      	ldr	r3, [pc, #568]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062f0:	d00c      	beq.n	800630c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80062fa:	2b0c      	cmp	r3, #12
 80062fc:	d112      	bne.n	8006324 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062fe:	4b88      	ldr	r3, [pc, #544]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800630a:	d10b      	bne.n	8006324 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800630c:	4b84      	ldr	r3, [pc, #528]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d05b      	beq.n	80063d0 <HAL_RCC_OscConfig+0x124>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d157      	bne.n	80063d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e25a      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800632c:	d106      	bne.n	800633c <HAL_RCC_OscConfig+0x90>
 800632e:	4b7c      	ldr	r3, [pc, #496]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a7b      	ldr	r2, [pc, #492]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	e01d      	b.n	8006378 <HAL_RCC_OscConfig+0xcc>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006344:	d10c      	bne.n	8006360 <HAL_RCC_OscConfig+0xb4>
 8006346:	4b76      	ldr	r3, [pc, #472]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a75      	ldr	r2, [pc, #468]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 800634c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	4b73      	ldr	r3, [pc, #460]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a72      	ldr	r2, [pc, #456]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	e00b      	b.n	8006378 <HAL_RCC_OscConfig+0xcc>
 8006360:	4b6f      	ldr	r3, [pc, #444]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a6e      	ldr	r2, [pc, #440]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	4b6c      	ldr	r3, [pc, #432]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a6b      	ldr	r2, [pc, #428]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d013      	beq.n	80063a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fb feda 	bl	8002138 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006388:	f7fb fed6 	bl	8002138 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b64      	cmp	r3, #100	@ 0x64
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e21f      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	4b61      	ldr	r3, [pc, #388]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f0      	beq.n	8006388 <HAL_RCC_OscConfig+0xdc>
 80063a6:	e014      	b.n	80063d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fb fec6 	bl	8002138 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b0:	f7fb fec2 	bl	8002138 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b64      	cmp	r3, #100	@ 0x64
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e20b      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c2:	4b57      	ldr	r3, [pc, #348]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x104>
 80063ce:	e000      	b.n	80063d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d06f      	beq.n	80064be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063de:	4b50      	ldr	r3, [pc, #320]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d017      	beq.n	800641a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d105      	bne.n	8006402 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80063f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006402:	4b47      	ldr	r3, [pc, #284]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d11c      	bne.n	8006448 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800640e:	4b44      	ldr	r3, [pc, #272]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d116      	bne.n	8006448 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800641a:	4b41      	ldr	r3, [pc, #260]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <HAL_RCC_OscConfig+0x186>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d001      	beq.n	8006432 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e1d3      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006432:	4b3b      	ldr	r3, [pc, #236]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	4937      	ldr	r1, [pc, #220]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006442:	4313      	orrs	r3, r2
 8006444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006446:	e03a      	b.n	80064be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d020      	beq.n	8006492 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006450:	4b34      	ldr	r3, [pc, #208]	@ (8006524 <HAL_RCC_OscConfig+0x278>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7fb fe6f 	bl	8002138 <HAL_GetTick>
 800645a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645c:	e008      	b.n	8006470 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800645e:	f7fb fe6b 	bl	8002138 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e1b4      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006470:	4b2b      	ldr	r3, [pc, #172]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800647c:	4b28      	ldr	r3, [pc, #160]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	4925      	ldr	r1, [pc, #148]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 800648c:	4313      	orrs	r3, r2
 800648e:	600b      	str	r3, [r1, #0]
 8006490:	e015      	b.n	80064be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006492:	4b24      	ldr	r3, [pc, #144]	@ (8006524 <HAL_RCC_OscConfig+0x278>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fb fe4e 	bl	8002138 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064a0:	f7fb fe4a 	bl	8002138 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e193      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d036      	beq.n	8006538 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d016      	beq.n	8006500 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d2:	4b15      	ldr	r3, [pc, #84]	@ (8006528 <HAL_RCC_OscConfig+0x27c>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d8:	f7fb fe2e 	bl	8002138 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064e0:	f7fb fe2a 	bl	8002138 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e173      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <HAL_RCC_OscConfig+0x274>)
 80064f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0x234>
 80064fe:	e01b      	b.n	8006538 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006500:	4b09      	ldr	r3, [pc, #36]	@ (8006528 <HAL_RCC_OscConfig+0x27c>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006506:	f7fb fe17 	bl	8002138 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800650c:	e00e      	b.n	800652c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800650e:	f7fb fe13 	bl	8002138 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d907      	bls.n	800652c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e15c      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
 8006520:	40023800 	.word	0x40023800
 8006524:	42470000 	.word	0x42470000
 8006528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800652c:	4b8a      	ldr	r3, [pc, #552]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 800652e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1ea      	bne.n	800650e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8097 	beq.w	8006674 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800654a:	4b83      	ldr	r3, [pc, #524]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10f      	bne.n	8006576 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	4b7f      	ldr	r3, [pc, #508]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655e:	4a7e      	ldr	r2, [pc, #504]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 8006560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006564:	6413      	str	r3, [r2, #64]	@ 0x40
 8006566:	4b7c      	ldr	r3, [pc, #496]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 8006568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800656e:	60bb      	str	r3, [r7, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006572:	2301      	movs	r3, #1
 8006574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006576:	4b79      	ldr	r3, [pc, #484]	@ (800675c <HAL_RCC_OscConfig+0x4b0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800657e:	2b00      	cmp	r3, #0
 8006580:	d118      	bne.n	80065b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006582:	4b76      	ldr	r3, [pc, #472]	@ (800675c <HAL_RCC_OscConfig+0x4b0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a75      	ldr	r2, [pc, #468]	@ (800675c <HAL_RCC_OscConfig+0x4b0>)
 8006588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800658c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800658e:	f7fb fdd3 	bl	8002138 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006596:	f7fb fdcf 	bl	8002138 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e118      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a8:	4b6c      	ldr	r3, [pc, #432]	@ (800675c <HAL_RCC_OscConfig+0x4b0>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d106      	bne.n	80065ca <HAL_RCC_OscConfig+0x31e>
 80065bc:	4b66      	ldr	r3, [pc, #408]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c0:	4a65      	ldr	r2, [pc, #404]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c8:	e01c      	b.n	8006604 <HAL_RCC_OscConfig+0x358>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d10c      	bne.n	80065ec <HAL_RCC_OscConfig+0x340>
 80065d2:	4b61      	ldr	r3, [pc, #388]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d6:	4a60      	ldr	r2, [pc, #384]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065d8:	f043 0304 	orr.w	r3, r3, #4
 80065dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80065de:	4b5e      	ldr	r3, [pc, #376]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e2:	4a5d      	ldr	r2, [pc, #372]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065e4:	f043 0301 	orr.w	r3, r3, #1
 80065e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ea:	e00b      	b.n	8006604 <HAL_RCC_OscConfig+0x358>
 80065ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f0:	4a59      	ldr	r2, [pc, #356]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f8:	4b57      	ldr	r3, [pc, #348]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fc:	4a56      	ldr	r2, [pc, #344]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80065fe:	f023 0304 	bic.w	r3, r3, #4
 8006602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d015      	beq.n	8006638 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800660c:	f7fb fd94 	bl	8002138 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006612:	e00a      	b.n	800662a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006614:	f7fb fd90 	bl	8002138 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006622:	4293      	cmp	r3, r2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e0d7      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800662a:	4b4b      	ldr	r3, [pc, #300]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0ee      	beq.n	8006614 <HAL_RCC_OscConfig+0x368>
 8006636:	e014      	b.n	8006662 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006638:	f7fb fd7e 	bl	8002138 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663e:	e00a      	b.n	8006656 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006640:	f7fb fd7a 	bl	8002138 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664e:	4293      	cmp	r3, r2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e0c1      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006656:	4b40      	ldr	r3, [pc, #256]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1ee      	bne.n	8006640 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d105      	bne.n	8006674 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006668:	4b3b      	ldr	r3, [pc, #236]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	4a3a      	ldr	r2, [pc, #232]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 800666e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006672:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80ad 	beq.w	80067d8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800667e:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 030c 	and.w	r3, r3, #12
 8006686:	2b08      	cmp	r3, #8
 8006688:	d060      	beq.n	800674c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d145      	bne.n	800671e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006692:	4b33      	ldr	r3, [pc, #204]	@ (8006760 <HAL_RCC_OscConfig+0x4b4>)
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fb fd4e 	bl	8002138 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066a0:	f7fb fd4a 	bl	8002138 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e093      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b2:	4b29      	ldr	r3, [pc, #164]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1f0      	bne.n	80066a0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066cc:	019b      	lsls	r3, r3, #6
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	3b01      	subs	r3, #1
 80066d8:	041b      	lsls	r3, r3, #16
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e0:	061b      	lsls	r3, r3, #24
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	071b      	lsls	r3, r3, #28
 80066ea:	491b      	ldr	r1, [pc, #108]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <HAL_RCC_OscConfig+0x4b4>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f6:	f7fb fd1f 	bl	8002138 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066fe:	f7fb fd1b 	bl	8002138 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e064      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006710:	4b11      	ldr	r3, [pc, #68]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0f0      	beq.n	80066fe <HAL_RCC_OscConfig+0x452>
 800671c:	e05c      	b.n	80067d8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671e:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <HAL_RCC_OscConfig+0x4b4>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fb fd08 	bl	8002138 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800672c:	f7fb fd04 	bl	8002138 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e04d      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673e:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <HAL_RCC_OscConfig+0x4ac>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x480>
 800674a:	e045      	b.n	80067d8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d107      	bne.n	8006764 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e040      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
 8006758:	40023800 	.word	0x40023800
 800675c:	40007000 	.word	0x40007000
 8006760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006764:	4b1f      	ldr	r3, [pc, #124]	@ (80067e4 <HAL_RCC_OscConfig+0x538>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d030      	beq.n	80067d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677c:	429a      	cmp	r2, r3
 800677e:	d129      	bne.n	80067d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678a:	429a      	cmp	r2, r3
 800678c:	d122      	bne.n	80067d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006794:	4013      	ands	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800679a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800679c:	4293      	cmp	r3, r2
 800679e:	d119      	bne.n	80067d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	3b01      	subs	r3, #1
 80067ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d10f      	bne.n	80067d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40023800 	.word	0x40023800

080067e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e022      	b.n	8006840 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d105      	bne.n	8006812 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7fb f89f 	bl	8001950 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2203      	movs	r2, #3
 8006816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f814 	bl	8006848 <HAL_SD_InitCard>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e00a      	b.n	8006840 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006848:	b5b0      	push	{r4, r5, r7, lr}
 800684a:	b08e      	sub	sp, #56	@ 0x38
 800684c:	af04      	add	r7, sp, #16
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006850:	2300      	movs	r3, #0
 8006852:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800685c:	2300      	movs	r3, #0
 800685e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006864:	2376      	movs	r3, #118	@ 0x76
 8006866:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681d      	ldr	r5, [r3, #0]
 800686c:	466c      	mov	r4, sp
 800686e:	f107 0314 	add.w	r3, r7, #20
 8006872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800687a:	f107 0308 	add.w	r3, r7, #8
 800687e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006880:	4628      	mov	r0, r5
 8006882:	f001 fd5f 	bl	8008344 <SDIO_Init>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800688c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e04f      	b.n	8006938 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006898:	4b29      	ldr	r3, [pc, #164]	@ (8006940 <HAL_SD_InitCard+0xf8>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f001 fd97 	bl	80083d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80068a8:	4b25      	ldr	r3, [pc, #148]	@ (8006940 <HAL_SD_InitCard+0xf8>)
 80068aa:	2201      	movs	r2, #1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80068ae:	2002      	movs	r0, #2
 80068b0:	f7fb fc4e 	bl	8002150 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 ff55 	bl	8007764 <SD_PowerON>
 80068ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e02e      	b.n	8006938 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fe74 	bl	80075c8 <SD_InitCard>
 80068e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e01b      	b.n	8006938 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fdf6 	bl	80084fa <SDMMC_CmdBlockLength>
 800690e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a0a      	ldr	r2, [pc, #40]	@ (8006944 <HAL_SD_InitCard+0xfc>)
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3728      	adds	r7, #40	@ 0x28
 800693c:	46bd      	mov	sp, r7
 800693e:	bdb0      	pop	{r4, r5, r7, pc}
 8006940:	422580a0 	.word	0x422580a0
 8006944:	004005ff 	.word	0x004005ff

08006948 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08c      	sub	sp, #48	@ 0x30
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d107      	bne.n	8006970 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0be      	b.n	8006aee <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	f040 80b7 	bne.w	8006aec <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006984:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	441a      	add	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698e:	429a      	cmp	r2, r3
 8006990:	d907      	bls.n	80069a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e0a5      	b.n	8006aee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2203      	movs	r2, #3
 80069a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2200      	movs	r2, #0
 80069b0:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80069c0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c6:	4a4c      	ldr	r2, [pc, #304]	@ (8006af8 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 80069c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	4a4b      	ldr	r2, [pc, #300]	@ (8006afc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80069d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d6:	2200      	movs	r2, #0
 80069d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069de:	2200      	movs	r2, #0
 80069e0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3380      	adds	r3, #128	@ 0x80
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	025b      	lsls	r3, r3, #9
 8006a10:	089b      	lsrs	r3, r3, #2
 8006a12:	f7fb fd81 	bl	8002518 <HAL_DMA_Start_IT>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d017      	beq.n	8006a4c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8006a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a33      	ldr	r2, [pc, #204]	@ (8006b00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006a32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e050      	b.n	8006aee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d002      	beq.n	8006a60 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	025b      	lsls	r3, r3, #9
 8006a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	025b      	lsls	r3, r3, #9
 8006a6a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a6c:	2390      	movs	r3, #144	@ 0x90
 8006a6e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a70:	2302      	movs	r3, #2
 8006a72:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f107 0210 	add.w	r2, r7, #16
 8006a84:	4611      	mov	r1, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 fd0b 	bl	80084a2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d90a      	bls.n	8006aa8 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2282      	movs	r2, #130	@ 0x82
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 fd6f 	bl	8008582 <SDMMC_CmdReadMultiBlock>
 8006aa4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006aa6:	e009      	b.n	8006abc <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2281      	movs	r2, #129	@ 0x81
 8006aac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fd42 	bl	800853e <SDMMC_CmdReadSingleBlock>
 8006aba:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d012      	beq.n	8006ae8 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8006b00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006ac8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e002      	b.n	8006aee <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e000      	b.n	8006aee <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006aec:	2302      	movs	r3, #2
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3730      	adds	r7, #48	@ 0x30
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	080073d7 	.word	0x080073d7
 8006afc:	08007449 	.word	0x08007449
 8006b00:	004005ff 	.word	0x004005ff
 8006b04:	4225858c 	.word	0x4225858c

08006b08 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08c      	sub	sp, #48	@ 0x30
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d107      	bne.n	8006b30 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0c1      	b.n	8006cb4 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f040 80ba 	bne.w	8006cb2 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	441a      	add	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d907      	bls.n	8006b62 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b56:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e0a8      	b.n	8006cb4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 021a 	orr.w	r2, r2, #26
 8006b80:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b86:	4a4d      	ldr	r2, [pc, #308]	@ (8006cbc <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8006b88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8006cc0 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8006b90:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b96:	2200      	movs	r2, #0
 8006b98:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	025b      	lsls	r3, r3, #9
 8006ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d90a      	bls.n	8006bc4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	22a0      	movs	r2, #160	@ 0xa0
 8006bb2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 fd25 	bl	800860a <SDMMC_CmdWriteMultiBlock>
 8006bc0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006bc2:	e009      	b.n	8006bd8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2290      	movs	r2, #144	@ 0x90
 8006bc8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f001 fcf8 	bl	80085c6 <SDMMC_CmdWriteSingleBlock>
 8006bd6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d012      	beq.n	8006c04 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a38      	ldr	r2, [pc, #224]	@ (8006cc4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e057      	b.n	8006cb4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006c04:	4b30      	ldr	r3, [pc, #192]	@ (8006cc8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0e:	2240      	movs	r2, #64	@ 0x40
 8006c10:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3380      	adds	r3, #128	@ 0x80
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	025b      	lsls	r3, r3, #9
 8006c40:	089b      	lsrs	r3, r3, #2
 8006c42:	f7fb fc69 	bl	8002518 <HAL_DMA_Start_IT>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01a      	beq.n	8006c82 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 021a 	bic.w	r2, r2, #26
 8006c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a18      	ldr	r2, [pc, #96]	@ (8006cc4 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c68:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e018      	b.n	8006cb4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
 8006c86:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	025b      	lsls	r3, r3, #9
 8006c8c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c8e:	2390      	movs	r3, #144	@ 0x90
 8006c90:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f107 0210 	add.w	r2, r7, #16
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 fbfa 	bl	80084a2 <SDIO_ConfigData>

      return HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e000      	b.n	8006cb4 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 8006cb2:	2302      	movs	r3, #2
  }
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3730      	adds	r7, #48	@ 0x30
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	080073ad 	.word	0x080073ad
 8006cc0:	08007449 	.word	0x08007449
 8006cc4:	004005ff 	.word	0x004005ff
 8006cc8:	4225858c 	.word	0x4225858c

08006ccc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_SD_IRQHandler+0x2e>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fdec 	bl	80078d0 <SD_Read_IT>
 8006cf8:	e155      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 808f 	beq.w	8006e28 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d12:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8006d22:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006d26:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d039      	beq.n	8006db6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_SD_IRQHandler+0x8a>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d011      	beq.n	8006d7a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fc78 	bl	8008650 <SDMMC_CmdStopTransfer>
 8006d60:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f91f 	bl	8006fb8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006d82:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <HAL_SD_IRQHandler+0xda>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f003 fbca 	bl	800a540 <HAL_SD_RxCpltCallback>
 8006dac:	e0fb      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f003 fbbc 	bl	800a52c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006db4:	e0f7      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80f2 	beq.w	8006fa6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fc3d 	bl	8008650 <SDMMC_CmdStopTransfer>
 8006dd6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d008      	beq.n	8006df0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f8e4 	bl	8006fb8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 80d5 	bne.w	8006fa6 <HAL_SD_IRQHandler+0x2da>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 80cf 	bne.w	8006fa6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0208 	bic.w	r2, r2, #8
 8006e16:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f003 fb83 	bl	800a52c <HAL_SD_TxCpltCallback>
}
 8006e26:	e0be      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d008      	beq.n	8006e48 <HAL_SD_IRQHandler+0x17c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fd96 	bl	8007972 <SD_Write_IT>
 8006e46:	e0ae      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80a7 	beq.w	8006fa6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6a:	f043 0202 	orr.w	r2, r3, #2
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e84:	f043 0208 	orr.w	r2, r3, #8
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9e:	f043 0220 	orr.w	r2, r3, #32
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	f043 0210 	orr.w	r2, r3, #16
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006ec8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 fbb6 	bl	8008650 <SDMMC_CmdStopTransfer>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f855 	bl	8006fb8 <HAL_SD_ErrorCallback>
}
 8006f0e:	e04a      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d045      	beq.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <HAL_SD_IRQHandler+0x262>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d011      	beq.n	8006f52 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f32:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb0 <HAL_SD_IRQHandler+0x2e4>)
 8006f34:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fb fb44 	bl	80025c8 <HAL_DMA_Abort_IT>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d02f      	beq.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 face 	bl	80074ec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f50:	e029      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <HAL_SD_IRQHandler+0x29a>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d011      	beq.n	8006f8a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6a:	4a12      	ldr	r2, [pc, #72]	@ (8006fb4 <HAL_SD_IRQHandler+0x2e8>)
 8006f6c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fb fb28 	bl	80025c8 <HAL_DMA_Abort_IT>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d013      	beq.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fae9 	bl	800755a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f88:	e00d      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f003 faba 	bl	800a518 <HAL_SD_AbortCallback>
}
 8006fa4:	e7ff      	b.n	8006fa6 <HAL_SD_IRQHandler+0x2da>
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	080074ed 	.word	0x080074ed
 8006fb4:	0800755b 	.word	0x0800755b

08006fb8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fda:	0f9b      	lsrs	r3, r3, #30
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fe6:	0e9b      	lsrs	r3, r3, #26
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ff8:	0e1b      	lsrs	r3, r3, #24
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	b2da      	uxtb	r2, r3
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	b2da      	uxtb	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	b2da      	uxtb	r2, r3
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007022:	b2da      	uxtb	r2, r3
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800702c:	0d1b      	lsrs	r3, r3, #20
 800702e:	b29a      	uxth	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	b2da      	uxtb	r2, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800704a:	0bdb      	lsrs	r3, r3, #15
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800705c:	0b9b      	lsrs	r3, r3, #14
 800705e:	b2db      	uxtb	r3, r3
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	b2da      	uxtb	r2, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800706e:	0b5b      	lsrs	r3, r3, #13
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	b2da      	uxtb	r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007080:	0b1b      	lsrs	r3, r3, #12
 8007082:	b2db      	uxtb	r3, r3
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	b2da      	uxtb	r2, r3
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2200      	movs	r2, #0
 8007092:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007098:	2b00      	cmp	r3, #0
 800709a:	d163      	bne.n	8007164 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070a0:	009a      	lsls	r2, r3, #2
 80070a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80070a6:	4013      	ands	r3, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80070ac:	0f92      	lsrs	r2, r2, #30
 80070ae:	431a      	orrs	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b8:	0edb      	lsrs	r3, r3, #27
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ca:	0e1b      	lsrs	r3, r3, #24
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	f003 0307 	and.w	r3, r3, #7
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070dc:	0d5b      	lsrs	r3, r3, #21
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f003 0307 	and.w	r3, r3, #7
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ee:	0c9b      	lsrs	r3, r3, #18
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007100:	0bdb      	lsrs	r3, r3, #15
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	b2da      	uxtb	r2, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	7e1b      	ldrb	r3, [r3, #24]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	3302      	adds	r3, #2
 8007124:	2201      	movs	r2, #1
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800712e:	fb03 f202 	mul.w	r2, r3, r2
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	7a1b      	ldrb	r3, [r3, #8]
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	2201      	movs	r2, #1
 8007142:	409a      	lsls	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007150:	0a52      	lsrs	r2, r2, #9
 8007152:	fb03 f202 	mul.w	r2, r3, r2
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007160:	661a      	str	r2, [r3, #96]	@ 0x60
 8007162:	e031      	b.n	80071c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007168:	2b01      	cmp	r3, #1
 800716a:	d11d      	bne.n	80071a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	431a      	orrs	r2, r3
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	3301      	adds	r3, #1
 8007188:	029a      	lsls	r2, r3, #10
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800719c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80071a6:	e00f      	b.n	80071c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a58      	ldr	r2, [pc, #352]	@ (8007310 <HAL_SD_GetCardCSD+0x344>)
 80071ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e09d      	b.n	8007304 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071cc:	0b9b      	lsrs	r3, r3, #14
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071de:	09db      	lsrs	r3, r3, #7
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007200:	0fdb      	lsrs	r3, r3, #31
 8007202:	b2da      	uxtb	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800720c:	0f5b      	lsrs	r3, r3, #29
 800720e:	b2db      	uxtb	r3, r3
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	b2da      	uxtb	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721e:	0e9b      	lsrs	r3, r3, #26
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	b2da      	uxtb	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007230:	0d9b      	lsrs	r3, r3, #22
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 030f 	and.w	r3, r3, #15
 8007238:	b2da      	uxtb	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007242:	0d5b      	lsrs	r3, r3, #21
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	b2da      	uxtb	r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725e:	0c1b      	lsrs	r3, r3, #16
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	b2da      	uxtb	r2, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007272:	0bdb      	lsrs	r3, r3, #15
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	b2da      	uxtb	r2, r3
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007286:	0b9b      	lsrs	r3, r3, #14
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	b2da      	uxtb	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729a:	0b5b      	lsrs	r3, r3, #13
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ae:	0b1b      	lsrs	r3, r3, #12
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c2:	0a9b      	lsrs	r3, r3, #10
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	0a1b      	lsrs	r3, r3, #8
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	004005ff 	.word	0x004005ff

08007314 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007378:	f107 030c 	add.w	r3, r7, #12
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa7e 	bl	8007880 <SD_SendStatus>
 8007384:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	0a5b      	lsrs	r3, r3, #9
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80073a2:	693b      	ldr	r3, [r7, #16]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073c8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e8:	2b82      	cmp	r3, #130	@ 0x82
 80073ea:	d111      	bne.n	8007410 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 f92d 	bl	8008650 <SDMMC_CmdStopTransfer>
 80073f6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	431a      	orrs	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fdd4 	bl	8006fb8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0208 	bic.w	r2, r2, #8
 800741e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007428:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f003 f881 	bl	800a540 <HAL_SD_RxCpltCallback>
#endif
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007454:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7fb fa62 	bl	8002920 <HAL_DMA_GetError>
 800745c:	4603      	mov	r3, r0
 800745e:	2b02      	cmp	r3, #2
 8007460:	d03e      	beq.n	80074e0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007468:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007470:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d002      	beq.n	800747e <SD_DMAError+0x36>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d12d      	bne.n	80074da <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a19      	ldr	r2, [pc, #100]	@ (80074e8 <SD_DMAError+0xa0>)
 8007484:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007494:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80074a2:	6978      	ldr	r0, [r7, #20]
 80074a4:	f7ff ff62 	bl	800736c <HAL_SD_GetCardState>
 80074a8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b06      	cmp	r3, #6
 80074ae:	d002      	beq.n	80074b6 <SD_DMAError+0x6e>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d10a      	bne.n	80074cc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 f8c8 	bl	8008650 <SDMMC_CmdStopTransfer>
 80074c0:	4602      	mov	r2, r0
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	431a      	orrs	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80074da:	6978      	ldr	r0, [r7, #20]
 80074dc:	f7ff fd6c 	bl	8006fb8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80074e0:	bf00      	nop
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	004005ff 	.word	0x004005ff

080074ec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007502:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f7ff ff31 	bl	800736c <HAL_SD_GetCardState>
 800750a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d002      	beq.n	8007526 <SD_DMATxAbort+0x3a>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b05      	cmp	r3, #5
 8007524:	d10a      	bne.n	800753c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f001 f890 	bl	8008650 <SDMMC_CmdStopTransfer>
 8007530:	4602      	mov	r2, r0
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	431a      	orrs	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f002 ffe7 	bl	800a518 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800754a:	e002      	b.n	8007552 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff fd33 	bl	8006fb8 <HAL_SD_ErrorCallback>
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007566:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007570:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f7ff fefa 	bl	800736c <HAL_SD_GetCardState>
 8007578:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b06      	cmp	r3, #6
 800758c:	d002      	beq.n	8007594 <SD_DMARxAbort+0x3a>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b05      	cmp	r3, #5
 8007592:	d10a      	bne.n	80075aa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f001 f859 	bl	8008650 <SDMMC_CmdStopTransfer>
 800759e:	4602      	mov	r2, r0
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a4:	431a      	orrs	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d103      	bne.n	80075ba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f002 ffb0 	bl	800a518 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80075b8:	e002      	b.n	80075c0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7ff fcfc 	bl	8006fb8 <HAL_SD_ErrorCallback>
}
 80075c0:	bf00      	nop
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80075c8:	b5b0      	push	{r4, r5, r7, lr}
 80075ca:	b094      	sub	sp, #80	@ 0x50
 80075cc:	af04      	add	r7, sp, #16
 80075ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80075d0:	2301      	movs	r3, #1
 80075d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 ff0a 	bl	80083f2 <SDIO_GetPowerState>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075e4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80075e8:	e0b8      	b.n	800775c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d02f      	beq.n	8007652 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 f8f1 	bl	80087de <SDMMC_CmdSendCID>
 80075fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <SD_InitCard+0x40>
    {
      return errorstate;
 8007604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007606:	e0a9      	b.n	800775c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f000 ff34 	bl	800847c <SDIO_GetResponse>
 8007614:	4602      	mov	r2, r0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2104      	movs	r1, #4
 8007620:	4618      	mov	r0, r3
 8007622:	f000 ff2b 	bl	800847c <SDIO_GetResponse>
 8007626:	4602      	mov	r2, r0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2108      	movs	r1, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f000 ff22 	bl	800847c <SDIO_GetResponse>
 8007638:	4602      	mov	r2, r0
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	210c      	movs	r1, #12
 8007644:	4618      	mov	r0, r3
 8007646:	f000 ff19 	bl	800847c <SDIO_GetResponse>
 800764a:	4602      	mov	r2, r0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007656:	2b03      	cmp	r3, #3
 8007658:	d00d      	beq.n	8007676 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f107 020e 	add.w	r2, r7, #14
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f001 f8f7 	bl	8008858 <SDMMC_CmdSetRelAdd>
 800766a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800766c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <SD_InitCard+0xae>
    {
      return errorstate;
 8007672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007674:	e072      	b.n	800775c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	2b03      	cmp	r3, #3
 800767c:	d036      	beq.n	80076ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800767e:	89fb      	ldrh	r3, [r7, #14]
 8007680:	461a      	mov	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800768e:	041b      	lsls	r3, r3, #16
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f001 f8c1 	bl	800881a <SDMMC_CmdSendCSD>
 8007698:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800769a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80076a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a2:	e05b      	b.n	800775c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2100      	movs	r1, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fee6 	bl	800847c <SDIO_GetResponse>
 80076b0:	4602      	mov	r2, r0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2104      	movs	r1, #4
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fedd 	bl	800847c <SDIO_GetResponse>
 80076c2:	4602      	mov	r2, r0
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2108      	movs	r1, #8
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fed4 	bl	800847c <SDIO_GetResponse>
 80076d4:	4602      	mov	r2, r0
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	210c      	movs	r1, #12
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 fecb 	bl	800847c <SDIO_GetResponse>
 80076e6:	4602      	mov	r2, r0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2104      	movs	r1, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fec2 	bl	800847c <SDIO_GetResponse>
 80076f8:	4603      	mov	r3, r0
 80076fa:	0d1a      	lsrs	r2, r3, #20
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007700:	f107 0310 	add.w	r3, r7, #16
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fc60 	bl	8006fcc <HAL_SD_GetCardCSD>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007712:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007716:	e021      	b.n	800775c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6819      	ldr	r1, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007720:	041b      	lsls	r3, r3, #16
 8007722:	2200      	movs	r2, #0
 8007724:	461c      	mov	r4, r3
 8007726:	4615      	mov	r5, r2
 8007728:	4622      	mov	r2, r4
 800772a:	462b      	mov	r3, r5
 800772c:	4608      	mov	r0, r1
 800772e:	f000 ffb1 	bl	8008694 <SDMMC_CmdSelDesel>
 8007732:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <SD_InitCard+0x176>
  {
    return errorstate;
 800773a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800773c:	e00e      	b.n	800775c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681d      	ldr	r5, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	466c      	mov	r4, sp
 8007746:	f103 0210 	add.w	r2, r3, #16
 800774a:	ca07      	ldmia	r2, {r0, r1, r2}
 800774c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007750:	3304      	adds	r3, #4
 8007752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007754:	4628      	mov	r0, r5
 8007756:	f000 fdf5 	bl	8008344 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3740      	adds	r7, #64	@ 0x40
 8007760:	46bd      	mov	sp, r7
 8007762:	bdb0      	pop	{r4, r5, r7, pc}

08007764 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	2300      	movs	r3, #0
 8007776:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ffac 	bl	80086da <SDMMC_CmdGoIdleState>
 8007782:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <SD_PowerON+0x2a>
  {
    return errorstate;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	e072      	b.n	8007874 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 ffbf 	bl	8008716 <SDMMC_CmdOperCond>
 8007798:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00d      	beq.n	80077bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 ff95 	bl	80086da <SDMMC_CmdGoIdleState>
 80077b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	e05b      	b.n	8007874 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d137      	bne.n	800783a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 ffbf 	bl	8008754 <SDMMC_CmdAppCommand>
 80077d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02d      	beq.n	800783a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80077e2:	e047      	b.n	8007874 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 ffb2 	bl	8008754 <SDMMC_CmdAppCommand>
 80077f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <SD_PowerON+0x98>
    {
      return errorstate;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	e03b      	b.n	8007874 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	491e      	ldr	r1, [pc, #120]	@ (800787c <SD_PowerON+0x118>)
 8007802:	4618      	mov	r0, r3
 8007804:	f000 ffc8 	bl	8008798 <SDMMC_CmdAppOperCommand>
 8007808:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007810:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007814:	e02e      	b.n	8007874 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fe2d 	bl	800847c <SDIO_GetResponse>
 8007822:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	0fdb      	lsrs	r3, r3, #31
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <SD_PowerON+0xcc>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <SD_PowerON+0xce>
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]

    count++;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	3301      	adds	r3, #1
 8007838:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007840:	4293      	cmp	r3, r2
 8007842:	d802      	bhi.n	800784a <SD_PowerON+0xe6>
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0cc      	beq.n	80077e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007850:	4293      	cmp	r3, r2
 8007852:	d902      	bls.n	800785a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007858:	e00c      	b.n	8007874 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	645a      	str	r2, [r3, #68]	@ 0x44
 800786a:	e002      	b.n	8007872 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	c1100000 	.word	0xc1100000

08007880 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007890:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007894:	e018      	b.n	80078c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789e:	041b      	lsls	r3, r3, #16
 80078a0:	4619      	mov	r1, r3
 80078a2:	4610      	mov	r0, r2
 80078a4:	f000 fff9 	bl	800889a <SDMMC_CmdSendStatus>
 80078a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	e009      	b.n	80078c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fdde 	bl	800847c <SDIO_GetResponse>
 80078c0:	4602      	mov	r2, r0
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078dc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d03f      	beq.n	800796a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	e033      	b.n	8007958 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fd50 	bl	800839a <SDIO_ReadFIFO>
 80078fa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	3b01      	subs	r3, #1
 800790e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	b2da      	uxtb	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	701a      	strb	r2, [r3, #0]
      tmp++;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	3301      	adds	r3, #1
 800791e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	3b01      	subs	r3, #1
 8007924:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	b2da      	uxtb	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3b01      	subs	r3, #1
 800793a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	0e1b      	lsrs	r3, r3, #24
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	3b01      	subs	r3, #1
 8007950:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	3301      	adds	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2b07      	cmp	r3, #7
 800795c:	d9c8      	bls.n	80078f0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800796a:	bf00      	nop
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b086      	sub	sp, #24
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007984:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d043      	beq.n	8007a14 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e037      	b.n	8007a02 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3301      	adds	r3, #1
 800799c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	021a      	lsls	r2, r3, #8
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	041a      	lsls	r2, r3, #16
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3301      	adds	r3, #1
 80079cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	061a      	lsls	r2, r3, #24
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f107 0208 	add.w	r2, r7, #8
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fcdc 	bl	80083b4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	3301      	adds	r3, #1
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b07      	cmp	r3, #7
 8007a06:	d9c4      	bls.n	8007992 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8007a14:	bf00      	nop
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e07b      	b.n	8007b26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d108      	bne.n	8007a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a3e:	d009      	beq.n	8007a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	61da      	str	r2, [r3, #28]
 8007a46:	e005      	b.n	8007a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fa f8e4 	bl	8001c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ad8:	ea42 0103 	orr.w	r1, r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	f003 0104 	and.w	r1, r3, #4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afa:	f003 0210 	and.w	r2, r3, #16
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e042      	b.n	8007bc6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fa f9e3 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2224      	movs	r2, #36	@ 0x24
 8007b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f972 	bl	8007e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695a      	ldr	r2, [r3, #20]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b96:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ba6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b08a      	sub	sp, #40	@ 0x28
 8007bd2:	af02      	add	r7, sp, #8
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	603b      	str	r3, [r7, #0]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d175      	bne.n	8007cda <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_UART_Transmit+0x2c>
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e06e      	b.n	8007cdc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2221      	movs	r2, #33	@ 0x21
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c0c:	f7fa fa94 	bl	8002138 <HAL_GetTick>
 8007c10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	88fa      	ldrh	r2, [r7, #6]
 8007c16:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	88fa      	ldrh	r2, [r7, #6]
 8007c1c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c26:	d108      	bne.n	8007c3a <HAL_UART_Transmit+0x6c>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d104      	bne.n	8007c3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	61bb      	str	r3, [r7, #24]
 8007c38:	e003      	b.n	8007c42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c42:	e02e      	b.n	8007ca2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2180      	movs	r1, #128	@ 0x80
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f848 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e03a      	b.n	8007cdc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10b      	bne.n	8007c84 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	3302      	adds	r3, #2
 8007c80:	61bb      	str	r3, [r7, #24]
 8007c82:	e007      	b.n	8007c94 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3301      	adds	r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1cb      	bne.n	8007c44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2140      	movs	r1, #64	@ 0x40
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f814 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e006      	b.n	8007cdc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e000      	b.n	8007cdc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf4:	e03b      	b.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d037      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cfe:	f7fa fa1b 	bl	8002138 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	6a3a      	ldr	r2, [r7, #32]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d0e:	6a3b      	ldr	r3, [r7, #32]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e03a      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d023      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b80      	cmp	r3, #128	@ 0x80
 8007d2a:	d020      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b40      	cmp	r3, #64	@ 0x40
 8007d30:	d01d      	beq.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d116      	bne.n	8007d6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f81d 	bl	8007d96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2208      	movs	r2, #8
 8007d60:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e00f      	b.n	8007d8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4013      	ands	r3, r2
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	bf0c      	ite	eq
 8007d7e:	2301      	moveq	r3, #1
 8007d80:	2300      	movne	r3, #0
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d0b4      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b095      	sub	sp, #84	@ 0x54
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	330c      	adds	r3, #12
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dbe:	643a      	str	r2, [r7, #64]	@ 0x40
 8007dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3314      	adds	r3, #20
 8007dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3314      	adds	r3, #20
 8007df0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e5      	bne.n	8007dd2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d119      	bne.n	8007e42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	330c      	adds	r3, #12
 8007e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f023 0310 	bic.w	r3, r3, #16
 8007e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e2e:	61ba      	str	r2, [r7, #24]
 8007e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e32:	6979      	ldr	r1, [r7, #20]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e5      	bne.n	8007e0e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2220      	movs	r2, #32
 8007e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e50:	bf00      	nop
 8007e52:	3754      	adds	r7, #84	@ 0x54
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e60:	b0c0      	sub	sp, #256	@ 0x100
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e78:	68d9      	ldr	r1, [r3, #12]
 8007e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	ea40 0301 	orr.w	r3, r0, r1
 8007e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007eb4:	f021 010c 	bic.w	r1, r1, #12
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed6:	6999      	ldr	r1, [r3, #24]
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	ea40 0301 	orr.w	r3, r0, r1
 8007ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b8f      	ldr	r3, [pc, #572]	@ (8008128 <UART_SetConfig+0x2cc>)
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d005      	beq.n	8007efc <UART_SetConfig+0xa0>
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800812c <UART_SetConfig+0x2d0>)
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d104      	bne.n	8007f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007efc:	f7fd fc68 	bl	80057d0 <HAL_RCC_GetPCLK2Freq>
 8007f00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f04:	e003      	b.n	8007f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f06:	f7fd fc4f 	bl	80057a8 <HAL_RCC_GetPCLK1Freq>
 8007f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f18:	f040 810c 	bne.w	8008134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f20:	2200      	movs	r2, #0
 8007f22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f2e:	4622      	mov	r2, r4
 8007f30:	462b      	mov	r3, r5
 8007f32:	1891      	adds	r1, r2, r2
 8007f34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f36:	415b      	adcs	r3, r3
 8007f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f3e:	4621      	mov	r1, r4
 8007f40:	eb12 0801 	adds.w	r8, r2, r1
 8007f44:	4629      	mov	r1, r5
 8007f46:	eb43 0901 	adc.w	r9, r3, r1
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f5e:	4690      	mov	r8, r2
 8007f60:	4699      	mov	r9, r3
 8007f62:	4623      	mov	r3, r4
 8007f64:	eb18 0303 	adds.w	r3, r8, r3
 8007f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	eb49 0303 	adc.w	r3, r9, r3
 8007f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	18db      	adds	r3, r3, r3
 8007f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f90:	4613      	mov	r3, r2
 8007f92:	eb42 0303 	adc.w	r3, r2, r3
 8007f96:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007fa0:	f7f8 f9de 	bl	8000360 <__aeabi_uldivmod>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4b61      	ldr	r3, [pc, #388]	@ (8008130 <UART_SetConfig+0x2d4>)
 8007faa:	fba3 2302 	umull	r2, r3, r3, r2
 8007fae:	095b      	lsrs	r3, r3, #5
 8007fb0:	011c      	lsls	r4, r3, #4
 8007fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fc4:	4642      	mov	r2, r8
 8007fc6:	464b      	mov	r3, r9
 8007fc8:	1891      	adds	r1, r2, r2
 8007fca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007fcc:	415b      	adcs	r3, r3
 8007fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007fd4:	4641      	mov	r1, r8
 8007fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8007fda:	4649      	mov	r1, r9
 8007fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ff4:	4692      	mov	sl, r2
 8007ff6:	469b      	mov	fp, r3
 8007ff8:	4643      	mov	r3, r8
 8007ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8007ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008002:	464b      	mov	r3, r9
 8008004:	eb4b 0303 	adc.w	r3, fp, r3
 8008008:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008018:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800801c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008020:	460b      	mov	r3, r1
 8008022:	18db      	adds	r3, r3, r3
 8008024:	643b      	str	r3, [r7, #64]	@ 0x40
 8008026:	4613      	mov	r3, r2
 8008028:	eb42 0303 	adc.w	r3, r2, r3
 800802c:	647b      	str	r3, [r7, #68]	@ 0x44
 800802e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008036:	f7f8 f993 	bl	8000360 <__aeabi_uldivmod>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4611      	mov	r1, r2
 8008040:	4b3b      	ldr	r3, [pc, #236]	@ (8008130 <UART_SetConfig+0x2d4>)
 8008042:	fba3 2301 	umull	r2, r3, r3, r1
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	2264      	movs	r2, #100	@ 0x64
 800804a:	fb02 f303 	mul.w	r3, r2, r3
 800804e:	1acb      	subs	r3, r1, r3
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008056:	4b36      	ldr	r3, [pc, #216]	@ (8008130 <UART_SetConfig+0x2d4>)
 8008058:	fba3 2302 	umull	r2, r3, r3, r2
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008064:	441c      	add	r4, r3
 8008066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800806a:	2200      	movs	r2, #0
 800806c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008070:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008078:	4642      	mov	r2, r8
 800807a:	464b      	mov	r3, r9
 800807c:	1891      	adds	r1, r2, r2
 800807e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008080:	415b      	adcs	r3, r3
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008088:	4641      	mov	r1, r8
 800808a:	1851      	adds	r1, r2, r1
 800808c:	6339      	str	r1, [r7, #48]	@ 0x30
 800808e:	4649      	mov	r1, r9
 8008090:	414b      	adcs	r3, r1
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80080a0:	4659      	mov	r1, fp
 80080a2:	00cb      	lsls	r3, r1, #3
 80080a4:	4651      	mov	r1, sl
 80080a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080aa:	4651      	mov	r1, sl
 80080ac:	00ca      	lsls	r2, r1, #3
 80080ae:	4610      	mov	r0, r2
 80080b0:	4619      	mov	r1, r3
 80080b2:	4603      	mov	r3, r0
 80080b4:	4642      	mov	r2, r8
 80080b6:	189b      	adds	r3, r3, r2
 80080b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080bc:	464b      	mov	r3, r9
 80080be:	460a      	mov	r2, r1
 80080c0:	eb42 0303 	adc.w	r3, r2, r3
 80080c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80080d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080dc:	460b      	mov	r3, r1
 80080de:	18db      	adds	r3, r3, r3
 80080e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080e2:	4613      	mov	r3, r2
 80080e4:	eb42 0303 	adc.w	r3, r2, r3
 80080e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80080ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80080f2:	f7f8 f935 	bl	8000360 <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008130 <UART_SetConfig+0x2d4>)
 80080fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	2164      	movs	r1, #100	@ 0x64
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	3332      	adds	r3, #50	@ 0x32
 800810e:	4a08      	ldr	r2, [pc, #32]	@ (8008130 <UART_SetConfig+0x2d4>)
 8008110:	fba2 2303 	umull	r2, r3, r2, r3
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	f003 0207 	and.w	r2, r3, #7
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4422      	add	r2, r4
 8008122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008124:	e106      	b.n	8008334 <UART_SetConfig+0x4d8>
 8008126:	bf00      	nop
 8008128:	40011000 	.word	0x40011000
 800812c:	40011400 	.word	0x40011400
 8008130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008138:	2200      	movs	r2, #0
 800813a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800813e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008146:	4642      	mov	r2, r8
 8008148:	464b      	mov	r3, r9
 800814a:	1891      	adds	r1, r2, r2
 800814c:	6239      	str	r1, [r7, #32]
 800814e:	415b      	adcs	r3, r3
 8008150:	627b      	str	r3, [r7, #36]	@ 0x24
 8008152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008156:	4641      	mov	r1, r8
 8008158:	1854      	adds	r4, r2, r1
 800815a:	4649      	mov	r1, r9
 800815c:	eb43 0501 	adc.w	r5, r3, r1
 8008160:	f04f 0200 	mov.w	r2, #0
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	00eb      	lsls	r3, r5, #3
 800816a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800816e:	00e2      	lsls	r2, r4, #3
 8008170:	4614      	mov	r4, r2
 8008172:	461d      	mov	r5, r3
 8008174:	4643      	mov	r3, r8
 8008176:	18e3      	adds	r3, r4, r3
 8008178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800817c:	464b      	mov	r3, r9
 800817e:	eb45 0303 	adc.w	r3, r5, r3
 8008182:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008192:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008196:	f04f 0200 	mov.w	r2, #0
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081a2:	4629      	mov	r1, r5
 80081a4:	008b      	lsls	r3, r1, #2
 80081a6:	4621      	mov	r1, r4
 80081a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081ac:	4621      	mov	r1, r4
 80081ae:	008a      	lsls	r2, r1, #2
 80081b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081b4:	f7f8 f8d4 	bl	8000360 <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4b60      	ldr	r3, [pc, #384]	@ (8008340 <UART_SetConfig+0x4e4>)
 80081be:	fba3 2302 	umull	r2, r3, r3, r2
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	011c      	lsls	r4, r3, #4
 80081c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	1891      	adds	r1, r2, r2
 80081de:	61b9      	str	r1, [r7, #24]
 80081e0:	415b      	adcs	r3, r3
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081e8:	4641      	mov	r1, r8
 80081ea:	1851      	adds	r1, r2, r1
 80081ec:	6139      	str	r1, [r7, #16]
 80081ee:	4649      	mov	r1, r9
 80081f0:	414b      	adcs	r3, r1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008200:	4659      	mov	r1, fp
 8008202:	00cb      	lsls	r3, r1, #3
 8008204:	4651      	mov	r1, sl
 8008206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800820a:	4651      	mov	r1, sl
 800820c:	00ca      	lsls	r2, r1, #3
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	4603      	mov	r3, r0
 8008214:	4642      	mov	r2, r8
 8008216:	189b      	adds	r3, r3, r2
 8008218:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800821c:	464b      	mov	r3, r9
 800821e:	460a      	mov	r2, r1
 8008220:	eb42 0303 	adc.w	r3, r2, r3
 8008224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008232:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008240:	4649      	mov	r1, r9
 8008242:	008b      	lsls	r3, r1, #2
 8008244:	4641      	mov	r1, r8
 8008246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800824a:	4641      	mov	r1, r8
 800824c:	008a      	lsls	r2, r1, #2
 800824e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008252:	f7f8 f885 	bl	8000360 <__aeabi_uldivmod>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	4611      	mov	r1, r2
 800825c:	4b38      	ldr	r3, [pc, #224]	@ (8008340 <UART_SetConfig+0x4e4>)
 800825e:	fba3 2301 	umull	r2, r3, r3, r1
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	2264      	movs	r2, #100	@ 0x64
 8008266:	fb02 f303 	mul.w	r3, r2, r3
 800826a:	1acb      	subs	r3, r1, r3
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	3332      	adds	r3, #50	@ 0x32
 8008270:	4a33      	ldr	r2, [pc, #204]	@ (8008340 <UART_SetConfig+0x4e4>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800827c:	441c      	add	r4, r3
 800827e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008282:	2200      	movs	r2, #0
 8008284:	673b      	str	r3, [r7, #112]	@ 0x70
 8008286:	677a      	str	r2, [r7, #116]	@ 0x74
 8008288:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800828c:	4642      	mov	r2, r8
 800828e:	464b      	mov	r3, r9
 8008290:	1891      	adds	r1, r2, r2
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	415b      	adcs	r3, r3
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800829c:	4641      	mov	r1, r8
 800829e:	1851      	adds	r1, r2, r1
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	4649      	mov	r1, r9
 80082a4:	414b      	adcs	r3, r1
 80082a6:	607b      	str	r3, [r7, #4]
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082b4:	4659      	mov	r1, fp
 80082b6:	00cb      	lsls	r3, r1, #3
 80082b8:	4651      	mov	r1, sl
 80082ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082be:	4651      	mov	r1, sl
 80082c0:	00ca      	lsls	r2, r1, #3
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	4642      	mov	r2, r8
 80082ca:	189b      	adds	r3, r3, r2
 80082cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082ce:	464b      	mov	r3, r9
 80082d0:	460a      	mov	r2, r1
 80082d2:	eb42 0303 	adc.w	r3, r2, r3
 80082d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80082e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80082f0:	4649      	mov	r1, r9
 80082f2:	008b      	lsls	r3, r1, #2
 80082f4:	4641      	mov	r1, r8
 80082f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082fa:	4641      	mov	r1, r8
 80082fc:	008a      	lsls	r2, r1, #2
 80082fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008302:	f7f8 f82d 	bl	8000360 <__aeabi_uldivmod>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4b0d      	ldr	r3, [pc, #52]	@ (8008340 <UART_SetConfig+0x4e4>)
 800830c:	fba3 1302 	umull	r1, r3, r3, r2
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	2164      	movs	r1, #100	@ 0x64
 8008314:	fb01 f303 	mul.w	r3, r1, r3
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	3332      	adds	r3, #50	@ 0x32
 800831e:	4a08      	ldr	r2, [pc, #32]	@ (8008340 <UART_SetConfig+0x4e4>)
 8008320:	fba2 2303 	umull	r2, r3, r2, r3
 8008324:	095b      	lsrs	r3, r3, #5
 8008326:	f003 020f 	and.w	r2, r3, #15
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4422      	add	r2, r4
 8008332:	609a      	str	r2, [r3, #8]
}
 8008334:	bf00      	nop
 8008336:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800833a:	46bd      	mov	sp, r7
 800833c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008340:	51eb851f 	.word	0x51eb851f

08008344 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008344:	b084      	sub	sp, #16
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	f107 001c 	add.w	r0, r7, #28
 8008352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800835a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800835c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800835e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008362:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008366:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800836a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800836e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800837e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	b004      	add	sp, #16
 8008398:	4770      	bx	lr

0800839a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2203      	movs	r2, #3
 80083e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0303 	and.w	r3, r3, #3
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800842c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008432:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008438:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008448:	f023 030f 	bic.w	r3, r3, #15
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	b2db      	uxtb	r3, r3
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3314      	adds	r3, #20
 800848a:	461a      	mov	r2, r3
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	4413      	add	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
}  
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80084c8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80084ce:	431a      	orrs	r2, r3
                       Data->DPSM);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80084d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0

}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b088      	sub	sp, #32
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008508:	2310      	movs	r3, #16
 800850a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800850c:	2340      	movs	r3, #64	@ 0x40
 800850e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800851a:	f107 0308 	add.w	r3, r7, #8
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff ff74 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800852a:	2110      	movs	r1, #16
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f9d7 	bl	80088e0 <SDMMC_GetCmdResp1>
 8008532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008534:	69fb      	ldr	r3, [r7, #28]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3720      	adds	r7, #32
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b088      	sub	sp, #32
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800854c:	2311      	movs	r3, #17
 800854e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008550:	2340      	movs	r3, #64	@ 0x40
 8008552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008554:	2300      	movs	r3, #0
 8008556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800855c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800855e:	f107 0308 	add.w	r3, r7, #8
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff ff52 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800856a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800856e:	2111      	movs	r1, #17
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f9b5 	bl	80088e0 <SDMMC_GetCmdResp1>
 8008576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008578:	69fb      	ldr	r3, [r7, #28]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b088      	sub	sp, #32
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008590:	2312      	movs	r3, #18
 8008592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008594:	2340      	movs	r3, #64	@ 0x40
 8008596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800859c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff ff30 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80085ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085b2:	2112      	movs	r1, #18
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f993 	bl	80088e0 <SDMMC_GetCmdResp1>
 80085ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085bc:	69fb      	ldr	r3, [r7, #28]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b088      	sub	sp, #32
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80085d4:	2318      	movs	r3, #24
 80085d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085d8:	2340      	movs	r3, #64	@ 0x40
 80085da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085e6:	f107 0308 	add.w	r3, r7, #8
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff ff0e 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80085f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085f6:	2118      	movs	r1, #24
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f971 	bl	80088e0 <SDMMC_GetCmdResp1>
 80085fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008600:	69fb      	ldr	r3, [r7, #28]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3720      	adds	r7, #32
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b088      	sub	sp, #32
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008618:	2319      	movs	r3, #25
 800861a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800861c:	2340      	movs	r3, #64	@ 0x40
 800861e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008620:	2300      	movs	r3, #0
 8008622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff feec 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800863a:	2119      	movs	r1, #25
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f94f 	bl	80088e0 <SDMMC_GetCmdResp1>
 8008642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008644:	69fb      	ldr	r3, [r7, #28]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3720      	adds	r7, #32
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800865c:	230c      	movs	r3, #12
 800865e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008660:	2340      	movs	r3, #64	@ 0x40
 8008662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800866c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800866e:	f107 0308 	add.w	r3, r7, #8
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff feca 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800867a:	4a05      	ldr	r2, [pc, #20]	@ (8008690 <SDMMC_CmdStopTransfer+0x40>)
 800867c:	210c      	movs	r1, #12
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f92e 	bl	80088e0 <SDMMC_GetCmdResp1>
 8008684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008686:	69fb      	ldr	r3, [r7, #28]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3720      	adds	r7, #32
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	05f5e100 	.word	0x05f5e100

08008694 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08a      	sub	sp, #40	@ 0x28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80086a4:	2307      	movs	r3, #7
 80086a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086a8:	2340      	movs	r3, #64	@ 0x40
 80086aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086b6:	f107 0310 	add.w	r3, r7, #16
 80086ba:	4619      	mov	r1, r3
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fea6 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80086c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086c6:	2107      	movs	r1, #7
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f909 	bl	80088e0 <SDMMC_GetCmdResp1>
 80086ce:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3728      	adds	r7, #40	@ 0x28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b088      	sub	sp, #32
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80086ea:	2300      	movs	r3, #0
 80086ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80086f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086f8:	f107 0308 	add.w	r3, r7, #8
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fe85 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fb23 	bl	8008d50 <SDMMC_GetCmdError>
 800870a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800870c:	69fb      	ldr	r3, [r7, #28]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b088      	sub	sp, #32
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800871e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008724:	2308      	movs	r3, #8
 8008726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008728:	2340      	movs	r3, #64	@ 0x40
 800872a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008730:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008734:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008736:	f107 0308 	add.w	r3, r7, #8
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff fe66 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fab6 	bl	8008cb4 <SDMMC_GetCmdResp7>
 8008748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800874a:	69fb      	ldr	r3, [r7, #28]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3720      	adds	r7, #32
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008762:	2337      	movs	r3, #55	@ 0x37
 8008764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008766:	2340      	movs	r3, #64	@ 0x40
 8008768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800876e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008772:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008774:	f107 0308 	add.w	r3, r7, #8
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff fe47 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008784:	2137      	movs	r1, #55	@ 0x37
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f8aa 	bl	80088e0 <SDMMC_GetCmdResp1>
 800878c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800878e:	69fb      	ldr	r3, [r7, #28]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3720      	adds	r7, #32
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80087ae:	2329      	movs	r3, #41	@ 0x29
 80087b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087b2:	2340      	movs	r3, #64	@ 0x40
 80087b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fe21 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f9bd 	bl	8008b4c <SDMMC_GetCmdResp3>
 80087d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087d4:	69fb      	ldr	r3, [r7, #28]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b088      	sub	sp, #32
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80087ea:	2302      	movs	r3, #2
 80087ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80087ee:	23c0      	movs	r3, #192	@ 0xc0
 80087f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087fc:	f107 0308 	add.w	r3, r7, #8
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff fe03 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f957 	bl	8008abc <SDMMC_GetCmdResp2>
 800880e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008810:	69fb      	ldr	r3, [r7, #28]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b088      	sub	sp, #32
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008828:	2309      	movs	r3, #9
 800882a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800882c:	23c0      	movs	r3, #192	@ 0xc0
 800882e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800883a:	f107 0308 	add.w	r3, r7, #8
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7ff fde4 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f938 	bl	8008abc <SDMMC_GetCmdResp2>
 800884c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800884e:	69fb      	ldr	r3, [r7, #28]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3720      	adds	r7, #32
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008866:	2303      	movs	r3, #3
 8008868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800886a:	2340      	movs	r3, #64	@ 0x40
 800886c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800886e:	2300      	movs	r3, #0
 8008870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008876:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008878:	f107 0308 	add.w	r3, r7, #8
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff fdc5 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	2103      	movs	r1, #3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f99d 	bl	8008bc8 <SDMMC_GetCmdResp6>
 800888e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008890:	69fb      	ldr	r3, [r7, #28]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b088      	sub	sp, #32
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80088a8:	230d      	movs	r3, #13
 80088aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088ac:	2340      	movs	r3, #64	@ 0x40
 80088ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088b0:	2300      	movs	r3, #0
 80088b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088ba:	f107 0308 	add.w	r3, r7, #8
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff fda4 	bl	800840e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80088c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088ca:	210d      	movs	r1, #13
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f807 	bl	80088e0 <SDMMC_GetCmdResp1>
 80088d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088d4:	69fb      	ldr	r3, [r7, #28]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	460b      	mov	r3, r1
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80088ee:	4b70      	ldr	r3, [pc, #448]	@ (8008ab0 <SDMMC_GetCmdResp1+0x1d0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a70      	ldr	r2, [pc, #448]	@ (8008ab4 <SDMMC_GetCmdResp1+0x1d4>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	0a5a      	lsrs	r2, r3, #9
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	fb02 f303 	mul.w	r3, r2, r3
 8008900:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	1e5a      	subs	r2, r3, #1
 8008906:	61fa      	str	r2, [r7, #28]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d102      	bne.n	8008912 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800890c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008910:	e0c9      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008916:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0ef      	beq.n	8008902 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1ea      	bne.n	8008902 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2204      	movs	r2, #4
 800893c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800893e:	2304      	movs	r3, #4
 8008940:	e0b1      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2201      	movs	r2, #1
 8008952:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008954:	2301      	movs	r3, #1
 8008956:	e0a6      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	22c5      	movs	r2, #197	@ 0xc5
 800895c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff fd7f 	bl	8008462 <SDIO_GetCommandResponse>
 8008964:	4603      	mov	r3, r0
 8008966:	461a      	mov	r2, r3
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	4293      	cmp	r3, r2
 800896c:	d001      	beq.n	8008972 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800896e:	2301      	movs	r3, #1
 8008970:	e099      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008972:	2100      	movs	r1, #0
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7ff fd81 	bl	800847c <SDIO_GetResponse>
 800897a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	4b4e      	ldr	r3, [pc, #312]	@ (8008ab8 <SDMMC_GetCmdResp1+0x1d8>)
 8008980:	4013      	ands	r3, r2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008986:	2300      	movs	r3, #0
 8008988:	e08d      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	da02      	bge.n	8008996 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008990:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008994:	e087      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80089a0:	2340      	movs	r3, #64	@ 0x40
 80089a2:	e080      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80089ae:	2380      	movs	r3, #128	@ 0x80
 80089b0:	e079      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80089bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80089c0:	e071      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80089cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089d0:	e069      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80089dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089e0:	e061      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089f0:	e059      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a00:	e051      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008a10:	e049      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008a20:	e041      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a30:	e039      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008a3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008a40:	e031      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008a50:	e029      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a60:	e021      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d002      	beq.n	8008a72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008a70:	e019      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008a80:	e011      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008a90:	e009      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008aa0:	e001      	b.n	8008aa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008aa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3720      	adds	r7, #32
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000000 	.word	0x20000000
 8008ab4:	10624dd3 	.word	0x10624dd3
 8008ab8:	fdffe008 	.word	0xfdffe008

08008abc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b44 <SDMMC_GetCmdResp2+0x88>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b48 <SDMMC_GetCmdResp2+0x8c>)
 8008aca:	fba2 2303 	umull	r2, r3, r2, r3
 8008ace:	0a5b      	lsrs	r3, r3, #9
 8008ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ad4:	fb02 f303 	mul.w	r3, r2, r3
 8008ad8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	1e5a      	subs	r2, r3, #1
 8008ade:	60fa      	str	r2, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ae4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ae8:	e026      	b.n	8008b38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0ef      	beq.n	8008ada <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1ea      	bne.n	8008ada <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d004      	beq.n	8008b1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2204      	movs	r2, #4
 8008b14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b16:	2304      	movs	r3, #4
 8008b18:	e00e      	b.n	8008b38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e003      	b.n	8008b38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	22c5      	movs	r2, #197	@ 0xc5
 8008b34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	20000000 	.word	0x20000000
 8008b48:	10624dd3 	.word	0x10624dd3

08008b4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b54:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc0 <SDMMC_GetCmdResp3+0x74>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a1a      	ldr	r2, [pc, #104]	@ (8008bc4 <SDMMC_GetCmdResp3+0x78>)
 8008b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5e:	0a5b      	lsrs	r3, r3, #9
 8008b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b64:	fb02 f303 	mul.w	r3, r2, r3
 8008b68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	1e5a      	subs	r2, r3, #1
 8008b6e:	60fa      	str	r2, [r7, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d102      	bne.n	8008b7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b78:	e01b      	b.n	8008bb2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0ef      	beq.n	8008b6a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1ea      	bne.n	8008b6a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	e003      	b.n	8008bb2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	22c5      	movs	r2, #197	@ 0xc5
 8008bae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20000000 	.word	0x20000000
 8008bc4:	10624dd3 	.word	0x10624dd3

08008bc8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008bd6:	4b35      	ldr	r3, [pc, #212]	@ (8008cac <SDMMC_GetCmdResp6+0xe4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a35      	ldr	r2, [pc, #212]	@ (8008cb0 <SDMMC_GetCmdResp6+0xe8>)
 8008bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008be0:	0a5b      	lsrs	r3, r3, #9
 8008be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008be6:	fb02 f303 	mul.w	r3, r2, r3
 8008bea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	61fa      	str	r2, [r7, #28]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d102      	bne.n	8008bfc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bf6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008bfa:	e052      	b.n	8008ca2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0ef      	beq.n	8008bec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1ea      	bne.n	8008bec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2204      	movs	r2, #4
 8008c26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c28:	2304      	movs	r3, #4
 8008c2a:	e03a      	b.n	8008ca2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e02f      	b.n	8008ca2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff fc0d 	bl	8008462 <SDIO_GetCommandResponse>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	7afb      	ldrb	r3, [r7, #11]
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d001      	beq.n	8008c56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e025      	b.n	8008ca2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	22c5      	movs	r2, #197	@ 0xc5
 8008c5a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff fc0c 	bl	800847c <SDIO_GetResponse>
 8008c64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	0c1b      	lsrs	r3, r3, #16
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e011      	b.n	8008ca2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008c8c:	e009      	b.n	8008ca2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c9c:	e001      	b.n	8008ca2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3720      	adds	r7, #32
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000000 	.word	0x20000000
 8008cb0:	10624dd3 	.word	0x10624dd3

08008cb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cbc:	4b22      	ldr	r3, [pc, #136]	@ (8008d48 <SDMMC_GetCmdResp7+0x94>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a22      	ldr	r2, [pc, #136]	@ (8008d4c <SDMMC_GetCmdResp7+0x98>)
 8008cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc6:	0a5b      	lsrs	r3, r3, #9
 8008cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ccc:	fb02 f303 	mul.w	r3, r2, r3
 8008cd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1e5a      	subs	r2, r3, #1
 8008cd6:	60fa      	str	r2, [r7, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ce0:	e02c      	b.n	8008d3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0ef      	beq.n	8008cd2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1ea      	bne.n	8008cd2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2204      	movs	r2, #4
 8008d0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d0e:	2304      	movs	r3, #4
 8008d10:	e014      	b.n	8008d3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e009      	b.n	8008d3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2240      	movs	r2, #64	@ 0x40
 8008d38:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d3a:	2300      	movs	r3, #0
  
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20000000 	.word	0x20000000
 8008d4c:	10624dd3 	.word	0x10624dd3

08008d50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d58:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <SDMMC_GetCmdError+0x50>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a11      	ldr	r2, [pc, #68]	@ (8008da4 <SDMMC_GetCmdError+0x54>)
 8008d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d62:	0a5b      	lsrs	r3, r3, #9
 8008d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d68:	fb02 f303 	mul.w	r3, r2, r3
 8008d6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	1e5a      	subs	r2, r3, #1
 8008d72:	60fa      	str	r2, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d7c:	e009      	b.n	8008d92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0f1      	beq.n	8008d6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	22c5      	movs	r2, #197	@ 0xc5
 8008d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	20000000 	.word	0x20000000
 8008da4:	10624dd3 	.word	0x10624dd3

08008da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008da8:	b084      	sub	sp, #16
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	f107 001c 	add.w	r0, r7, #28
 8008db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d123      	bne.n	8008e0a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008dea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d105      	bne.n	8008dfe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 fadc 	bl	800a3bc <USB_CoreReset>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
 8008e08:	e01b      	b.n	8008e42 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 fad0 	bl	800a3bc <USB_CoreReset>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e34:	e005      	b.n	8008e42 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e42:	7fbb      	ldrb	r3, [r7, #30]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d10b      	bne.n	8008e60 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f043 0206 	orr.w	r2, r3, #6
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f043 0220 	orr.w	r2, r3, #32
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e6c:	b004      	add	sp, #16
 8008e6e:	4770      	bx	lr

08008e70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008e7e:	79fb      	ldrb	r3, [r7, #7]
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d165      	bne.n	8008f50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	4a41      	ldr	r2, [pc, #260]	@ (8008f8c <USB_SetTurnaroundTime+0x11c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d906      	bls.n	8008e9a <USB_SetTurnaroundTime+0x2a>
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	4a40      	ldr	r2, [pc, #256]	@ (8008f90 <USB_SetTurnaroundTime+0x120>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d202      	bcs.n	8008e9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008e94:	230f      	movs	r3, #15
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	e062      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f90 <USB_SetTurnaroundTime+0x120>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d306      	bcc.n	8008eb0 <USB_SetTurnaroundTime+0x40>
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8008f94 <USB_SetTurnaroundTime+0x124>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d202      	bcs.n	8008eb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008eaa:	230e      	movs	r3, #14
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	e057      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4a38      	ldr	r2, [pc, #224]	@ (8008f94 <USB_SetTurnaroundTime+0x124>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d306      	bcc.n	8008ec6 <USB_SetTurnaroundTime+0x56>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	4a37      	ldr	r2, [pc, #220]	@ (8008f98 <USB_SetTurnaroundTime+0x128>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d202      	bcs.n	8008ec6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ec0:	230d      	movs	r3, #13
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	e04c      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	4a33      	ldr	r2, [pc, #204]	@ (8008f98 <USB_SetTurnaroundTime+0x128>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d306      	bcc.n	8008edc <USB_SetTurnaroundTime+0x6c>
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4a32      	ldr	r2, [pc, #200]	@ (8008f9c <USB_SetTurnaroundTime+0x12c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d802      	bhi.n	8008edc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e041      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	4a2f      	ldr	r2, [pc, #188]	@ (8008f9c <USB_SetTurnaroundTime+0x12c>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d906      	bls.n	8008ef2 <USB_SetTurnaroundTime+0x82>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8008fa0 <USB_SetTurnaroundTime+0x130>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d802      	bhi.n	8008ef2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008eec:	230b      	movs	r3, #11
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	e036      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8008fa0 <USB_SetTurnaroundTime+0x130>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d906      	bls.n	8008f08 <USB_SetTurnaroundTime+0x98>
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	4a29      	ldr	r2, [pc, #164]	@ (8008fa4 <USB_SetTurnaroundTime+0x134>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d802      	bhi.n	8008f08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f02:	230a      	movs	r3, #10
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e02b      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	4a26      	ldr	r2, [pc, #152]	@ (8008fa4 <USB_SetTurnaroundTime+0x134>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d906      	bls.n	8008f1e <USB_SetTurnaroundTime+0xae>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4a25      	ldr	r2, [pc, #148]	@ (8008fa8 <USB_SetTurnaroundTime+0x138>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d202      	bcs.n	8008f1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f18:	2309      	movs	r3, #9
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	e020      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4a21      	ldr	r2, [pc, #132]	@ (8008fa8 <USB_SetTurnaroundTime+0x138>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d306      	bcc.n	8008f34 <USB_SetTurnaroundTime+0xc4>
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	4a20      	ldr	r2, [pc, #128]	@ (8008fac <USB_SetTurnaroundTime+0x13c>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d802      	bhi.n	8008f34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f2e:	2308      	movs	r3, #8
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	e015      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	4a1d      	ldr	r2, [pc, #116]	@ (8008fac <USB_SetTurnaroundTime+0x13c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d906      	bls.n	8008f4a <USB_SetTurnaroundTime+0xda>
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb0 <USB_SetTurnaroundTime+0x140>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d202      	bcs.n	8008f4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f44:	2307      	movs	r3, #7
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e00a      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f4a:	2306      	movs	r3, #6
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e007      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f56:	2309      	movs	r3, #9
 8008f58:	617b      	str	r3, [r7, #20]
 8008f5a:	e001      	b.n	8008f60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f5c:	2309      	movs	r3, #9
 8008f5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	029b      	lsls	r3, r3, #10
 8008f74:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	371c      	adds	r7, #28
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	00d8acbf 	.word	0x00d8acbf
 8008f90:	00e4e1c0 	.word	0x00e4e1c0
 8008f94:	00f42400 	.word	0x00f42400
 8008f98:	01067380 	.word	0x01067380
 8008f9c:	011a499f 	.word	0x011a499f
 8008fa0:	01312cff 	.word	0x01312cff
 8008fa4:	014ca43f 	.word	0x014ca43f
 8008fa8:	016e3600 	.word	0x016e3600
 8008fac:	01a6ab1f 	.word	0x01a6ab1f
 8008fb0:	01e84800 	.word	0x01e84800

08008fb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f043 0201 	orr.w	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f023 0201 	bic.w	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d115      	bne.n	8009046 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009026:	200a      	movs	r0, #10
 8009028:	f7f9 f892 	bl	8002150 <HAL_Delay>
      ms += 10U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	330a      	adds	r3, #10
 8009030:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 f933 	bl	800a29e <USB_GetMode>
 8009038:	4603      	mov	r3, r0
 800903a:	2b01      	cmp	r3, #1
 800903c:	d01e      	beq.n	800907c <USB_SetCurrentMode+0x84>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2bc7      	cmp	r3, #199	@ 0xc7
 8009042:	d9f0      	bls.n	8009026 <USB_SetCurrentMode+0x2e>
 8009044:	e01a      	b.n	800907c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d115      	bne.n	8009078 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009058:	200a      	movs	r0, #10
 800905a:	f7f9 f879 	bl	8002150 <HAL_Delay>
      ms += 10U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	330a      	adds	r3, #10
 8009062:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 f91a 	bl	800a29e <USB_GetMode>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <USB_SetCurrentMode+0x84>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2bc7      	cmp	r3, #199	@ 0xc7
 8009074:	d9f0      	bls.n	8009058 <USB_SetCurrentMode+0x60>
 8009076:	e001      	b.n	800907c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e005      	b.n	8009088 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009080:	d101      	bne.n	8009086 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009090:	b084      	sub	sp, #16
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800909e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090aa:	2300      	movs	r3, #0
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	e009      	b.n	80090c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	3340      	adds	r3, #64	@ 0x40
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	3301      	adds	r3, #1
 80090c2:	613b      	str	r3, [r7, #16]
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2b0e      	cmp	r3, #14
 80090c8:	d9f2      	bls.n	80090b0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d11c      	bne.n	800910c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090e0:	f043 0302 	orr.w	r3, r3, #2
 80090e4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	e005      	b.n	8009118 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009110:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800911e:	461a      	mov	r2, r3
 8009120:	2300      	movs	r3, #0
 8009122:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009124:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009128:	2b01      	cmp	r3, #1
 800912a:	d10d      	bne.n	8009148 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800912c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009130:	2b00      	cmp	r3, #0
 8009132:	d104      	bne.n	800913e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f968 	bl	800940c <USB_SetDevSpeed>
 800913c:	e008      	b.n	8009150 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800913e:	2101      	movs	r1, #1
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f963 	bl	800940c <USB_SetDevSpeed>
 8009146:	e003      	b.n	8009150 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009148:	2103      	movs	r1, #3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f95e 	bl	800940c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009150:	2110      	movs	r1, #16
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f8fa 	bl	800934c <USB_FlushTxFifo>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f924 	bl	80093b0 <USB_FlushRxFifo>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009178:	461a      	mov	r2, r3
 800917a:	2300      	movs	r3, #0
 800917c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009184:	461a      	mov	r2, r3
 8009186:	2300      	movs	r3, #0
 8009188:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009190:	461a      	mov	r2, r3
 8009192:	2300      	movs	r3, #0
 8009194:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009196:	2300      	movs	r3, #0
 8009198:	613b      	str	r3, [r7, #16]
 800919a:	e043      	b.n	8009224 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091b2:	d118      	bne.n	80091e6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10a      	bne.n	80091d0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c6:	461a      	mov	r2, r3
 80091c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e013      	b.n	80091f8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091dc:	461a      	mov	r2, r3
 80091de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	e008      	b.n	80091f8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f2:	461a      	mov	r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009204:	461a      	mov	r2, r3
 8009206:	2300      	movs	r3, #0
 8009208:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009216:	461a      	mov	r2, r3
 8009218:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800921c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3301      	adds	r3, #1
 8009222:	613b      	str	r3, [r7, #16]
 8009224:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009228:	461a      	mov	r2, r3
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	4293      	cmp	r3, r2
 800922e:	d3b5      	bcc.n	800919c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009230:	2300      	movs	r3, #0
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e043      	b.n	80092be <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	015a      	lsls	r2, r3, #5
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800924c:	d118      	bne.n	8009280 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009260:	461a      	mov	r2, r3
 8009262:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	e013      	b.n	8009292 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009276:	461a      	mov	r2, r3
 8009278:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e008      	b.n	8009292 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	015a      	lsls	r2, r3, #5
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	4413      	add	r3, r2
 8009288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800928c:	461a      	mov	r2, r3
 800928e:	2300      	movs	r3, #0
 8009290:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800929e:	461a      	mov	r2, r3
 80092a0:	2300      	movs	r3, #0
 80092a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b0:	461a      	mov	r2, r3
 80092b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80092b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	3301      	adds	r3, #1
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80092c2:	461a      	mov	r2, r3
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d3b5      	bcc.n	8009236 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80092ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d105      	bne.n	8009300 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f043 0210 	orr.w	r2, r3, #16
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699a      	ldr	r2, [r3, #24]
 8009304:	4b10      	ldr	r3, [pc, #64]	@ (8009348 <USB_DevInit+0x2b8>)
 8009306:	4313      	orrs	r3, r2
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800930c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f043 0208 	orr.w	r2, r3, #8
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009320:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009324:	2b01      	cmp	r3, #1
 8009326:	d107      	bne.n	8009338 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009330:	f043 0304 	orr.w	r3, r3, #4
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009338:	7dfb      	ldrb	r3, [r7, #23]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009344:	b004      	add	sp, #16
 8009346:	4770      	bx	lr
 8009348:	803c3800 	.word	0x803c3800

0800934c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009366:	d901      	bls.n	800936c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e01b      	b.n	80093a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	daf2      	bge.n	800935a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	019b      	lsls	r3, r3, #6
 800937c:	f043 0220 	orr.w	r2, r3, #32
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009390:	d901      	bls.n	8009396 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e006      	b.n	80093a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0320 	and.w	r3, r3, #32
 800939e:	2b20      	cmp	r3, #32
 80093a0:	d0f0      	beq.n	8009384 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3301      	adds	r3, #1
 80093c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093c8:	d901      	bls.n	80093ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e018      	b.n	8009400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	daf2      	bge.n	80093bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2210      	movs	r2, #16
 80093de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	3301      	adds	r3, #1
 80093e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093ec:	d901      	bls.n	80093f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	e006      	b.n	8009400 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	f003 0310 	and.w	r3, r3, #16
 80093fa:	2b10      	cmp	r3, #16
 80093fc:	d0f0      	beq.n	80093e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	68f9      	ldr	r1, [r7, #12]
 8009428:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800942c:	4313      	orrs	r3, r2
 800942e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800943e:	b480      	push	{r7}
 8009440:	b087      	sub	sp, #28
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f003 0306 	and.w	r3, r3, #6
 8009456:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d102      	bne.n	8009464 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
 8009462:	e00a      	b.n	800947a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d002      	beq.n	8009470 <USB_GetDevSpeed+0x32>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b06      	cmp	r3, #6
 800946e:	d102      	bne.n	8009476 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009470:	2302      	movs	r3, #2
 8009472:	75fb      	strb	r3, [r7, #23]
 8009474:	e001      	b.n	800947a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009476:	230f      	movs	r3, #15
 8009478:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800947a:	7dfb      	ldrb	r3, [r7, #23]
}
 800947c:	4618      	mov	r0, r3
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	785b      	ldrb	r3, [r3, #1]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d13a      	bne.n	800951a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	2101      	movs	r1, #1
 80094b6:	fa01 f303 	lsl.w	r3, r1, r3
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	68f9      	ldr	r1, [r7, #12]
 80094be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80094c2:	4313      	orrs	r3, r2
 80094c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d155      	bne.n	8009588 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	791b      	ldrb	r3, [r3, #4]
 80094f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	059b      	lsls	r3, r3, #22
 80094fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009500:	4313      	orrs	r3, r2
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	440a      	add	r2, r1
 800950a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800950e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	e036      	b.n	8009588 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009520:	69da      	ldr	r2, [r3, #28]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	f003 030f 	and.w	r3, r3, #15
 800952a:	2101      	movs	r1, #1
 800952c:	fa01 f303 	lsl.w	r3, r1, r3
 8009530:	041b      	lsls	r3, r3, #16
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009538:	4313      	orrs	r3, r2
 800953a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	015a      	lsls	r2, r3, #5
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d11a      	bne.n	8009588 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	015a      	lsls	r2, r3, #5
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4413      	add	r3, r2
 800955a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	791b      	ldrb	r3, [r3, #4]
 800956c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800956e:	430b      	orrs	r3, r1
 8009570:	4313      	orrs	r3, r2
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	0151      	lsls	r1, r2, #5
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	440a      	add	r2, r1
 800957a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800957e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009586:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
	...

08009598 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d161      	bne.n	8009678 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095ca:	d11f      	bne.n	800960c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	0151      	lsls	r1, r2, #5
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	440a      	add	r2, r1
 80095e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009606:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800960a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009612:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	2101      	movs	r1, #1
 800961e:	fa01 f303 	lsl.w	r3, r1, r3
 8009622:	b29b      	uxth	r3, r3
 8009624:	43db      	mvns	r3, r3
 8009626:	68f9      	ldr	r1, [r7, #12]
 8009628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800962c:	4013      	ands	r3, r2
 800962e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009636:	69da      	ldr	r2, [r3, #28]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 030f 	and.w	r3, r3, #15
 8009640:	2101      	movs	r1, #1
 8009642:	fa01 f303 	lsl.w	r3, r1, r3
 8009646:	b29b      	uxth	r3, r3
 8009648:	43db      	mvns	r3, r3
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009650:	4013      	ands	r3, r2
 8009652:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	0159      	lsls	r1, r3, #5
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	440b      	add	r3, r1
 800966a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800966e:	4619      	mov	r1, r3
 8009670:	4b35      	ldr	r3, [pc, #212]	@ (8009748 <USB_DeactivateEndpoint+0x1b0>)
 8009672:	4013      	ands	r3, r2
 8009674:	600b      	str	r3, [r1, #0]
 8009676:	e060      	b.n	800973a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800968a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800968e:	d11f      	bne.n	80096d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	2101      	movs	r1, #1
 80096e2:	fa01 f303 	lsl.w	r3, r1, r3
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	43db      	mvns	r3, r3
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096f0:	4013      	ands	r3, r2
 80096f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096fa:	69da      	ldr	r2, [r3, #28]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	2101      	movs	r1, #1
 8009706:	fa01 f303 	lsl.w	r3, r1, r3
 800970a:	041b      	lsls	r3, r3, #16
 800970c:	43db      	mvns	r3, r3
 800970e:	68f9      	ldr	r1, [r7, #12]
 8009710:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009714:	4013      	ands	r3, r2
 8009716:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	0159      	lsls	r1, r3, #5
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	440b      	add	r3, r1
 800972e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009732:	4619      	mov	r1, r3
 8009734:	4b05      	ldr	r3, [pc, #20]	@ (800974c <USB_DeactivateEndpoint+0x1b4>)
 8009736:	4013      	ands	r3, r2
 8009738:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	ec337800 	.word	0xec337800
 800974c:	eff37800 	.word	0xeff37800

08009750 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08a      	sub	sp, #40	@ 0x28
 8009754:	af02      	add	r7, sp, #8
 8009756:	60f8      	str	r0, [r7, #12]
 8009758:	60b9      	str	r1, [r7, #8]
 800975a:	4613      	mov	r3, r2
 800975c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	2b01      	cmp	r3, #1
 800976e:	f040 817a 	bne.w	8009a66 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d132      	bne.n	80097e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	0151      	lsls	r1, r2, #5
 800978c:	69fa      	ldr	r2, [r7, #28]
 800978e:	440a      	add	r2, r1
 8009790:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009794:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009798:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800979c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	0151      	lsls	r1, r2, #5
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	440a      	add	r2, r1
 80097b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	69ba      	ldr	r2, [r7, #24]
 80097ce:	0151      	lsls	r1, r2, #5
 80097d0:	69fa      	ldr	r2, [r7, #28]
 80097d2:	440a      	add	r2, r1
 80097d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097d8:	0cdb      	lsrs	r3, r3, #19
 80097da:	04db      	lsls	r3, r3, #19
 80097dc:	6113      	str	r3, [r2, #16]
 80097de:	e092      	b.n	8009906 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	0151      	lsls	r1, r2, #5
 80097f2:	69fa      	ldr	r2, [r7, #28]
 80097f4:	440a      	add	r2, r1
 80097f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097fa:	0cdb      	lsrs	r3, r3, #19
 80097fc:	04db      	lsls	r3, r3, #19
 80097fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	0151      	lsls	r1, r2, #5
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	440a      	add	r2, r1
 8009816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800981a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800981e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009822:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d11a      	bne.n	8009860 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	429a      	cmp	r2, r3
 8009834:	d903      	bls.n	800983e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	69ba      	ldr	r2, [r7, #24]
 800984e:	0151      	lsls	r1, r2, #5
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	440a      	add	r2, r1
 8009854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009858:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800985c:	6113      	str	r3, [r2, #16]
 800985e:	e01b      	b.n	8009898 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800986c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	6919      	ldr	r1, [r3, #16]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	440b      	add	r3, r1
 8009878:	1e59      	subs	r1, r3, #1
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009882:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009884:	4ba2      	ldr	r3, [pc, #648]	@ (8009b10 <USB_EPStartXfer+0x3c0>)
 8009886:	400b      	ands	r3, r1
 8009888:	69b9      	ldr	r1, [r7, #24]
 800988a:	0148      	lsls	r0, r1, #5
 800988c:	69f9      	ldr	r1, [r7, #28]
 800988e:	4401      	add	r1, r0
 8009890:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009894:	4313      	orrs	r3, r2
 8009896:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a4:	691a      	ldr	r2, [r3, #16]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098ae:	69b9      	ldr	r1, [r7, #24]
 80098b0:	0148      	lsls	r0, r1, #5
 80098b2:	69f9      	ldr	r1, [r7, #28]
 80098b4:	4401      	add	r1, r0
 80098b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80098ba:	4313      	orrs	r3, r2
 80098bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	791b      	ldrb	r3, [r3, #4]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d11f      	bne.n	8009906 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	69fa      	ldr	r2, [r7, #28]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098e0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80098e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	0151      	lsls	r1, r2, #5
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	440a      	add	r2, r1
 80098fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009900:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009904:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d14b      	bne.n	80099a4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d009      	beq.n	8009928 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009920:	461a      	mov	r2, r3
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	791b      	ldrb	r3, [r3, #4]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d128      	bne.n	8009982 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800993c:	2b00      	cmp	r3, #0
 800993e:	d110      	bne.n	8009962 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69ba      	ldr	r2, [r7, #24]
 8009950:	0151      	lsls	r1, r2, #5
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	440a      	add	r2, r1
 8009956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800995a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	e00f      	b.n	8009982 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800997c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009980:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	69ba      	ldr	r2, [r7, #24]
 8009992:	0151      	lsls	r1, r2, #5
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	440a      	add	r2, r1
 8009998:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800999c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80099a0:	6013      	str	r3, [r2, #0]
 80099a2:	e165      	b.n	8009c70 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80099c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	791b      	ldrb	r3, [r3, #4]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d015      	beq.n	80099f8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 814d 	beq.w	8009c70 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	2101      	movs	r1, #1
 80099e8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ec:	69f9      	ldr	r1, [r7, #28]
 80099ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099f2:	4313      	orrs	r3, r2
 80099f4:	634b      	str	r3, [r1, #52]	@ 0x34
 80099f6:	e13b      	b.n	8009c70 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d110      	bne.n	8009a2a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	0151      	lsls	r1, r2, #5
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	440a      	add	r2, r1
 8009a1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	e00f      	b.n	8009a4a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	0151      	lsls	r1, r2, #5
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	440a      	add	r2, r1
 8009a40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	68d9      	ldr	r1, [r3, #12]
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	781a      	ldrb	r2, [r3, #0]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	b298      	uxth	r0, r3
 8009a58:	79fb      	ldrb	r3, [r7, #7]
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 f9b8 	bl	8009dd4 <USB_WritePacket>
 8009a64:	e104      	b.n	8009c70 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a80:	0cdb      	lsrs	r3, r3, #19
 8009a82:	04db      	lsls	r3, r3, #19
 8009a84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	69fa      	ldr	r2, [r7, #28]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aa0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009aa4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009aa8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d131      	bne.n	8009b14 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	689a      	ldr	r2, [r3, #8]
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad4:	691a      	ldr	r2, [r3, #16]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ade:	69b9      	ldr	r1, [r7, #24]
 8009ae0:	0148      	lsls	r0, r1, #5
 8009ae2:	69f9      	ldr	r1, [r7, #28]
 8009ae4:	4401      	add	r1, r0
 8009ae6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009aea:	4313      	orrs	r3, r2
 8009aec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	0151      	lsls	r1, r2, #5
 8009b00:	69fa      	ldr	r2, [r7, #28]
 8009b02:	440a      	add	r2, r1
 8009b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b0c:	6113      	str	r3, [r2, #16]
 8009b0e:	e061      	b.n	8009bd4 <USB_EPStartXfer+0x484>
 8009b10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d123      	bne.n	8009b64 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	015a      	lsls	r2, r3, #5
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	4413      	add	r3, r2
 8009b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b28:	691a      	ldr	r2, [r3, #16]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b32:	69b9      	ldr	r1, [r7, #24]
 8009b34:	0148      	lsls	r0, r1, #5
 8009b36:	69f9      	ldr	r1, [r7, #28]
 8009b38:	4401      	add	r1, r0
 8009b3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	0151      	lsls	r1, r2, #5
 8009b54:	69fa      	ldr	r2, [r7, #28]
 8009b56:	440a      	add	r2, r1
 8009b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b60:	6113      	str	r3, [r2, #16]
 8009b62:	e037      	b.n	8009bd4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	1e5a      	subs	r2, r3, #1
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	8afa      	ldrh	r2, [r7, #22]
 8009b80:	fb03 f202 	mul.w	r2, r3, r2
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	8afb      	ldrh	r3, [r7, #22]
 8009b98:	04d9      	lsls	r1, r3, #19
 8009b9a:	4b38      	ldr	r3, [pc, #224]	@ (8009c7c <USB_EPStartXfer+0x52c>)
 8009b9c:	400b      	ands	r3, r1
 8009b9e:	69b9      	ldr	r1, [r7, #24]
 8009ba0:	0148      	lsls	r0, r1, #5
 8009ba2:	69f9      	ldr	r1, [r7, #28]
 8009ba4:	4401      	add	r1, r0
 8009ba6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009baa:	4313      	orrs	r3, r2
 8009bac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bc4:	69b9      	ldr	r1, [r7, #24]
 8009bc6:	0148      	lsls	r0, r1, #5
 8009bc8:	69f9      	ldr	r1, [r7, #28]
 8009bca:	4401      	add	r1, r0
 8009bcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009bd4:	79fb      	ldrb	r3, [r7, #7]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d10d      	bne.n	8009bf6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	68d9      	ldr	r1, [r3, #12]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf2:	460a      	mov	r2, r1
 8009bf4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	791b      	ldrb	r3, [r3, #4]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d128      	bne.n	8009c50 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d110      	bne.n	8009c30 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	e00f      	b.n	8009c50 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69ba      	ldr	r2, [r7, #24]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	69fa      	ldr	r2, [r7, #28]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	0151      	lsls	r1, r2, #5
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	440a      	add	r2, r1
 8009c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009c6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3720      	adds	r7, #32
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	1ff80000 	.word	0x1ff80000

08009c80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	785b      	ldrb	r3, [r3, #1]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d14a      	bne.n	8009d34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cb6:	f040 8086 	bne.w	8009dc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	7812      	ldrb	r2, [r2, #0]
 8009cce:	0151      	lsls	r1, r2, #5
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	440a      	add	r2, r1
 8009cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009cdc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	7812      	ldrb	r2, [r2, #0]
 8009cf2:	0151      	lsls	r1, r2, #5
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	440a      	add	r2, r1
 8009cf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d902      	bls.n	8009d18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	75fb      	strb	r3, [r7, #23]
          break;
 8009d16:	e056      	b.n	8009dc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	015a      	lsls	r2, r3, #5
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	4413      	add	r3, r2
 8009d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d30:	d0e7      	beq.n	8009d02 <USB_EPStopXfer+0x82>
 8009d32:	e048      	b.n	8009dc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	015a      	lsls	r2, r3, #5
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d4c:	d13b      	bne.n	8009dc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	7812      	ldrb	r2, [r2, #0]
 8009d62:	0151      	lsls	r1, r2, #5
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	440a      	add	r2, r1
 8009d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	015a      	lsls	r2, r3, #5
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	7812      	ldrb	r2, [r2, #0]
 8009d86:	0151      	lsls	r1, r2, #5
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	440a      	add	r2, r1
 8009d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d902      	bls.n	8009dac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	75fb      	strb	r3, [r7, #23]
          break;
 8009daa:	e00c      	b.n	8009dc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dc4:	d0e7      	beq.n	8009d96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	@ 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4611      	mov	r1, r2
 8009de0:	461a      	mov	r2, r3
 8009de2:	460b      	mov	r3, r1
 8009de4:	71fb      	strb	r3, [r7, #7]
 8009de6:	4613      	mov	r3, r2
 8009de8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009df2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d123      	bne.n	8009e42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009dfa:	88bb      	ldrh	r3, [r7, #4]
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	089b      	lsrs	r3, r3, #2
 8009e00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e02:	2300      	movs	r3, #0
 8009e04:	61bb      	str	r3, [r7, #24]
 8009e06:	e018      	b.n	8009e3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e08:	79fb      	ldrb	r3, [r7, #7]
 8009e0a:	031a      	lsls	r2, r3, #12
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e14:	461a      	mov	r2, r3
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	3301      	adds	r3, #1
 8009e26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	3301      	adds	r3, #1
 8009e32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	3301      	adds	r3, #1
 8009e38:	61bb      	str	r3, [r7, #24]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d3e2      	bcc.n	8009e08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3724      	adds	r7, #36	@ 0x24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b08b      	sub	sp, #44	@ 0x2c
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009e66:	88fb      	ldrh	r3, [r7, #6]
 8009e68:	089b      	lsrs	r3, r3, #2
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	f003 0303 	and.w	r3, r3, #3
 8009e74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009e76:	2300      	movs	r3, #0
 8009e78:	623b      	str	r3, [r7, #32]
 8009e7a:	e014      	b.n	8009ea6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e86:	601a      	str	r2, [r3, #0]
    pDest++;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e90:	3301      	adds	r3, #1
 8009e92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e96:	3301      	adds	r3, #1
 8009e98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009ea0:	6a3b      	ldr	r3, [r7, #32]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	623b      	str	r3, [r7, #32]
 8009ea6:	6a3a      	ldr	r2, [r7, #32]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d3e6      	bcc.n	8009e7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009eae:	8bfb      	ldrh	r3, [r7, #30]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d01e      	beq.n	8009ef2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f107 0310 	add.w	r3, r7, #16
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed8:	701a      	strb	r2, [r3, #0]
      i++;
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	3301      	adds	r3, #1
 8009ede:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009ee6:	8bfb      	ldrh	r3, [r7, #30]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009eec:	8bfb      	ldrh	r3, [r7, #30]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1ea      	bne.n	8009ec8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	372c      	adds	r7, #44	@ 0x2c
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d12c      	bne.n	8009f76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	db12      	blt.n	8009f54 <USB_EPSetStall+0x54>
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00f      	beq.n	8009f54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	0151      	lsls	r1, r2, #5
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	440a      	add	r2, r1
 8009f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009f52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	e02b      	b.n	8009fce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	db12      	blt.n	8009fae <USB_EPSetStall+0xae>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00f      	beq.n	8009fae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	0151      	lsls	r1, r2, #5
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	440a      	add	r2, r1
 8009fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fa8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009fac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d128      	bne.n	800a04a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	0151      	lsls	r1, r2, #5
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	440a      	add	r2, r1
 800a00e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a012:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a016:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	791b      	ldrb	r3, [r3, #4]
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d003      	beq.n	800a028 <USB_EPClearStall+0x4c>
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	791b      	ldrb	r3, [r3, #4]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d138      	bne.n	800a09a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	0151      	lsls	r1, r2, #5
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	440a      	add	r2, r1
 800a03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	e027      	b.n	800a09a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	0151      	lsls	r1, r2, #5
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	440a      	add	r2, r1
 800a060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a064:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a068:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	791b      	ldrb	r3, [r3, #4]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d003      	beq.n	800a07a <USB_EPClearStall+0x9e>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	791b      	ldrb	r3, [r3, #4]
 800a076:	2b02      	cmp	r3, #2
 800a078:	d10f      	bne.n	800a09a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	015a      	lsls	r2, r3, #5
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4413      	add	r3, r2
 800a082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	0151      	lsls	r1, r2, #5
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	440a      	add	r2, r1
 800a090:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a098:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3714      	adds	r7, #20
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a0ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	011b      	lsls	r3, r3, #4
 800a0d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a0dc:	68f9      	ldr	r1, [r7, #12]
 800a0de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a122:	f023 0302 	bic.w	r3, r3, #2
 800a126:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a136:	b480      	push	{r7}
 800a138:	b085      	sub	sp, #20
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a150:	f023 0303 	bic.w	r3, r3, #3
 800a154:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a164:	f043 0302 	orr.w	r3, r3, #2
 800a168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4013      	ands	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a190:	68fb      	ldr	r3, [r7, #12]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b085      	sub	sp, #20
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	4013      	ands	r3, r2
 800a1c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	0c1b      	lsrs	r3, r3, #16
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	b29b      	uxth	r3, r3
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a206:	b480      	push	{r7}
 800a208:	b085      	sub	sp, #20
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	460b      	mov	r3, r1
 800a210:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a216:	78fb      	ldrb	r3, [r7, #3]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4013      	ands	r3, r2
 800a232:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a234:	68bb      	ldr	r3, [r7, #8]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a242:	b480      	push	{r7}
 800a244:	b087      	sub	sp, #28
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a264:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	fa22 f303 	lsr.w	r3, r2, r3
 800a272:	01db      	lsls	r3, r3, #7
 800a274:	b2db      	uxtb	r3, r3
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	4313      	orrs	r3, r2
 800a27a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	4013      	ands	r3, r2
 800a28e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a290:	68bb      	ldr	r3, [r7, #8]
}
 800a292:	4618      	mov	r0, r3
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a2d8:	f023 0307 	bic.w	r3, r3, #7
 800a2dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a300:	b480      	push	{r7}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	460b      	mov	r3, r1
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	333c      	adds	r3, #60	@ 0x3c
 800a316:	3304      	adds	r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	4a26      	ldr	r2, [pc, #152]	@ (800a3b8 <USB_EP0_OutStart+0xb8>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d90a      	bls.n	800a33a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a334:	d101      	bne.n	800a33a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	e037      	b.n	800a3aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a340:	461a      	mov	r2, r3
 800a342:	2300      	movs	r3, #0
 800a344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a354:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a368:	f043 0318 	orr.w	r3, r3, #24
 800a36c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a37c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a380:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a382:	7afb      	ldrb	r3, [r7, #11]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d10f      	bne.n	800a3a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a3a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	4f54300a 	.word	0x4f54300a

0800a3bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3d4:	d901      	bls.n	800a3da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e01b      	b.n	800a412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	daf2      	bge.n	800a3c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	f043 0201 	orr.w	r2, r3, #1
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3fe:	d901      	bls.n	800a404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e006      	b.n	800a412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	f003 0301 	and.w	r3, r3, #1
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d0f0      	beq.n	800a3f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a424:	4904      	ldr	r1, [pc, #16]	@ (800a438 <MX_FATFS_Init+0x18>)
 800a426:	4805      	ldr	r0, [pc, #20]	@ (800a43c <MX_FATFS_Init+0x1c>)
 800a428:	f002 fa42 	bl	800c8b0 <FATFS_LinkDriver>
 800a42c:	4603      	mov	r3, r0
 800a42e:	461a      	mov	r2, r3
 800a430:	4b03      	ldr	r3, [pc, #12]	@ (800a440 <MX_FATFS_Init+0x20>)
 800a432:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a434:	bf00      	nop
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000548 	.word	0x20000548
 800a43c:	0800ddb8 	.word	0x0800ddb8
 800a440:	20000544 	.word	0x20000544

0800a444 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a44e:	f000 f888 	bl	800a562 <BSP_SD_IsDetected>
 800a452:	4603      	mov	r3, r0
 800a454:	2b01      	cmp	r3, #1
 800a456:	d001      	beq.n	800a45c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e005      	b.n	800a468 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a45c:	4804      	ldr	r0, [pc, #16]	@ (800a470 <BSP_SD_Init+0x2c>)
 800a45e:	f7fc f9c3 	bl	80067e8 <HAL_SD_Init>
 800a462:	4603      	mov	r3, r0
 800a464:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a466:	79fb      	ldrb	r3, [r7, #7]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20000310 	.word	0x20000310

0800a474 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	68f9      	ldr	r1, [r7, #12]
 800a48a:	4806      	ldr	r0, [pc, #24]	@ (800a4a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a48c:	f7fc fa5c 	bl	8006948 <HAL_SD_ReadBlocks_DMA>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20000310 	.word	0x20000310

0800a4a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	68f9      	ldr	r1, [r7, #12]
 800a4be:	4806      	ldr	r0, [pc, #24]	@ (800a4d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a4c0:	f7fc fb22 	bl	8006b08 <HAL_SD_WriteBlocks_DMA>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3718      	adds	r7, #24
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20000310 	.word	0x20000310

0800a4dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a4e0:	4805      	ldr	r0, [pc, #20]	@ (800a4f8 <BSP_SD_GetCardState+0x1c>)
 800a4e2:	f7fc ff43 	bl	800736c <HAL_SD_GetCardState>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	bf14      	ite	ne
 800a4ec:	2301      	movne	r3, #1
 800a4ee:	2300      	moveq	r3, #0
 800a4f0:	b2db      	uxtb	r3, r3
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000310 	.word	0x20000310

0800a4fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	4803      	ldr	r0, [pc, #12]	@ (800a514 <BSP_SD_GetCardInfo+0x18>)
 800a508:	f7fc ff04 	bl	8007314 <HAL_SD_GetCardInfo>
}
 800a50c:	bf00      	nop
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	20000310 	.word	0x20000310

0800a518 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a520:	f000 f818 	bl	800a554 <BSP_SD_AbortCallback>
}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a534:	f000 f9a8 	bl	800a888 <BSP_SD_WriteCpltCallback>
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a548:	f000 f9aa 	bl	800a8a0 <BSP_SD_ReadCpltCallback>
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0

}
 800a558:	bf00      	nop
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a568:	2301      	movs	r3, #1
 800a56a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a56c:	f000 f80c 	bl	800a588 <BSP_PlatformIsDetected>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800a576:	2300      	movs	r3, #0
 800a578:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	b2db      	uxtb	r3, r3
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3708      	adds	r7, #8
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800a58e:	2301      	movs	r3, #1
 800a590:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800a592:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a596:	4806      	ldr	r0, [pc, #24]	@ (800a5b0 <BSP_PlatformIsDetected+0x28>)
 800a598:	f7f8 fd28 	bl	8002fec <HAL_GPIO_ReadPin>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40020800 	.word	0x40020800

0800a5b4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a5bc:	f7f7 fdbc 	bl	8002138 <HAL_GetTick>
 800a5c0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a5c2:	e006      	b.n	800a5d2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a5c4:	f7ff ff8a 	bl	800a4dc <BSP_SD_GetCardState>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e009      	b.n	800a5e6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a5d2:	f7f7 fdb1 	bl	8002138 <HAL_GetTick>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d8f0      	bhi.n	800a5c4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a5e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a628 <SD_CheckStatus+0x38>)
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a600:	f7ff ff6c 	bl	800a4dc <BSP_SD_GetCardState>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d107      	bne.n	800a61a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a60a:	4b07      	ldr	r3, [pc, #28]	@ (800a628 <SD_CheckStatus+0x38>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f023 0301 	bic.w	r3, r3, #1
 800a614:	b2da      	uxtb	r2, r3
 800a616:	4b04      	ldr	r3, [pc, #16]	@ (800a628 <SD_CheckStatus+0x38>)
 800a618:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a61a:	4b03      	ldr	r3, [pc, #12]	@ (800a628 <SD_CheckStatus+0x38>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	b2db      	uxtb	r3, r3
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20000009 	.word	0x20000009

0800a62c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a636:	f7ff ff05 	bl	800a444 <BSP_SD_Init>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d107      	bne.n	800a650 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff ffd4 	bl	800a5f0 <SD_CheckStatus>
 800a648:	4603      	mov	r3, r0
 800a64a:	461a      	mov	r2, r3
 800a64c:	4b04      	ldr	r3, [pc, #16]	@ (800a660 <SD_initialize+0x34>)
 800a64e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a650:	4b03      	ldr	r3, [pc, #12]	@ (800a660 <SD_initialize+0x34>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	b2db      	uxtb	r3, r3
}
 800a656:	4618      	mov	r0, r3
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000009 	.word	0x20000009

0800a664 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff ffbd 	bl	800a5f0 <SD_CheckStatus>
 800a676:	4603      	mov	r3, r0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a694:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a698:	f7ff ff8c 	bl	800a5b4 <SD_CheckStatusWithTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	da01      	bge.n	800a6a6 <SD_read+0x26>
  {
    return res;
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	e03b      	b.n	800a71e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	68b8      	ldr	r0, [r7, #8]
 800a6ac:	f7ff fee2 	bl	800a474 <BSP_SD_ReadBlocks_DMA>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d132      	bne.n	800a71c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a6b6:	4b1c      	ldr	r3, [pc, #112]	@ (800a728 <SD_read+0xa8>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a6bc:	f7f7 fd3c 	bl	8002138 <HAL_GetTick>
 800a6c0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a6c2:	bf00      	nop
 800a6c4:	4b18      	ldr	r3, [pc, #96]	@ (800a728 <SD_read+0xa8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d108      	bne.n	800a6de <SD_read+0x5e>
 800a6cc:	f7f7 fd34 	bl	8002138 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d9f2      	bls.n	800a6c4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a6de:	4b12      	ldr	r3, [pc, #72]	@ (800a728 <SD_read+0xa8>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
 800a6ea:	e017      	b.n	800a71c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a6ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a728 <SD_read+0xa8>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a6f2:	f7f7 fd21 	bl	8002138 <HAL_GetTick>
 800a6f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a6f8:	e007      	b.n	800a70a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a6fa:	f7ff feef 	bl	800a4dc <BSP_SD_GetCardState>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <SD_read+0x8a>
          {
            res = RES_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a708:	e008      	b.n	800a71c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a70a:	f7f7 fd15 	bl	8002138 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a718:	4293      	cmp	r3, r2
 800a71a:	d9ee      	bls.n	800a6fa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20000550 	.word	0x20000550

0800a72c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	607a      	str	r2, [r7, #4]
 800a736:	603b      	str	r3, [r7, #0]
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a740:	4b24      	ldr	r3, [pc, #144]	@ (800a7d4 <SD_write+0xa8>)
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a746:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a74a:	f7ff ff33 	bl	800a5b4 <SD_CheckStatusWithTimeout>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	da01      	bge.n	800a758 <SD_write+0x2c>
  {
    return res;
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	e038      	b.n	800a7ca <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a758:	683a      	ldr	r2, [r7, #0]
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	68b8      	ldr	r0, [r7, #8]
 800a75e:	f7ff fea3 	bl	800a4a8 <BSP_SD_WriteBlocks_DMA>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d12f      	bne.n	800a7c8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a768:	f7f7 fce6 	bl	8002138 <HAL_GetTick>
 800a76c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a76e:	bf00      	nop
 800a770:	4b18      	ldr	r3, [pc, #96]	@ (800a7d4 <SD_write+0xa8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d108      	bne.n	800a78a <SD_write+0x5e>
 800a778:	f7f7 fcde 	bl	8002138 <HAL_GetTick>
 800a77c:	4602      	mov	r2, r0
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a786:	4293      	cmp	r3, r2
 800a788:	d9f2      	bls.n	800a770 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a78a:	4b12      	ldr	r3, [pc, #72]	@ (800a7d4 <SD_write+0xa8>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	75fb      	strb	r3, [r7, #23]
 800a796:	e017      	b.n	800a7c8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a798:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d4 <SD_write+0xa8>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a79e:	f7f7 fccb 	bl	8002138 <HAL_GetTick>
 800a7a2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a7a4:	e007      	b.n	800a7b6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a7a6:	f7ff fe99 	bl	800a4dc <BSP_SD_GetCardState>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <SD_write+0x8a>
          {
            res = RES_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	75fb      	strb	r3, [r7, #23]
            break;
 800a7b4:	e008      	b.n	800a7c8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a7b6:	f7f7 fcbf 	bl	8002138 <HAL_GetTick>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d9ee      	bls.n	800a7a6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	2000054c 	.word	0x2000054c

0800a7d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08c      	sub	sp, #48	@ 0x30
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	4603      	mov	r3, r0
 800a7e0:	603a      	str	r2, [r7, #0]
 800a7e2:	71fb      	strb	r3, [r7, #7]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7ee:	4b25      	ldr	r3, [pc, #148]	@ (800a884 <SD_ioctl+0xac>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <SD_ioctl+0x28>
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e03c      	b.n	800a87a <SD_ioctl+0xa2>

  switch (cmd)
 800a800:	79bb      	ldrb	r3, [r7, #6]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d834      	bhi.n	800a870 <SD_ioctl+0x98>
 800a806:	a201      	add	r2, pc, #4	@ (adr r2, 800a80c <SD_ioctl+0x34>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a825 	.word	0x0800a825
 800a814:	0800a83d 	.word	0x0800a83d
 800a818:	0800a857 	.word	0x0800a857
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a822:	e028      	b.n	800a876 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a824:	f107 030c 	add.w	r3, r7, #12
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fe67 	bl	800a4fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a82e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a83a:	e01c      	b.n	800a876 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a83c:	f107 030c 	add.w	r3, r7, #12
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff fe5b 	bl	800a4fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a848:	b29a      	uxth	r2, r3
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a854:	e00f      	b.n	800a876 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a856:	f107 030c 	add.w	r3, r7, #12
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7ff fe4e 	bl	800a4fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	0a5a      	lsrs	r2, r3, #9
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a86e:	e002      	b.n	800a876 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a870:	2304      	movs	r3, #4
 800a872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a876:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3730      	adds	r7, #48	@ 0x30
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	20000009 	.word	0x20000009

0800a888 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a88c:	4b03      	ldr	r3, [pc, #12]	@ (800a89c <BSP_SD_WriteCpltCallback+0x14>)
 800a88e:	2201      	movs	r2, #1
 800a890:	601a      	str	r2, [r3, #0]
}
 800a892:	bf00      	nop
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	2000054c 	.word	0x2000054c

0800a8a0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800a8a4:	4b03      	ldr	r3, [pc, #12]	@ (800a8b4 <BSP_SD_ReadCpltCallback+0x14>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
}
 800a8aa:	bf00      	nop
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	20000550 	.word	0x20000550

0800a8b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a8c8:	f002 fd28 	bl	800d31c <USBD_static_malloc>
 800a8cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d109      	bne.n	800a8e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	32b0      	adds	r2, #176	@ 0xb0
 800a8de:	2100      	movs	r1, #0
 800a8e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e0d4      	b.n	800aa92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a8e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f002 fd8c 	bl	800d40c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32b0      	adds	r2, #176	@ 0xb0
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	32b0      	adds	r2, #176	@ 0xb0
 800a90e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	7c1b      	ldrb	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d138      	bne.n	800a992 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a920:	4b5e      	ldr	r3, [pc, #376]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a922:	7819      	ldrb	r1, [r3, #0]
 800a924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a928:	2202      	movs	r2, #2
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f002 fb85 	bl	800d03a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a930:	4b5a      	ldr	r3, [pc, #360]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	f003 020f 	and.w	r2, r3, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	440b      	add	r3, r1
 800a944:	3324      	adds	r3, #36	@ 0x24
 800a946:	2201      	movs	r2, #1
 800a948:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a94a:	4b55      	ldr	r3, [pc, #340]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a94c:	7819      	ldrb	r1, [r3, #0]
 800a94e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a952:	2202      	movs	r2, #2
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f002 fb70 	bl	800d03a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a95a:	4b51      	ldr	r3, [pc, #324]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	f003 020f 	and.w	r2, r3, #15
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4613      	mov	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	440b      	add	r3, r1
 800a96e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a972:	2201      	movs	r2, #1
 800a974:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a976:	4b4b      	ldr	r3, [pc, #300]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	f003 020f 	and.w	r2, r3, #15
 800a97e:	6879      	ldr	r1, [r7, #4]
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	440b      	add	r3, r1
 800a98a:	3326      	adds	r3, #38	@ 0x26
 800a98c:	2210      	movs	r2, #16
 800a98e:	801a      	strh	r2, [r3, #0]
 800a990:	e035      	b.n	800a9fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a992:	4b42      	ldr	r3, [pc, #264]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a994:	7819      	ldrb	r1, [r3, #0]
 800a996:	2340      	movs	r3, #64	@ 0x40
 800a998:	2202      	movs	r2, #2
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f002 fb4d 	bl	800d03a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a9a0:	4b3e      	ldr	r3, [pc, #248]	@ (800aa9c <USBD_CDC_Init+0x1e4>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	f003 020f 	and.w	r2, r3, #15
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	3324      	adds	r3, #36	@ 0x24
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a9ba:	4b39      	ldr	r3, [pc, #228]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a9bc:	7819      	ldrb	r1, [r3, #0]
 800a9be:	2340      	movs	r3, #64	@ 0x40
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f002 fb39 	bl	800d03a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a9c8:	4b35      	ldr	r3, [pc, #212]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 020f 	and.w	r2, r3, #15
 800a9d0:	6879      	ldr	r1, [r7, #4]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	440b      	add	r3, r1
 800a9dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a9e4:	4b2f      	ldr	r3, [pc, #188]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	f003 020f 	and.w	r2, r3, #15
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	3326      	adds	r3, #38	@ 0x26
 800a9fa:	2210      	movs	r2, #16
 800a9fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9fe:	4b29      	ldr	r3, [pc, #164]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800aa00:	7819      	ldrb	r1, [r3, #0]
 800aa02:	2308      	movs	r3, #8
 800aa04:	2203      	movs	r2, #3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f002 fb17 	bl	800d03a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800aa0c:	4b25      	ldr	r3, [pc, #148]	@ (800aaa4 <USBD_CDC_Init+0x1ec>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	f003 020f 	and.w	r2, r3, #15
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	4613      	mov	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	440b      	add	r3, r1
 800aa20:	3324      	adds	r3, #36	@ 0x24
 800aa22:	2201      	movs	r2, #1
 800aa24:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	33b0      	adds	r3, #176	@ 0xb0
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e018      	b.n	800aa92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	7c1b      	ldrb	r3, [r3, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa68:	4b0d      	ldr	r3, [pc, #52]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800aa6a:	7819      	ldrb	r1, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f002 fbce 	bl	800d218 <USBD_LL_PrepareReceive>
 800aa7c:	e008      	b.n	800aa90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa7e:	4b08      	ldr	r3, [pc, #32]	@ (800aaa0 <USBD_CDC_Init+0x1e8>)
 800aa80:	7819      	ldrb	r1, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa88:	2340      	movs	r3, #64	@ 0x40
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f002 fbc4 	bl	800d218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000093 	.word	0x20000093
 800aaa0:	20000094 	.word	0x20000094
 800aaa4:	20000095 	.word	0x20000095

0800aaa8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aab4:	4b3a      	ldr	r3, [pc, #232]	@ (800aba0 <USBD_CDC_DeInit+0xf8>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f002 fae3 	bl	800d086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aac0:	4b37      	ldr	r3, [pc, #220]	@ (800aba0 <USBD_CDC_DeInit+0xf8>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	f003 020f 	and.w	r2, r3, #15
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	3324      	adds	r3, #36	@ 0x24
 800aad6:	2200      	movs	r2, #0
 800aad8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aada:	4b32      	ldr	r3, [pc, #200]	@ (800aba4 <USBD_CDC_DeInit+0xfc>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f002 fad0 	bl	800d086 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aae6:	4b2f      	ldr	r3, [pc, #188]	@ (800aba4 <USBD_CDC_DeInit+0xfc>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	f003 020f 	and.w	r2, r3, #15
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aafe:	2200      	movs	r2, #0
 800ab00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ab02:	4b29      	ldr	r3, [pc, #164]	@ (800aba8 <USBD_CDC_DeInit+0x100>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f002 fabc 	bl	800d086 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ab0e:	4b26      	ldr	r3, [pc, #152]	@ (800aba8 <USBD_CDC_DeInit+0x100>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 020f 	and.w	r2, r3, #15
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	440b      	add	r3, r1
 800ab22:	3324      	adds	r3, #36	@ 0x24
 800ab24:	2200      	movs	r2, #0
 800ab26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ab28:	4b1f      	ldr	r3, [pc, #124]	@ (800aba8 <USBD_CDC_DeInit+0x100>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	f003 020f 	and.w	r2, r3, #15
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	440b      	add	r3, r1
 800ab3c:	3326      	adds	r3, #38	@ 0x26
 800ab3e:	2200      	movs	r2, #0
 800ab40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	32b0      	adds	r2, #176	@ 0xb0
 800ab4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01f      	beq.n	800ab94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	33b0      	adds	r3, #176	@ 0xb0
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	32b0      	adds	r2, #176	@ 0xb0
 800ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 fbde 	bl	800d338 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	32b0      	adds	r2, #176	@ 0xb0
 800ab86:	2100      	movs	r1, #0
 800ab88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000093 	.word	0x20000093
 800aba4:	20000094 	.word	0x20000094
 800aba8:	20000095 	.word	0x20000095

0800abac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	32b0      	adds	r2, #176	@ 0xb0
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800abd8:	2303      	movs	r3, #3
 800abda:	e0bf      	b.n	800ad5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d050      	beq.n	800ac8a <USBD_CDC_Setup+0xde>
 800abe8:	2b20      	cmp	r3, #32
 800abea:	f040 80af 	bne.w	800ad4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	88db      	ldrh	r3, [r3, #6]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d03a      	beq.n	800ac6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	b25b      	sxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da1b      	bge.n	800ac38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	33b0      	adds	r3, #176	@ 0xb0
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ac16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	88d2      	ldrh	r2, [r2, #6]
 800ac1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	88db      	ldrh	r3, [r3, #6]
 800ac22:	2b07      	cmp	r3, #7
 800ac24:	bf28      	it	cs
 800ac26:	2307      	movcs	r3, #7
 800ac28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	89fa      	ldrh	r2, [r7, #14]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 fd71 	bl	800c718 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ac36:	e090      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	785a      	ldrb	r2, [r3, #1]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	88db      	ldrh	r3, [r3, #6]
 800ac46:	2b3f      	cmp	r3, #63	@ 0x3f
 800ac48:	d803      	bhi.n	800ac52 <USBD_CDC_Setup+0xa6>
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	88db      	ldrh	r3, [r3, #6]
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	e000      	b.n	800ac54 <USBD_CDC_Setup+0xa8>
 800ac52:	2240      	movs	r2, #64	@ 0x40
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ac5a:	6939      	ldr	r1, [r7, #16]
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ac62:	461a      	mov	r2, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f001 fd83 	bl	800c770 <USBD_CtlPrepareRx>
      break;
 800ac6a:	e076      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	33b0      	adds	r3, #176	@ 0xb0
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	7850      	ldrb	r0, [r2, #1]
 800ac82:	2200      	movs	r2, #0
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	4798      	blx	r3
      break;
 800ac88:	e067      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	2b0b      	cmp	r3, #11
 800ac90:	d851      	bhi.n	800ad36 <USBD_CDC_Setup+0x18a>
 800ac92:	a201      	add	r2, pc, #4	@ (adr r2, 800ac98 <USBD_CDC_Setup+0xec>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acc9 	.word	0x0800acc9
 800ac9c:	0800ad45 	.word	0x0800ad45
 800aca0:	0800ad37 	.word	0x0800ad37
 800aca4:	0800ad37 	.word	0x0800ad37
 800aca8:	0800ad37 	.word	0x0800ad37
 800acac:	0800ad37 	.word	0x0800ad37
 800acb0:	0800ad37 	.word	0x0800ad37
 800acb4:	0800ad37 	.word	0x0800ad37
 800acb8:	0800ad37 	.word	0x0800ad37
 800acbc:	0800ad37 	.word	0x0800ad37
 800acc0:	0800acf3 	.word	0x0800acf3
 800acc4:	0800ad1d 	.word	0x0800ad1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d107      	bne.n	800ace4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800acd4:	f107 030a 	add.w	r3, r7, #10
 800acd8:	2202      	movs	r2, #2
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f001 fd1b 	bl	800c718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ace2:	e032      	b.n	800ad4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ace4:	6839      	ldr	r1, [r7, #0]
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 fca5 	bl	800c636 <USBD_CtlError>
            ret = USBD_FAIL;
 800acec:	2303      	movs	r3, #3
 800acee:	75fb      	strb	r3, [r7, #23]
          break;
 800acf0:	e02b      	b.n	800ad4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d107      	bne.n	800ad0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800acfe:	f107 030d 	add.w	r3, r7, #13
 800ad02:	2201      	movs	r2, #1
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f001 fd06 	bl	800c718 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad0c:	e01d      	b.n	800ad4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 fc90 	bl	800c636 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad16:	2303      	movs	r3, #3
 800ad18:	75fb      	strb	r3, [r7, #23]
          break;
 800ad1a:	e016      	b.n	800ad4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d00f      	beq.n	800ad48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 fc83 	bl	800c636 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad30:	2303      	movs	r3, #3
 800ad32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ad34:	e008      	b.n	800ad48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 fc7c 	bl	800c636 <USBD_CtlError>
          ret = USBD_FAIL;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	75fb      	strb	r3, [r7, #23]
          break;
 800ad42:	e002      	b.n	800ad4a <USBD_CDC_Setup+0x19e>
          break;
 800ad44:	bf00      	nop
 800ad46:	e008      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>
          break;
 800ad48:	bf00      	nop
      }
      break;
 800ad4a:	e006      	b.n	800ad5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 fc71 	bl	800c636 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad54:	2303      	movs	r3, #3
 800ad56:	75fb      	strb	r3, [r7, #23]
      break;
 800ad58:	bf00      	nop
  }

  return (uint8_t)ret;
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	32b0      	adds	r2, #176	@ 0xb0
 800ad82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e065      	b.n	800ae5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	32b0      	adds	r2, #176	@ 0xb0
 800ad98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	f003 020f 	and.w	r2, r3, #15
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	4613      	mov	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	440b      	add	r3, r1
 800adb0:	3318      	adds	r3, #24
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d02f      	beq.n	800ae18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	f003 020f 	and.w	r2, r3, #15
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	440b      	add	r3, r1
 800adca:	3318      	adds	r3, #24
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	f003 010f 	and.w	r1, r3, #15
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	460b      	mov	r3, r1
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	440b      	add	r3, r1
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4403      	add	r3, r0
 800ade0:	331c      	adds	r3, #28
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ade8:	fb01 f303 	mul.w	r3, r1, r3
 800adec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d112      	bne.n	800ae18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	f003 020f 	and.w	r2, r3, #15
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	440b      	add	r3, r1
 800ae04:	3318      	adds	r3, #24
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae0a:	78f9      	ldrb	r1, [r7, #3]
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	2200      	movs	r2, #0
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f002 f9e0 	bl	800d1d6 <USBD_LL_Transmit>
 800ae16:	e01f      	b.n	800ae58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	33b0      	adds	r3, #176	@ 0xb0
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d010      	beq.n	800ae58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	33b0      	adds	r3, #176	@ 0xb0
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ae54:	78fa      	ldrb	r2, [r7, #3]
 800ae56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	32b0      	adds	r2, #176	@ 0xb0
 800ae78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	32b0      	adds	r2, #176	@ 0xb0
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e01a      	b.n	800aeca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae94:	78fb      	ldrb	r3, [r7, #3]
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f002 f9de 	bl	800d25a <USBD_LL_GetRxDataSize>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	33b0      	adds	r3, #176	@ 0xb0
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aec4:	4611      	mov	r1, r2
 800aec6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	32b0      	adds	r2, #176	@ 0xb0
 800aee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d101      	bne.n	800aef4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e024      	b.n	800af3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	33b0      	adds	r3, #176	@ 0xb0
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d019      	beq.n	800af3c <USBD_CDC_EP0_RxReady+0x6a>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800af0e:	2bff      	cmp	r3, #255	@ 0xff
 800af10:	d014      	beq.n	800af3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	33b0      	adds	r3, #176	@ 0xb0
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800af2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800af32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	22ff      	movs	r2, #255	@ 0xff
 800af38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3710      	adds	r7, #16
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af50:	2182      	movs	r1, #130	@ 0x82
 800af52:	4818      	ldr	r0, [pc, #96]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af54:	f000 fd0f 	bl	800b976 <USBD_GetEpDesc>
 800af58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af5a:	2101      	movs	r1, #1
 800af5c:	4815      	ldr	r0, [pc, #84]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af5e:	f000 fd0a 	bl	800b976 <USBD_GetEpDesc>
 800af62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af64:	2181      	movs	r1, #129	@ 0x81
 800af66:	4813      	ldr	r0, [pc, #76]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af68:	f000 fd05 	bl	800b976 <USBD_GetEpDesc>
 800af6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2210      	movs	r2, #16
 800af78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d006      	beq.n	800af8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2200      	movs	r2, #0
 800af84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af88:	711a      	strb	r2, [r3, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d006      	beq.n	800afa2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af9c:	711a      	strb	r2, [r3, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2243      	movs	r2, #67	@ 0x43
 800afa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afa8:	4b02      	ldr	r3, [pc, #8]	@ (800afb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000050 	.word	0x20000050

0800afb8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afc0:	2182      	movs	r1, #130	@ 0x82
 800afc2:	4818      	ldr	r0, [pc, #96]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afc4:	f000 fcd7 	bl	800b976 <USBD_GetEpDesc>
 800afc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afca:	2101      	movs	r1, #1
 800afcc:	4815      	ldr	r0, [pc, #84]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afce:	f000 fcd2 	bl	800b976 <USBD_GetEpDesc>
 800afd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afd4:	2181      	movs	r1, #129	@ 0x81
 800afd6:	4813      	ldr	r0, [pc, #76]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800afd8:	f000 fccd 	bl	800b976 <USBD_GetEpDesc>
 800afdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2210      	movs	r2, #16
 800afe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d006      	beq.n	800affe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2200      	movs	r2, #0
 800aff4:	711a      	strb	r2, [r3, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f042 0202 	orr.w	r2, r2, #2
 800affc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d006      	beq.n	800b012 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	711a      	strb	r2, [r3, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f042 0202 	orr.w	r2, r2, #2
 800b010:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2243      	movs	r2, #67	@ 0x43
 800b016:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b018:	4b02      	ldr	r3, [pc, #8]	@ (800b024 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20000050 	.word	0x20000050

0800b028 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b030:	2182      	movs	r1, #130	@ 0x82
 800b032:	4818      	ldr	r0, [pc, #96]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b034:	f000 fc9f 	bl	800b976 <USBD_GetEpDesc>
 800b038:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b03a:	2101      	movs	r1, #1
 800b03c:	4815      	ldr	r0, [pc, #84]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b03e:	f000 fc9a 	bl	800b976 <USBD_GetEpDesc>
 800b042:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b044:	2181      	movs	r1, #129	@ 0x81
 800b046:	4813      	ldr	r0, [pc, #76]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b048:	f000 fc95 	bl	800b976 <USBD_GetEpDesc>
 800b04c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2210      	movs	r2, #16
 800b058:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d006      	beq.n	800b06e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2200      	movs	r2, #0
 800b064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b068:	711a      	strb	r2, [r3, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d006      	beq.n	800b082 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b07c:	711a      	strb	r2, [r3, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2243      	movs	r2, #67	@ 0x43
 800b086:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b088:	4b02      	ldr	r3, [pc, #8]	@ (800b094 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3718      	adds	r7, #24
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000050 	.word	0x20000050

0800b098 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	220a      	movs	r2, #10
 800b0a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b0a6:	4b03      	ldr	r3, [pc, #12]	@ (800b0b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	2000000c 	.word	0x2000000c

0800b0b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e009      	b.n	800b0e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	33b0      	adds	r3, #176	@ 0xb0
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b087      	sub	sp, #28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	32b0      	adds	r2, #176	@ 0xb0
 800b102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b106:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b10e:	2303      	movs	r3, #3
 800b110:	e008      	b.n	800b124 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	32b0      	adds	r2, #176	@ 0xb0
 800b144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b148:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	e004      	b.n	800b15e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
	...

0800b16c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	32b0      	adds	r2, #176	@ 0xb0
 800b17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b182:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	32b0      	adds	r2, #176	@ 0xb0
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b196:	2303      	movs	r3, #3
 800b198:	e018      	b.n	800b1cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	7c1b      	ldrb	r3, [r3, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <USBD_CDC_ReceivePacket+0x68>)
 800b1a4:	7819      	ldrb	r1, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f002 f831 	bl	800d218 <USBD_LL_PrepareReceive>
 800b1b6:	e008      	b.n	800b1ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1b8:	4b06      	ldr	r3, [pc, #24]	@ (800b1d4 <USBD_CDC_ReceivePacket+0x68>)
 800b1ba:	7819      	ldrb	r1, [r3, #0]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1c2:	2340      	movs	r3, #64	@ 0x40
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f002 f827 	bl	800d218 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	20000094 	.word	0x20000094

0800b1d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e01f      	b.n	800b230 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2201      	movs	r2, #1
 800b21a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	79fa      	ldrb	r2, [r7, #7]
 800b222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f001 fea1 	bl	800cf6c <USBD_LL_Init>
 800b22a:	4603      	mov	r3, r0
 800b22c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e025      	b.n	800b29c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	32ae      	adds	r2, #174	@ 0xae
 800b262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00f      	beq.n	800b28c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	32ae      	adds	r2, #174	@ 0xae
 800b276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27c:	f107 020e 	add.w	r2, r7, #14
 800b280:	4610      	mov	r0, r2
 800b282:	4798      	blx	r3
 800b284:	4602      	mov	r2, r0
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f001 fea9 	bl	800d004 <USBD_LL_Start>
 800b2b2:	4603      	mov	r3, r0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b2c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d009      	beq.n	800b300 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	78fa      	ldrb	r2, [r7, #3]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	4798      	blx	r3
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	78fa      	ldrb	r2, [r7, #3]
 800b324:	4611      	mov	r1, r2
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	4798      	blx	r3
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b330:	2303      	movs	r3, #3
 800b332:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	f001 f936 	bl	800c5c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b364:	461a      	mov	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b372:	f003 031f 	and.w	r3, r3, #31
 800b376:	2b02      	cmp	r3, #2
 800b378:	d01a      	beq.n	800b3b0 <USBD_LL_SetupStage+0x72>
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d822      	bhi.n	800b3c4 <USBD_LL_SetupStage+0x86>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <USBD_LL_SetupStage+0x4a>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d00a      	beq.n	800b39c <USBD_LL_SetupStage+0x5e>
 800b386:	e01d      	b.n	800b3c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fb63 	bl	800ba5c <USBD_StdDevReq>
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]
      break;
 800b39a:	e020      	b.n	800b3de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fbcb 	bl	800bb40 <USBD_StdItfReq>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ae:	e016      	b.n	800b3de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fc2d 	bl	800bc18 <USBD_StdEPReq>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c2:	e00c      	b.n	800b3de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fe76 	bl	800d0c4 <USBD_LL_StallEP>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73fb      	strb	r3, [r7, #15]
      break;
 800b3dc:	bf00      	nop
  }

  return ret;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b3fa:	7afb      	ldrb	r3, [r7, #11]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d16e      	bne.n	800b4de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b406:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b40e:	2b03      	cmp	r3, #3
 800b410:	f040 8098 	bne.w	800b544 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d913      	bls.n	800b448 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	689a      	ldr	r2, [r3, #8]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	1ad2      	subs	r2, r2, r3
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	4293      	cmp	r3, r2
 800b438:	bf28      	it	cs
 800b43a:	4613      	movcs	r3, r2
 800b43c:	461a      	mov	r2, r3
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f001 f9b2 	bl	800c7aa <USBD_CtlContinueRx>
 800b446:	e07d      	b.n	800b544 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b44e:	f003 031f 	and.w	r3, r3, #31
 800b452:	2b02      	cmp	r3, #2
 800b454:	d014      	beq.n	800b480 <USBD_LL_DataOutStage+0x98>
 800b456:	2b02      	cmp	r3, #2
 800b458:	d81d      	bhi.n	800b496 <USBD_LL_DataOutStage+0xae>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <USBD_LL_DataOutStage+0x7c>
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d003      	beq.n	800b46a <USBD_LL_DataOutStage+0x82>
 800b462:	e018      	b.n	800b496 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	75bb      	strb	r3, [r7, #22]
            break;
 800b468:	e018      	b.n	800b49c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b470:	b2db      	uxtb	r3, r3
 800b472:	4619      	mov	r1, r3
 800b474:	68f8      	ldr	r0, [r7, #12]
 800b476:	f000 fa64 	bl	800b942 <USBD_CoreFindIF>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75bb      	strb	r3, [r7, #22]
            break;
 800b47e:	e00d      	b.n	800b49c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b486:	b2db      	uxtb	r3, r3
 800b488:	4619      	mov	r1, r3
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 fa66 	bl	800b95c <USBD_CoreFindEP>
 800b490:	4603      	mov	r3, r0
 800b492:	75bb      	strb	r3, [r7, #22]
            break;
 800b494:	e002      	b.n	800b49c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	75bb      	strb	r3, [r7, #22]
            break;
 800b49a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b49c:	7dbb      	ldrb	r3, [r7, #22]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d119      	bne.n	800b4d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d113      	bne.n	800b4d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b4ae:	7dba      	ldrb	r2, [r7, #22]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	32ae      	adds	r2, #174	@ 0xae
 800b4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b4be:	7dba      	ldrb	r2, [r7, #22]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b4c6:	7dba      	ldrb	r2, [r7, #22]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	32ae      	adds	r2, #174	@ 0xae
 800b4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d0:	691b      	ldr	r3, [r3, #16]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f001 f978 	bl	800c7cc <USBD_CtlSendStatus>
 800b4dc:	e032      	b.n	800b544 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b4de:	7afb      	ldrb	r3, [r7, #11]
 800b4e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 fa37 	bl	800b95c <USBD_CoreFindEP>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4f2:	7dbb      	ldrb	r3, [r7, #22]
 800b4f4:	2bff      	cmp	r3, #255	@ 0xff
 800b4f6:	d025      	beq.n	800b544 <USBD_LL_DataOutStage+0x15c>
 800b4f8:	7dbb      	ldrb	r3, [r7, #22]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d122      	bne.n	800b544 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b504:	b2db      	uxtb	r3, r3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d117      	bne.n	800b53a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b50a:	7dba      	ldrb	r2, [r7, #22]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	32ae      	adds	r2, #174	@ 0xae
 800b510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00f      	beq.n	800b53a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b51a:	7dba      	ldrb	r2, [r7, #22]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b522:	7dba      	ldrb	r2, [r7, #22]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	32ae      	adds	r2, #174	@ 0xae
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	699b      	ldr	r3, [r3, #24]
 800b52e:	7afa      	ldrb	r2, [r7, #11]
 800b530:	4611      	mov	r1, r2
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	e000      	b.n	800b546 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3718      	adds	r7, #24
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b086      	sub	sp, #24
 800b552:	af00      	add	r7, sp, #0
 800b554:	60f8      	str	r0, [r7, #12]
 800b556:	460b      	mov	r3, r1
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b55c:	7afb      	ldrb	r3, [r7, #11]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d16f      	bne.n	800b642 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3314      	adds	r3, #20
 800b566:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d15a      	bne.n	800b628 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d914      	bls.n	800b5a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	689a      	ldr	r2, [r3, #8]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	1ad2      	subs	r2, r2, r3
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	461a      	mov	r2, r3
 800b592:	6879      	ldr	r1, [r7, #4]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f001 f8da 	bl	800c74e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b59a:	2300      	movs	r3, #0
 800b59c:	2200      	movs	r2, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f001 fe39 	bl	800d218 <USBD_LL_PrepareReceive>
 800b5a6:	e03f      	b.n	800b628 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d11c      	bne.n	800b5ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d316      	bcc.n	800b5ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	685a      	ldr	r2, [r3, #4]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d20f      	bcs.n	800b5ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f001 f8bb 	bl	800c74e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f001 fe16 	bl	800d218 <USBD_LL_PrepareReceive>
 800b5ec:	e01c      	b.n	800b628 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b03      	cmp	r3, #3
 800b5f8:	d10f      	bne.n	800b61a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b600:	68db      	ldr	r3, [r3, #12]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d009      	beq.n	800b61a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b61a:	2180      	movs	r1, #128	@ 0x80
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f001 fd51 	bl	800d0c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f001 f8e5 	bl	800c7f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d03a      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7ff fe42 	bl	800b2bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b640:	e032      	b.n	800b6a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b642:	7afb      	ldrb	r3, [r7, #11]
 800b644:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	4619      	mov	r1, r3
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f000 f985 	bl	800b95c <USBD_CoreFindEP>
 800b652:	4603      	mov	r3, r0
 800b654:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	2bff      	cmp	r3, #255	@ 0xff
 800b65a:	d025      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d122      	bne.n	800b6a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d11c      	bne.n	800b6a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b66e:	7dfa      	ldrb	r2, [r7, #23]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	32ae      	adds	r2, #174	@ 0xae
 800b674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d014      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b67e:	7dfa      	ldrb	r2, [r7, #23]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b686:	7dfa      	ldrb	r2, [r7, #23]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	32ae      	adds	r2, #174	@ 0xae
 800b68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	7afa      	ldrb	r2, [r7, #11]
 800b694:	4611      	mov	r1, r2
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	4798      	blx	r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b69e:	7dbb      	ldrb	r3, [r7, #22]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b6a4:	7dbb      	ldrb	r3, [r7, #22]
 800b6a6:	e000      	b.n	800b6aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d014      	beq.n	800b718 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00e      	beq.n	800b718 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	6852      	ldr	r2, [r2, #4]
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	4611      	mov	r1, r2
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
 800b70e:	4603      	mov	r3, r0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b718:	2340      	movs	r3, #64	@ 0x40
 800b71a:	2200      	movs	r2, #0
 800b71c:	2100      	movs	r1, #0
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f001 fc8b 	bl	800d03a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2240      	movs	r2, #64	@ 0x40
 800b730:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b734:	2340      	movs	r3, #64	@ 0x40
 800b736:	2200      	movs	r2, #0
 800b738:	2180      	movs	r1, #128	@ 0x80
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fc7d 	bl	800d03a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2240      	movs	r2, #64	@ 0x40
 800b74a:	621a      	str	r2, [r3, #32]

  return ret;
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	78fa      	ldrb	r2, [r7, #3]
 800b766:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b04      	cmp	r3, #4
 800b788:	d006      	beq.n	800b798 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b790:	b2da      	uxtb	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2204      	movs	r2, #4
 800b79c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b083      	sub	sp, #12
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	d106      	bne.n	800b7d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b082      	sub	sp, #8
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d110      	bne.n	800b814 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00b      	beq.n	800b814 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b802:	69db      	ldr	r3, [r3, #28]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d005      	beq.n	800b814 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80e:	69db      	ldr	r3, [r3, #28]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	460b      	mov	r3, r1
 800b828:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	32ae      	adds	r2, #174	@ 0xae
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e01c      	b.n	800b87a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d115      	bne.n	800b878 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32ae      	adds	r2, #174	@ 0xae
 800b856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	32ae      	adds	r2, #174	@ 0xae
 800b86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86e:	6a1b      	ldr	r3, [r3, #32]
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	4611      	mov	r1, r2
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	460b      	mov	r3, r1
 800b88c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	32ae      	adds	r2, #174	@ 0xae
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d101      	bne.n	800b8a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	e01c      	b.n	800b8de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d115      	bne.n	800b8dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	32ae      	adds	r2, #174	@ 0xae
 800b8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00b      	beq.n	800b8dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	32ae      	adds	r2, #174	@ 0xae
 800b8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8d4:	78fa      	ldrb	r2, [r7, #3]
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00e      	beq.n	800b938 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	6852      	ldr	r2, [r2, #4]
 800b926:	b2d2      	uxtb	r2, r2
 800b928:	4611      	mov	r1, r2
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	4798      	blx	r3
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b934:	2303      	movs	r3, #3
 800b936:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b938:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b942:	b480      	push	{r7}
 800b944:	b083      	sub	sp, #12
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	460b      	mov	r3, r1
 800b94c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b94e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b968:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b086      	sub	sp, #24
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	460b      	mov	r3, r1
 800b980:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	885b      	ldrh	r3, [r3, #2]
 800b992:	b29b      	uxth	r3, r3
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	7812      	ldrb	r2, [r2, #0]
 800b998:	4293      	cmp	r3, r2
 800b99a:	d91f      	bls.n	800b9dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b9a2:	e013      	b.n	800b9cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b9a4:	f107 030a 	add.w	r3, r7, #10
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6978      	ldr	r0, [r7, #20]
 800b9ac:	f000 f81b 	bl	800b9e6 <USBD_GetNextDesc>
 800b9b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	785b      	ldrb	r3, [r3, #1]
 800b9b6:	2b05      	cmp	r3, #5
 800b9b8:	d108      	bne.n	800b9cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	789b      	ldrb	r3, [r3, #2]
 800b9c2:	78fa      	ldrb	r2, [r7, #3]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d008      	beq.n	800b9da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	885b      	ldrh	r3, [r3, #2]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	897b      	ldrh	r3, [r7, #10]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d8e5      	bhi.n	800b9a4 <USBD_GetEpDesc+0x2e>
 800b9d8:	e000      	b.n	800b9dc <USBD_GetEpDesc+0x66>
          break;
 800b9da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b9dc:	693b      	ldr	r3, [r7, #16]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b085      	sub	sp, #20
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
 800b9ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	881b      	ldrh	r3, [r3, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ba10:	68fb      	ldr	r3, [r7, #12]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b087      	sub	sp, #28
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	3301      	adds	r3, #1
 800ba34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba3c:	8a3b      	ldrh	r3, [r7, #16]
 800ba3e:	021b      	lsls	r3, r3, #8
 800ba40:	b21a      	sxth	r2, r3
 800ba42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	b21b      	sxth	r3, r3
 800ba4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba4c:	89fb      	ldrh	r3, [r7, #14]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	371c      	adds	r7, #28
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
	...

0800ba5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba72:	2b40      	cmp	r3, #64	@ 0x40
 800ba74:	d005      	beq.n	800ba82 <USBD_StdDevReq+0x26>
 800ba76:	2b40      	cmp	r3, #64	@ 0x40
 800ba78:	d857      	bhi.n	800bb2a <USBD_StdDevReq+0xce>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00f      	beq.n	800ba9e <USBD_StdDevReq+0x42>
 800ba7e:	2b20      	cmp	r3, #32
 800ba80:	d153      	bne.n	800bb2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	32ae      	adds	r2, #174	@ 0xae
 800ba8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	6839      	ldr	r1, [r7, #0]
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	4798      	blx	r3
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba9c:	e04a      	b.n	800bb34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	2b09      	cmp	r3, #9
 800baa4:	d83b      	bhi.n	800bb1e <USBD_StdDevReq+0xc2>
 800baa6:	a201      	add	r2, pc, #4	@ (adr r2, 800baac <USBD_StdDevReq+0x50>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb01 	.word	0x0800bb01
 800bab0:	0800bb15 	.word	0x0800bb15
 800bab4:	0800bb1f 	.word	0x0800bb1f
 800bab8:	0800bb0b 	.word	0x0800bb0b
 800babc:	0800bb1f 	.word	0x0800bb1f
 800bac0:	0800badf 	.word	0x0800badf
 800bac4:	0800bad5 	.word	0x0800bad5
 800bac8:	0800bb1f 	.word	0x0800bb1f
 800bacc:	0800baf7 	.word	0x0800baf7
 800bad0:	0800bae9 	.word	0x0800bae9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fa3c 	bl	800bf54 <USBD_GetDescriptor>
          break;
 800badc:	e024      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fbcb 	bl	800c27c <USBD_SetAddress>
          break;
 800bae6:	e01f      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fc0a 	bl	800c304 <USBD_SetConfig>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
          break;
 800baf4:	e018      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fcad 	bl	800c458 <USBD_GetConfig>
          break;
 800bafe:	e013      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fcde 	bl	800c4c4 <USBD_GetStatus>
          break;
 800bb08:	e00e      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fd0d 	bl	800c52c <USBD_SetFeature>
          break;
 800bb12:	e009      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fd31 	bl	800c57e <USBD_ClrFeature>
          break;
 800bb1c:	e004      	b.n	800bb28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bb1e:	6839      	ldr	r1, [r7, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fd88 	bl	800c636 <USBD_CtlError>
          break;
 800bb26:	bf00      	nop
      }
      break;
 800bb28:	e004      	b.n	800bb34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fd82 	bl	800c636 <USBD_CtlError>
      break;
 800bb32:	bf00      	nop
  }

  return ret;
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop

0800bb40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb56:	2b40      	cmp	r3, #64	@ 0x40
 800bb58:	d005      	beq.n	800bb66 <USBD_StdItfReq+0x26>
 800bb5a:	2b40      	cmp	r3, #64	@ 0x40
 800bb5c:	d852      	bhi.n	800bc04 <USBD_StdItfReq+0xc4>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <USBD_StdItfReq+0x26>
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	d14e      	bne.n	800bc04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d840      	bhi.n	800bbf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	889b      	ldrh	r3, [r3, #4]
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d836      	bhi.n	800bbec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	889b      	ldrh	r3, [r3, #4]
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fedb 	bl	800b942 <USBD_CoreFindIF>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
 800bb92:	2bff      	cmp	r3, #255	@ 0xff
 800bb94:	d01d      	beq.n	800bbd2 <USBD_StdItfReq+0x92>
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d11a      	bne.n	800bbd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bb9c:	7bba      	ldrb	r2, [r7, #14]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	32ae      	adds	r2, #174	@ 0xae
 800bba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00f      	beq.n	800bbcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bbac:	7bba      	ldrb	r2, [r7, #14]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bbb4:	7bba      	ldrb	r2, [r7, #14]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	32ae      	adds	r2, #174	@ 0xae
 800bbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	4798      	blx	r3
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbca:	e004      	b.n	800bbd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bbd0:	e001      	b.n	800bbd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	88db      	ldrh	r3, [r3, #6]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d110      	bne.n	800bc00 <USBD_StdItfReq+0xc0>
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10d      	bne.n	800bc00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fdf1 	bl	800c7cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bbea:	e009      	b.n	800bc00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fd21 	bl	800c636 <USBD_CtlError>
          break;
 800bbf4:	e004      	b.n	800bc00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bbf6:	6839      	ldr	r1, [r7, #0]
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fd1c 	bl	800c636 <USBD_CtlError>
          break;
 800bbfe:	e000      	b.n	800bc02 <USBD_StdItfReq+0xc2>
          break;
 800bc00:	bf00      	nop
      }
      break;
 800bc02:	e004      	b.n	800bc0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fd15 	bl	800c636 <USBD_CtlError>
      break;
 800bc0c:	bf00      	nop
  }

  return ret;
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	889b      	ldrh	r3, [r3, #4]
 800bc2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc34:	2b40      	cmp	r3, #64	@ 0x40
 800bc36:	d007      	beq.n	800bc48 <USBD_StdEPReq+0x30>
 800bc38:	2b40      	cmp	r3, #64	@ 0x40
 800bc3a:	f200 817f 	bhi.w	800bf3c <USBD_StdEPReq+0x324>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d02a      	beq.n	800bc98 <USBD_StdEPReq+0x80>
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	f040 817a 	bne.w	800bf3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff fe85 	bl	800b95c <USBD_CoreFindEP>
 800bc52:	4603      	mov	r3, r0
 800bc54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc56:	7b7b      	ldrb	r3, [r7, #13]
 800bc58:	2bff      	cmp	r3, #255	@ 0xff
 800bc5a:	f000 8174 	beq.w	800bf46 <USBD_StdEPReq+0x32e>
 800bc5e:	7b7b      	ldrb	r3, [r7, #13]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f040 8170 	bne.w	800bf46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bc66:	7b7a      	ldrb	r2, [r7, #13]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bc6e:	7b7a      	ldrb	r2, [r7, #13]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	32ae      	adds	r2, #174	@ 0xae
 800bc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 8163 	beq.w	800bf46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc80:	7b7a      	ldrb	r2, [r7, #13]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	32ae      	adds	r2, #174	@ 0xae
 800bc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	6839      	ldr	r1, [r7, #0]
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	4798      	blx	r3
 800bc92:	4603      	mov	r3, r0
 800bc94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc96:	e156      	b.n	800bf46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	785b      	ldrb	r3, [r3, #1]
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	d008      	beq.n	800bcb2 <USBD_StdEPReq+0x9a>
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	f300 8145 	bgt.w	800bf30 <USBD_StdEPReq+0x318>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 809b 	beq.w	800bde2 <USBD_StdEPReq+0x1ca>
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d03c      	beq.n	800bd2a <USBD_StdEPReq+0x112>
 800bcb0:	e13e      	b.n	800bf30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d002      	beq.n	800bcc4 <USBD_StdEPReq+0xac>
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d016      	beq.n	800bcf0 <USBD_StdEPReq+0xd8>
 800bcc2:	e02c      	b.n	800bd1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcc4:	7bbb      	ldrb	r3, [r7, #14]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00d      	beq.n	800bce6 <USBD_StdEPReq+0xce>
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	2b80      	cmp	r3, #128	@ 0x80
 800bcce:	d00a      	beq.n	800bce6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 f9f5 	bl	800d0c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcda:	2180      	movs	r1, #128	@ 0x80
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 f9f1 	bl	800d0c4 <USBD_LL_StallEP>
 800bce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bce4:	e020      	b.n	800bd28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fca4 	bl	800c636 <USBD_CtlError>
              break;
 800bcee:	e01b      	b.n	800bd28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	885b      	ldrh	r3, [r3, #2]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10e      	bne.n	800bd16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00b      	beq.n	800bd16 <USBD_StdEPReq+0xfe>
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b80      	cmp	r3, #128	@ 0x80
 800bd02:	d008      	beq.n	800bd16 <USBD_StdEPReq+0xfe>
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	88db      	ldrh	r3, [r3, #6]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	4619      	mov	r1, r3
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f001 f9d7 	bl	800d0c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fd58 	bl	800c7cc <USBD_CtlSendStatus>

              break;
 800bd1c:	e004      	b.n	800bd28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fc88 	bl	800c636 <USBD_CtlError>
              break;
 800bd26:	bf00      	nop
          }
          break;
 800bd28:	e107      	b.n	800bf3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd30:	b2db      	uxtb	r3, r3
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d002      	beq.n	800bd3c <USBD_StdEPReq+0x124>
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d016      	beq.n	800bd68 <USBD_StdEPReq+0x150>
 800bd3a:	e04b      	b.n	800bdd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00d      	beq.n	800bd5e <USBD_StdEPReq+0x146>
 800bd42:	7bbb      	ldrb	r3, [r7, #14]
 800bd44:	2b80      	cmp	r3, #128	@ 0x80
 800bd46:	d00a      	beq.n	800bd5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 f9b9 	bl	800d0c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd52:	2180      	movs	r1, #128	@ 0x80
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 f9b5 	bl	800d0c4 <USBD_LL_StallEP>
 800bd5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd5c:	e040      	b.n	800bde0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fc68 	bl	800c636 <USBD_CtlError>
              break;
 800bd66:	e03b      	b.n	800bde0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	885b      	ldrh	r3, [r3, #2]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d136      	bne.n	800bdde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd7a:	7bbb      	ldrb	r3, [r7, #14]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f001 f9bf 	bl	800d102 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fd21 	bl	800c7cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd8a:	7bbb      	ldrb	r3, [r7, #14]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7ff fde4 	bl	800b95c <USBD_CoreFindEP>
 800bd94:	4603      	mov	r3, r0
 800bd96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd98:	7b7b      	ldrb	r3, [r7, #13]
 800bd9a:	2bff      	cmp	r3, #255	@ 0xff
 800bd9c:	d01f      	beq.n	800bdde <USBD_StdEPReq+0x1c6>
 800bd9e:	7b7b      	ldrb	r3, [r7, #13]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d11c      	bne.n	800bdde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bda4:	7b7a      	ldrb	r2, [r7, #13]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bdac:	7b7a      	ldrb	r2, [r7, #13]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	32ae      	adds	r2, #174	@ 0xae
 800bdb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bdbc:	7b7a      	ldrb	r2, [r7, #13]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	32ae      	adds	r2, #174	@ 0xae
 800bdc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	4798      	blx	r3
 800bdce:	4603      	mov	r3, r0
 800bdd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bdd2:	e004      	b.n	800bdde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fc2d 	bl	800c636 <USBD_CtlError>
              break;
 800bddc:	e000      	b.n	800bde0 <USBD_StdEPReq+0x1c8>
              break;
 800bdde:	bf00      	nop
          }
          break;
 800bde0:	e0ab      	b.n	800bf3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d002      	beq.n	800bdf4 <USBD_StdEPReq+0x1dc>
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d032      	beq.n	800be58 <USBD_StdEPReq+0x240>
 800bdf2:	e097      	b.n	800bf24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdf4:	7bbb      	ldrb	r3, [r7, #14]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d007      	beq.n	800be0a <USBD_StdEPReq+0x1f2>
 800bdfa:	7bbb      	ldrb	r3, [r7, #14]
 800bdfc:	2b80      	cmp	r3, #128	@ 0x80
 800bdfe:	d004      	beq.n	800be0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fc17 	bl	800c636 <USBD_CtlError>
                break;
 800be08:	e091      	b.n	800bf2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da0b      	bge.n	800be2a <USBD_StdEPReq+0x212>
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be18:	4613      	mov	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	3310      	adds	r3, #16
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	3304      	adds	r3, #4
 800be28:	e00b      	b.n	800be42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
 800be2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be30:	4613      	mov	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4413      	add	r3, r2
 800be40:	3304      	adds	r3, #4
 800be42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	2200      	movs	r2, #0
 800be48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2202      	movs	r2, #2
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fc61 	bl	800c718 <USBD_CtlSendData>
              break;
 800be56:	e06a      	b.n	800bf2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	da11      	bge.n	800be84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be60:	7bbb      	ldrb	r3, [r7, #14]
 800be62:	f003 020f 	and.w	r2, r3, #15
 800be66:	6879      	ldr	r1, [r7, #4]
 800be68:	4613      	mov	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	440b      	add	r3, r1
 800be72:	3324      	adds	r3, #36	@ 0x24
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d117      	bne.n	800beaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fbda 	bl	800c636 <USBD_CtlError>
                  break;
 800be82:	e054      	b.n	800bf2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	f003 020f 	and.w	r2, r3, #15
 800be8a:	6879      	ldr	r1, [r7, #4]
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	440b      	add	r3, r1
 800be96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d104      	bne.n	800beaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 fbc7 	bl	800c636 <USBD_CtlError>
                  break;
 800bea8:	e041      	b.n	800bf2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800beaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da0b      	bge.n	800beca <USBD_StdEPReq+0x2b2>
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	3310      	adds	r3, #16
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	4413      	add	r3, r2
 800bec6:	3304      	adds	r3, #4
 800bec8:	e00b      	b.n	800bee2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800beca:	7bbb      	ldrb	r3, [r7, #14]
 800becc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bed0:	4613      	mov	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	3304      	adds	r3, #4
 800bee2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bee4:	7bbb      	ldrb	r3, [r7, #14]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <USBD_StdEPReq+0x2d8>
 800beea:	7bbb      	ldrb	r3, [r7, #14]
 800beec:	2b80      	cmp	r3, #128	@ 0x80
 800beee:	d103      	bne.n	800bef8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	e00e      	b.n	800bf16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 f91f 	bl	800d140 <USBD_LL_IsStallEP>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e002      	b.n	800bf16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fbfb 	bl	800c718 <USBD_CtlSendData>
              break;
 800bf22:	e004      	b.n	800bf2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fb85 	bl	800c636 <USBD_CtlError>
              break;
 800bf2c:	bf00      	nop
          }
          break;
 800bf2e:	e004      	b.n	800bf3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fb7f 	bl	800c636 <USBD_CtlError>
          break;
 800bf38:	bf00      	nop
      }
      break;
 800bf3a:	e005      	b.n	800bf48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fb79 	bl	800c636 <USBD_CtlError>
      break;
 800bf44:	e000      	b.n	800bf48 <USBD_StdEPReq+0x330>
      break;
 800bf46:	bf00      	nop
  }

  return ret;
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
	...

0800bf54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf66:	2300      	movs	r3, #0
 800bf68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	2b0e      	cmp	r3, #14
 800bf76:	f200 8152 	bhi.w	800c21e <USBD_GetDescriptor+0x2ca>
 800bf7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf80 <USBD_GetDescriptor+0x2c>)
 800bf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf80:	0800bff1 	.word	0x0800bff1
 800bf84:	0800c009 	.word	0x0800c009
 800bf88:	0800c049 	.word	0x0800c049
 800bf8c:	0800c21f 	.word	0x0800c21f
 800bf90:	0800c21f 	.word	0x0800c21f
 800bf94:	0800c1bf 	.word	0x0800c1bf
 800bf98:	0800c1eb 	.word	0x0800c1eb
 800bf9c:	0800c21f 	.word	0x0800c21f
 800bfa0:	0800c21f 	.word	0x0800c21f
 800bfa4:	0800c21f 	.word	0x0800c21f
 800bfa8:	0800c21f 	.word	0x0800c21f
 800bfac:	0800c21f 	.word	0x0800c21f
 800bfb0:	0800c21f 	.word	0x0800c21f
 800bfb4:	0800c21f 	.word	0x0800c21f
 800bfb8:	0800bfbd 	.word	0x0800bfbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfc2:	69db      	ldr	r3, [r3, #28]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfce:	69db      	ldr	r3, [r3, #28]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	7c12      	ldrb	r2, [r2, #16]
 800bfd4:	f107 0108 	add.w	r1, r7, #8
 800bfd8:	4610      	mov	r0, r2
 800bfda:	4798      	blx	r3
 800bfdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfde:	e126      	b.n	800c22e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfe0:	6839      	ldr	r1, [r7, #0]
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 fb27 	bl	800c636 <USBD_CtlError>
        err++;
 800bfe8:	7afb      	ldrb	r3, [r7, #11]
 800bfea:	3301      	adds	r3, #1
 800bfec:	72fb      	strb	r3, [r7, #11]
      break;
 800bfee:	e11e      	b.n	800c22e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	7c12      	ldrb	r2, [r2, #16]
 800bffc:	f107 0108 	add.w	r1, r7, #8
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
 800c004:	60f8      	str	r0, [r7, #12]
      break;
 800c006:	e112      	b.n	800c22e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	7c1b      	ldrb	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10d      	bne.n	800c02c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c018:	f107 0208 	add.w	r2, r7, #8
 800c01c:	4610      	mov	r0, r2
 800c01e:	4798      	blx	r3
 800c020:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3301      	adds	r3, #1
 800c026:	2202      	movs	r2, #2
 800c028:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c02a:	e100      	b.n	800c22e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c034:	f107 0208 	add.w	r2, r7, #8
 800c038:	4610      	mov	r0, r2
 800c03a:	4798      	blx	r3
 800c03c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3301      	adds	r3, #1
 800c042:	2202      	movs	r2, #2
 800c044:	701a      	strb	r2, [r3, #0]
      break;
 800c046:	e0f2      	b.n	800c22e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	885b      	ldrh	r3, [r3, #2]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b05      	cmp	r3, #5
 800c050:	f200 80ac 	bhi.w	800c1ac <USBD_GetDescriptor+0x258>
 800c054:	a201      	add	r2, pc, #4	@ (adr r2, 800c05c <USBD_GetDescriptor+0x108>)
 800c056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05a:	bf00      	nop
 800c05c:	0800c075 	.word	0x0800c075
 800c060:	0800c0a9 	.word	0x0800c0a9
 800c064:	0800c0dd 	.word	0x0800c0dd
 800c068:	0800c111 	.word	0x0800c111
 800c06c:	0800c145 	.word	0x0800c145
 800c070:	0800c179 	.word	0x0800c179
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00b      	beq.n	800c098 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	7c12      	ldrb	r2, [r2, #16]
 800c08c:	f107 0108 	add.w	r1, r7, #8
 800c090:	4610      	mov	r0, r2
 800c092:	4798      	blx	r3
 800c094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c096:	e091      	b.n	800c1bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 facb 	bl	800c636 <USBD_CtlError>
            err++;
 800c0a0:	7afb      	ldrb	r3, [r7, #11]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0a6:	e089      	b.n	800c1bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00b      	beq.n	800c0cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	7c12      	ldrb	r2, [r2, #16]
 800c0c0:	f107 0108 	add.w	r1, r7, #8
 800c0c4:	4610      	mov	r0, r2
 800c0c6:	4798      	blx	r3
 800c0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ca:	e077      	b.n	800c1bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fab1 	bl	800c636 <USBD_CtlError>
            err++;
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0da:	e06f      	b.n	800c1bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	7c12      	ldrb	r2, [r2, #16]
 800c0f4:	f107 0108 	add.w	r1, r7, #8
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	4798      	blx	r3
 800c0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0fe:	e05d      	b.n	800c1bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa97 	bl	800c636 <USBD_CtlError>
            err++;
 800c108:	7afb      	ldrb	r3, [r7, #11]
 800c10a:	3301      	adds	r3, #1
 800c10c:	72fb      	strb	r3, [r7, #11]
          break;
 800c10e:	e055      	b.n	800c1bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	7c12      	ldrb	r2, [r2, #16]
 800c128:	f107 0108 	add.w	r1, r7, #8
 800c12c:	4610      	mov	r0, r2
 800c12e:	4798      	blx	r3
 800c130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c132:	e043      	b.n	800c1bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fa7d 	bl	800c636 <USBD_CtlError>
            err++;
 800c13c:	7afb      	ldrb	r3, [r7, #11]
 800c13e:	3301      	adds	r3, #1
 800c140:	72fb      	strb	r3, [r7, #11]
          break;
 800c142:	e03b      	b.n	800c1bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00b      	beq.n	800c168 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	7c12      	ldrb	r2, [r2, #16]
 800c15c:	f107 0108 	add.w	r1, r7, #8
 800c160:	4610      	mov	r0, r2
 800c162:	4798      	blx	r3
 800c164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c166:	e029      	b.n	800c1bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa63 	bl	800c636 <USBD_CtlError>
            err++;
 800c170:	7afb      	ldrb	r3, [r7, #11]
 800c172:	3301      	adds	r3, #1
 800c174:	72fb      	strb	r3, [r7, #11]
          break;
 800c176:	e021      	b.n	800c1bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c18a:	699b      	ldr	r3, [r3, #24]
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	7c12      	ldrb	r2, [r2, #16]
 800c190:	f107 0108 	add.w	r1, r7, #8
 800c194:	4610      	mov	r0, r2
 800c196:	4798      	blx	r3
 800c198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c19a:	e00f      	b.n	800c1bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fa49 	bl	800c636 <USBD_CtlError>
            err++;
 800c1a4:	7afb      	ldrb	r3, [r7, #11]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1aa:	e007      	b.n	800c1bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fa41 	bl	800c636 <USBD_CtlError>
          err++;
 800c1b4:	7afb      	ldrb	r3, [r7, #11]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c1ba:	bf00      	nop
      }
      break;
 800c1bc:	e037      	b.n	800c22e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	7c1b      	ldrb	r3, [r3, #16]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d109      	bne.n	800c1da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ce:	f107 0208 	add.w	r2, r7, #8
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	4798      	blx	r3
 800c1d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1d8:	e029      	b.n	800c22e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fa2a 	bl	800c636 <USBD_CtlError>
        err++;
 800c1e2:	7afb      	ldrb	r3, [r7, #11]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c1e8:	e021      	b.n	800c22e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7c1b      	ldrb	r3, [r3, #16]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10d      	bne.n	800c20e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fa:	f107 0208 	add.w	r2, r7, #8
 800c1fe:	4610      	mov	r0, r2
 800c200:	4798      	blx	r3
 800c202:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3301      	adds	r3, #1
 800c208:	2207      	movs	r2, #7
 800c20a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c20c:	e00f      	b.n	800c22e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fa10 	bl	800c636 <USBD_CtlError>
        err++;
 800c216:	7afb      	ldrb	r3, [r7, #11]
 800c218:	3301      	adds	r3, #1
 800c21a:	72fb      	strb	r3, [r7, #11]
      break;
 800c21c:	e007      	b.n	800c22e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fa08 	bl	800c636 <USBD_CtlError>
      err++;
 800c226:	7afb      	ldrb	r3, [r7, #11]
 800c228:	3301      	adds	r3, #1
 800c22a:	72fb      	strb	r3, [r7, #11]
      break;
 800c22c:	bf00      	nop
  }

  if (err != 0U)
 800c22e:	7afb      	ldrb	r3, [r7, #11]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d11e      	bne.n	800c272 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	88db      	ldrh	r3, [r3, #6]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d016      	beq.n	800c26a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c23c:	893b      	ldrh	r3, [r7, #8]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00e      	beq.n	800c260 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	88da      	ldrh	r2, [r3, #6]
 800c246:	893b      	ldrh	r3, [r7, #8]
 800c248:	4293      	cmp	r3, r2
 800c24a:	bf28      	it	cs
 800c24c:	4613      	movcs	r3, r2
 800c24e:	b29b      	uxth	r3, r3
 800c250:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c252:	893b      	ldrh	r3, [r7, #8]
 800c254:	461a      	mov	r2, r3
 800c256:	68f9      	ldr	r1, [r7, #12]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fa5d 	bl	800c718 <USBD_CtlSendData>
 800c25e:	e009      	b.n	800c274 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f9e7 	bl	800c636 <USBD_CtlError>
 800c268:	e004      	b.n	800c274 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 faae 	bl	800c7cc <USBD_CtlSendStatus>
 800c270:	e000      	b.n	800c274 <USBD_GetDescriptor+0x320>
    return;
 800c272:	bf00      	nop
  }
}
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop

0800c27c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	889b      	ldrh	r3, [r3, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d131      	bne.n	800c2f2 <USBD_SetAddress+0x76>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	88db      	ldrh	r3, [r3, #6]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d12d      	bne.n	800c2f2 <USBD_SetAddress+0x76>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c29c:	d829      	bhi.n	800c2f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	885b      	ldrh	r3, [r3, #2]
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	d104      	bne.n	800c2c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f9bc 	bl	800c636 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2be:	e01d      	b.n	800c2fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7bfa      	ldrb	r2, [r7, #15]
 800c2c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 ff63 	bl	800d198 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fa7a 	bl	800c7cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d004      	beq.n	800c2e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e6:	e009      	b.n	800c2fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f0:	e004      	b.n	800c2fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c2f2:	6839      	ldr	r1, [r7, #0]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f99e 	bl	800c636 <USBD_CtlError>
  }
}
 800c2fa:	bf00      	nop
 800c2fc:	bf00      	nop
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	885b      	ldrh	r3, [r3, #2]
 800c316:	b2da      	uxtb	r2, r3
 800c318:	4b4e      	ldr	r3, [pc, #312]	@ (800c454 <USBD_SetConfig+0x150>)
 800c31a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c31c:	4b4d      	ldr	r3, [pc, #308]	@ (800c454 <USBD_SetConfig+0x150>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d905      	bls.n	800c330 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f985 	bl	800c636 <USBD_CtlError>
    return USBD_FAIL;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e08c      	b.n	800c44a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d002      	beq.n	800c342 <USBD_SetConfig+0x3e>
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	d029      	beq.n	800c394 <USBD_SetConfig+0x90>
 800c340:	e075      	b.n	800c42e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c342:	4b44      	ldr	r3, [pc, #272]	@ (800c454 <USBD_SetConfig+0x150>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d020      	beq.n	800c38c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c34a:	4b42      	ldr	r3, [pc, #264]	@ (800c454 <USBD_SetConfig+0x150>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c354:	4b3f      	ldr	r3, [pc, #252]	@ (800c454 <USBD_SetConfig+0x150>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	4619      	mov	r1, r3
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7fe ffb9 	bl	800b2d2 <USBD_SetClassConfig>
 800c360:	4603      	mov	r3, r0
 800c362:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c364:	7bfb      	ldrb	r3, [r7, #15]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d008      	beq.n	800c37c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f962 	bl	800c636 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2202      	movs	r2, #2
 800c376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c37a:	e065      	b.n	800c448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 fa25 	bl	800c7cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2203      	movs	r2, #3
 800c386:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c38a:	e05d      	b.n	800c448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fa1d 	bl	800c7cc <USBD_CtlSendStatus>
      break;
 800c392:	e059      	b.n	800c448 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c394:	4b2f      	ldr	r3, [pc, #188]	@ (800c454 <USBD_SetConfig+0x150>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d112      	bne.n	800c3c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2202      	movs	r2, #2
 800c3a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c3a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c454 <USBD_SetConfig+0x150>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3ae:	4b29      	ldr	r3, [pc, #164]	@ (800c454 <USBD_SetConfig+0x150>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7fe ffa8 	bl	800b30a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fa06 	bl	800c7cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3c0:	e042      	b.n	800c448 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c3c2:	4b24      	ldr	r3, [pc, #144]	@ (800c454 <USBD_SetConfig+0x150>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d02a      	beq.n	800c426 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7fe ff96 	bl	800b30a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c3de:	4b1d      	ldr	r3, [pc, #116]	@ (800c454 <USBD_SetConfig+0x150>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c454 <USBD_SetConfig+0x150>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7fe ff6f 	bl	800b2d2 <USBD_SetClassConfig>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00f      	beq.n	800c41e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 f918 	bl	800c636 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	4619      	mov	r1, r3
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7fe ff7b 	bl	800b30a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c41c:	e014      	b.n	800c448 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 f9d4 	bl	800c7cc <USBD_CtlSendStatus>
      break;
 800c424:	e010      	b.n	800c448 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f9d0 	bl	800c7cc <USBD_CtlSendStatus>
      break;
 800c42c:	e00c      	b.n	800c448 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c42e:	6839      	ldr	r1, [r7, #0]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f900 	bl	800c636 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c436:	4b07      	ldr	r3, [pc, #28]	@ (800c454 <USBD_SetConfig+0x150>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	4619      	mov	r1, r3
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7fe ff64 	bl	800b30a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c442:	2303      	movs	r3, #3
 800c444:	73fb      	strb	r3, [r7, #15]
      break;
 800c446:	bf00      	nop
  }

  return ret;
 800c448:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20000554 	.word	0x20000554

0800c458 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	88db      	ldrh	r3, [r3, #6]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d004      	beq.n	800c474 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c46a:	6839      	ldr	r1, [r7, #0]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f8e2 	bl	800c636 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c472:	e023      	b.n	800c4bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	dc02      	bgt.n	800c486 <USBD_GetConfig+0x2e>
 800c480:	2b00      	cmp	r3, #0
 800c482:	dc03      	bgt.n	800c48c <USBD_GetConfig+0x34>
 800c484:	e015      	b.n	800c4b2 <USBD_GetConfig+0x5a>
 800c486:	2b03      	cmp	r3, #3
 800c488:	d00b      	beq.n	800c4a2 <USBD_GetConfig+0x4a>
 800c48a:	e012      	b.n	800c4b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	3308      	adds	r3, #8
 800c496:	2201      	movs	r2, #1
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f93c 	bl	800c718 <USBD_CtlSendData>
        break;
 800c4a0:	e00c      	b.n	800c4bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f934 	bl	800c718 <USBD_CtlSendData>
        break;
 800c4b0:	e004      	b.n	800c4bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f8be 	bl	800c636 <USBD_CtlError>
        break;
 800c4ba:	bf00      	nop
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d81e      	bhi.n	800c51a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	88db      	ldrh	r3, [r3, #6]
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d004      	beq.n	800c4ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f8a5 	bl	800c636 <USBD_CtlError>
        break;
 800c4ec:	e01a      	b.n	800c524 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	f043 0202 	orr.w	r2, r3, #2
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	330c      	adds	r3, #12
 800c50e:	2202      	movs	r2, #2
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f900 	bl	800c718 <USBD_CtlSendData>
      break;
 800c518:	e004      	b.n	800c524 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f88a 	bl	800c636 <USBD_CtlError>
      break;
 800c522:	bf00      	nop
  }
}
 800c524:	bf00      	nop
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	885b      	ldrh	r3, [r3, #2]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d107      	bne.n	800c54e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f940 	bl	800c7cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c54c:	e013      	b.n	800c576 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	885b      	ldrh	r3, [r3, #2]
 800c552:	2b02      	cmp	r3, #2
 800c554:	d10b      	bne.n	800c56e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	889b      	ldrh	r3, [r3, #4]
 800c55a:	0a1b      	lsrs	r3, r3, #8
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 f930 	bl	800c7cc <USBD_CtlSendStatus>
}
 800c56c:	e003      	b.n	800c576 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f860 	bl	800c636 <USBD_CtlError>
}
 800c576:	bf00      	nop
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b082      	sub	sp, #8
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	3b01      	subs	r3, #1
 800c592:	2b02      	cmp	r3, #2
 800c594:	d80b      	bhi.n	800c5ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	885b      	ldrh	r3, [r3, #2]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d10c      	bne.n	800c5b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f910 	bl	800c7cc <USBD_CtlSendStatus>
      }
      break;
 800c5ac:	e004      	b.n	800c5b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f840 	bl	800c636 <USBD_CtlError>
      break;
 800c5b6:	e000      	b.n	800c5ba <USBD_ClrFeature+0x3c>
      break;
 800c5b8:	bf00      	nop
  }
}
 800c5ba:	bf00      	nop
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
 800c5ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	781a      	ldrb	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3301      	adds	r3, #1
 800c5dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	781a      	ldrb	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7ff fa16 	bl	800ba1e <SWAPBYTE>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3301      	adds	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f7ff fa09 	bl	800ba1e <SWAPBYTE>
 800c60c:	4603      	mov	r3, r0
 800c60e:	461a      	mov	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3301      	adds	r3, #1
 800c618:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3301      	adds	r3, #1
 800c61e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f7ff f9fc 	bl	800ba1e <SWAPBYTE>
 800c626:	4603      	mov	r3, r0
 800c628:	461a      	mov	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	80da      	strh	r2, [r3, #6]
}
 800c62e:	bf00      	nop
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c640:	2180      	movs	r1, #128	@ 0x80
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fd3e 	bl	800d0c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c648:	2100      	movs	r1, #0
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fd3a 	bl	800d0c4 <USBD_LL_StallEP>
}
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d036      	beq.n	800c6dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c672:	6938      	ldr	r0, [r7, #16]
 800c674:	f000 f836 	bl	800c6e4 <USBD_GetLen>
 800c678:	4603      	mov	r3, r0
 800c67a:	3301      	adds	r3, #1
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	b29a      	uxth	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c686:	7dfb      	ldrb	r3, [r7, #23]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	4413      	add	r3, r2
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	7812      	ldrb	r2, [r2, #0]
 800c690:	701a      	strb	r2, [r3, #0]
  idx++;
 800c692:	7dfb      	ldrb	r3, [r7, #23]
 800c694:	3301      	adds	r3, #1
 800c696:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c698:	7dfb      	ldrb	r3, [r7, #23]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	4413      	add	r3, r2
 800c69e:	2203      	movs	r2, #3
 800c6a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c6a8:	e013      	b.n	800c6d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c6aa:	7dfb      	ldrb	r3, [r7, #23]
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	693a      	ldr	r2, [r7, #16]
 800c6b2:	7812      	ldrb	r2, [r2, #0]
 800c6b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	613b      	str	r3, [r7, #16]
    idx++;
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	68ba      	ldr	r2, [r7, #8]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1e7      	bne.n	800c6aa <USBD_GetString+0x52>
 800c6da:	e000      	b.n	800c6de <USBD_GetString+0x86>
    return;
 800c6dc:	bf00      	nop
  }
}
 800c6de:	3718      	adds	r7, #24
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c6f4:	e005      	b.n	800c702 <USBD_GetLen+0x1e>
  {
    len++;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	3301      	adds	r3, #1
 800c700:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1f5      	bne.n	800c6f6 <USBD_GetLen+0x12>
  }

  return len;
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3714      	adds	r7, #20
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2202      	movs	r2, #2
 800c728:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	2100      	movs	r1, #0
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 fd49 	bl	800d1d6 <USBD_LL_Transmit>

  return USBD_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b084      	sub	sp, #16
 800c752:	af00      	add	r7, sp, #0
 800c754:	60f8      	str	r0, [r7, #12]
 800c756:	60b9      	str	r1, [r7, #8]
 800c758:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	2100      	movs	r1, #0
 800c760:	68f8      	ldr	r0, [r7, #12]
 800c762:	f000 fd38 	bl	800d1d6 <USBD_LL_Transmit>

  return USBD_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2203      	movs	r2, #3
 800c780:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	2100      	movs	r1, #0
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 fd3c 	bl	800d218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	60f8      	str	r0, [r7, #12]
 800c7b2:	60b9      	str	r1, [r7, #8]
 800c7b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 fd2b 	bl	800d218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fcf7 	bl	800d1d6 <USBD_LL_Transmit>

  return USBD_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3708      	adds	r7, #8
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2205      	movs	r2, #5
 800c7fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c802:	2300      	movs	r3, #0
 800c804:	2200      	movs	r2, #0
 800c806:	2100      	movs	r1, #0
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fd05 	bl	800d218 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c818:	b480      	push	{r7}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	4613      	mov	r3, r2
 800c824:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c826:	2301      	movs	r3, #1
 800c828:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c82e:	4b1f      	ldr	r3, [pc, #124]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c830:	7a5b      	ldrb	r3, [r3, #9]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	d131      	bne.n	800c89c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c838:	4b1c      	ldr	r3, [pc, #112]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c83a:	7a5b      	ldrb	r3, [r3, #9]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	461a      	mov	r2, r3
 800c840:	4b1a      	ldr	r3, [pc, #104]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c842:	2100      	movs	r1, #0
 800c844:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c846:	4b19      	ldr	r3, [pc, #100]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c848:	7a5b      	ldrb	r3, [r3, #9]
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	4a17      	ldr	r2, [pc, #92]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c856:	4b15      	ldr	r3, [pc, #84]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c858:	7a5b      	ldrb	r3, [r3, #9]
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	461a      	mov	r2, r3
 800c85e:	4b13      	ldr	r3, [pc, #76]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c860:	4413      	add	r3, r2
 800c862:	79fa      	ldrb	r2, [r7, #7]
 800c864:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c866:	4b11      	ldr	r3, [pc, #68]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c868:	7a5b      	ldrb	r3, [r3, #9]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	1c5a      	adds	r2, r3, #1
 800c86e:	b2d1      	uxtb	r1, r2
 800c870:	4a0e      	ldr	r2, [pc, #56]	@ (800c8ac <FATFS_LinkDriverEx+0x94>)
 800c872:	7251      	strb	r1, [r2, #9]
 800c874:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c876:	7dbb      	ldrb	r3, [r7, #22]
 800c878:	3330      	adds	r3, #48	@ 0x30
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	3301      	adds	r3, #1
 800c884:	223a      	movs	r2, #58	@ 0x3a
 800c886:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	3302      	adds	r3, #2
 800c88c:	222f      	movs	r2, #47	@ 0x2f
 800c88e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	3303      	adds	r3, #3
 800c894:	2200      	movs	r2, #0
 800c896:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	20000558 	.word	0x20000558

0800c8b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff ffaa 	bl	800c818 <FATFS_LinkDriverEx>
 800c8c4:	4603      	mov	r3, r0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
	...

0800c8d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	4912      	ldr	r1, [pc, #72]	@ (800c920 <MX_USB_DEVICE_Init+0x50>)
 800c8d8:	4812      	ldr	r0, [pc, #72]	@ (800c924 <MX_USB_DEVICE_Init+0x54>)
 800c8da:	f7fe fc7d 	bl	800b1d8 <USBD_Init>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c8e4:	f7f5 f80e 	bl	8001904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c8e8:	490f      	ldr	r1, [pc, #60]	@ (800c928 <MX_USB_DEVICE_Init+0x58>)
 800c8ea:	480e      	ldr	r0, [pc, #56]	@ (800c924 <MX_USB_DEVICE_Init+0x54>)
 800c8ec:	f7fe fca4 	bl	800b238 <USBD_RegisterClass>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c8f6:	f7f5 f805 	bl	8001904 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c8fa:	490c      	ldr	r1, [pc, #48]	@ (800c92c <MX_USB_DEVICE_Init+0x5c>)
 800c8fc:	4809      	ldr	r0, [pc, #36]	@ (800c924 <MX_USB_DEVICE_Init+0x54>)
 800c8fe:	f7fe fbdb 	bl	800b0b8 <USBD_CDC_RegisterInterface>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c908:	f7f4 fffc 	bl	8001904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c90c:	4805      	ldr	r0, [pc, #20]	@ (800c924 <MX_USB_DEVICE_Init+0x54>)
 800c90e:	f7fe fcc9 	bl	800b2a4 <USBD_Start>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d001      	beq.n	800c91c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c918:	f7f4 fff4 	bl	8001904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c91c:	bf00      	nop
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	200000ac 	.word	0x200000ac
 800c924:	20000564 	.word	0x20000564
 800c928:	20000018 	.word	0x20000018
 800c92c:	20000098 	.word	0x20000098

0800c930 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c934:	2200      	movs	r2, #0
 800c936:	4905      	ldr	r1, [pc, #20]	@ (800c94c <CDC_Init_FS+0x1c>)
 800c938:	4805      	ldr	r0, [pc, #20]	@ (800c950 <CDC_Init_FS+0x20>)
 800c93a:	f7fe fbd7 	bl	800b0ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c93e:	4905      	ldr	r1, [pc, #20]	@ (800c954 <CDC_Init_FS+0x24>)
 800c940:	4803      	ldr	r0, [pc, #12]	@ (800c950 <CDC_Init_FS+0x20>)
 800c942:	f7fe fbf5 	bl	800b130 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c946:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c948:	4618      	mov	r0, r3
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	20001040 	.word	0x20001040
 800c950:	20000564 	.word	0x20000564
 800c954:	20000840 	.word	0x20000840

0800c958 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c958:	b480      	push	{r7}
 800c95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c95c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c95e:	4618      	mov	r0, r3
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	4603      	mov	r3, r0
 800c970:	6039      	str	r1, [r7, #0]
 800c972:	71fb      	strb	r3, [r7, #7]
 800c974:	4613      	mov	r3, r2
 800c976:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c978:	79fb      	ldrb	r3, [r7, #7]
 800c97a:	2b23      	cmp	r3, #35	@ 0x23
 800c97c:	d84a      	bhi.n	800ca14 <CDC_Control_FS+0xac>
 800c97e:	a201      	add	r2, pc, #4	@ (adr r2, 800c984 <CDC_Control_FS+0x1c>)
 800c980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c984:	0800ca15 	.word	0x0800ca15
 800c988:	0800ca15 	.word	0x0800ca15
 800c98c:	0800ca15 	.word	0x0800ca15
 800c990:	0800ca15 	.word	0x0800ca15
 800c994:	0800ca15 	.word	0x0800ca15
 800c998:	0800ca15 	.word	0x0800ca15
 800c99c:	0800ca15 	.word	0x0800ca15
 800c9a0:	0800ca15 	.word	0x0800ca15
 800c9a4:	0800ca15 	.word	0x0800ca15
 800c9a8:	0800ca15 	.word	0x0800ca15
 800c9ac:	0800ca15 	.word	0x0800ca15
 800c9b0:	0800ca15 	.word	0x0800ca15
 800c9b4:	0800ca15 	.word	0x0800ca15
 800c9b8:	0800ca15 	.word	0x0800ca15
 800c9bc:	0800ca15 	.word	0x0800ca15
 800c9c0:	0800ca15 	.word	0x0800ca15
 800c9c4:	0800ca15 	.word	0x0800ca15
 800c9c8:	0800ca15 	.word	0x0800ca15
 800c9cc:	0800ca15 	.word	0x0800ca15
 800c9d0:	0800ca15 	.word	0x0800ca15
 800c9d4:	0800ca15 	.word	0x0800ca15
 800c9d8:	0800ca15 	.word	0x0800ca15
 800c9dc:	0800ca15 	.word	0x0800ca15
 800c9e0:	0800ca15 	.word	0x0800ca15
 800c9e4:	0800ca15 	.word	0x0800ca15
 800c9e8:	0800ca15 	.word	0x0800ca15
 800c9ec:	0800ca15 	.word	0x0800ca15
 800c9f0:	0800ca15 	.word	0x0800ca15
 800c9f4:	0800ca15 	.word	0x0800ca15
 800c9f8:	0800ca15 	.word	0x0800ca15
 800c9fc:	0800ca15 	.word	0x0800ca15
 800ca00:	0800ca15 	.word	0x0800ca15
 800ca04:	0800ca15 	.word	0x0800ca15
 800ca08:	0800ca15 	.word	0x0800ca15
 800ca0c:	0800ca15 	.word	0x0800ca15
 800ca10:	0800ca15 	.word	0x0800ca15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca14:	bf00      	nop
  }

  return (USBD_OK);
 800ca16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	4805      	ldr	r0, [pc, #20]	@ (800ca48 <CDC_Receive_FS+0x24>)
 800ca32:	f7fe fb7d 	bl	800b130 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ca36:	4804      	ldr	r0, [pc, #16]	@ (800ca48 <CDC_Receive_FS+0x24>)
 800ca38:	f7fe fb98 	bl	800b16c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ca3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	20000564 	.word	0x20000564

0800ca4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	4613      	mov	r3, r2
 800ca58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ca5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
	...

0800ca70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	6039      	str	r1, [r7, #0]
 800ca7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2212      	movs	r2, #18
 800ca80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca82:	4b03      	ldr	r3, [pc, #12]	@ (800ca90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	200000cc 	.word	0x200000cc

0800ca94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	6039      	str	r1, [r7, #0]
 800ca9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	2204      	movs	r2, #4
 800caa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800caa6:	4b03      	ldr	r3, [pc, #12]	@ (800cab4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr
 800cab4:	200000ec 	.word	0x200000ec

0800cab8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	4603      	mov	r3, r0
 800cac0:	6039      	str	r1, [r7, #0]
 800cac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cac4:	79fb      	ldrb	r3, [r7, #7]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d105      	bne.n	800cad6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	4907      	ldr	r1, [pc, #28]	@ (800caec <USBD_FS_ProductStrDescriptor+0x34>)
 800cace:	4808      	ldr	r0, [pc, #32]	@ (800caf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cad0:	f7ff fdc2 	bl	800c658 <USBD_GetString>
 800cad4:	e004      	b.n	800cae0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	4904      	ldr	r1, [pc, #16]	@ (800caec <USBD_FS_ProductStrDescriptor+0x34>)
 800cada:	4805      	ldr	r0, [pc, #20]	@ (800caf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cadc:	f7ff fdbc 	bl	800c658 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cae0:	4b02      	ldr	r3, [pc, #8]	@ (800caec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20001840 	.word	0x20001840
 800caf0:	0800dd54 	.word	0x0800dd54

0800caf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	6039      	str	r1, [r7, #0]
 800cafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	4904      	ldr	r1, [pc, #16]	@ (800cb14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb04:	4804      	ldr	r0, [pc, #16]	@ (800cb18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb06:	f7ff fda7 	bl	800c658 <USBD_GetString>
  return USBD_StrDesc;
 800cb0a:	4b02      	ldr	r3, [pc, #8]	@ (800cb14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	20001840 	.word	0x20001840
 800cb18:	0800dd68 	.word	0x0800dd68

0800cb1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	4603      	mov	r3, r0
 800cb24:	6039      	str	r1, [r7, #0]
 800cb26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	221a      	movs	r2, #26
 800cb2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb2e:	f000 f855 	bl	800cbdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb32:	4b02      	ldr	r3, [pc, #8]	@ (800cb3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	200000f0 	.word	0x200000f0

0800cb40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	4603      	mov	r3, r0
 800cb48:	6039      	str	r1, [r7, #0]
 800cb4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb4c:	79fb      	ldrb	r3, [r7, #7]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d105      	bne.n	800cb5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	4907      	ldr	r1, [pc, #28]	@ (800cb74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb56:	4808      	ldr	r0, [pc, #32]	@ (800cb78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb58:	f7ff fd7e 	bl	800c658 <USBD_GetString>
 800cb5c:	e004      	b.n	800cb68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	4904      	ldr	r1, [pc, #16]	@ (800cb74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb62:	4805      	ldr	r0, [pc, #20]	@ (800cb78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb64:	f7ff fd78 	bl	800c658 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb68:	4b02      	ldr	r3, [pc, #8]	@ (800cb74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	20001840 	.word	0x20001840
 800cb78:	0800dd7c 	.word	0x0800dd7c

0800cb7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	4603      	mov	r3, r0
 800cb84:	6039      	str	r1, [r7, #0]
 800cb86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb88:	79fb      	ldrb	r3, [r7, #7]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d105      	bne.n	800cb9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	4907      	ldr	r1, [pc, #28]	@ (800cbb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb92:	4808      	ldr	r0, [pc, #32]	@ (800cbb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb94:	f7ff fd60 	bl	800c658 <USBD_GetString>
 800cb98:	e004      	b.n	800cba4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	4904      	ldr	r1, [pc, #16]	@ (800cbb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb9e:	4805      	ldr	r0, [pc, #20]	@ (800cbb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cba0:	f7ff fd5a 	bl	800c658 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cba4:	4b02      	ldr	r3, [pc, #8]	@ (800cbb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	20001840 	.word	0x20001840
 800cbb4:	0800dd88 	.word	0x0800dd88

0800cbb8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	6039      	str	r1, [r7, #0]
 800cbc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	220c      	movs	r2, #12
 800cbc8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cbca:	4b03      	ldr	r3, [pc, #12]	@ (800cbd8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr
 800cbd8:	200000e0 	.word	0x200000e0

0800cbdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	@ (800cc20 <Get_SerialNum+0x44>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	@ (800cc24 <Get_SerialNum+0x48>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cbee:	4b0e      	ldr	r3, [pc, #56]	@ (800cc28 <Get_SerialNum+0x4c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d009      	beq.n	800cc16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc02:	2208      	movs	r2, #8
 800cc04:	4909      	ldr	r1, [pc, #36]	@ (800cc2c <Get_SerialNum+0x50>)
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f814 	bl	800cc34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc0c:	2204      	movs	r2, #4
 800cc0e:	4908      	ldr	r1, [pc, #32]	@ (800cc30 <Get_SerialNum+0x54>)
 800cc10:	68b8      	ldr	r0, [r7, #8]
 800cc12:	f000 f80f 	bl	800cc34 <IntToUnicode>
  }
}
 800cc16:	bf00      	nop
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	1fff7a10 	.word	0x1fff7a10
 800cc24:	1fff7a14 	.word	0x1fff7a14
 800cc28:	1fff7a18 	.word	0x1fff7a18
 800cc2c:	200000f2 	.word	0x200000f2
 800cc30:	20000102 	.word	0x20000102

0800cc34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc42:	2300      	movs	r3, #0
 800cc44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc46:	2300      	movs	r3, #0
 800cc48:	75fb      	strb	r3, [r7, #23]
 800cc4a:	e027      	b.n	800cc9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	0f1b      	lsrs	r3, r3, #28
 800cc50:	2b09      	cmp	r3, #9
 800cc52:	d80b      	bhi.n	800cc6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	0f1b      	lsrs	r3, r3, #28
 800cc58:	b2da      	uxtb	r2, r3
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	4619      	mov	r1, r3
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	440b      	add	r3, r1
 800cc64:	3230      	adds	r2, #48	@ 0x30
 800cc66:	b2d2      	uxtb	r2, r2
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	e00a      	b.n	800cc82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	0f1b      	lsrs	r3, r3, #28
 800cc70:	b2da      	uxtb	r2, r3
 800cc72:	7dfb      	ldrb	r3, [r7, #23]
 800cc74:	005b      	lsls	r3, r3, #1
 800cc76:	4619      	mov	r1, r3
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	440b      	add	r3, r1
 800cc7c:	3237      	adds	r2, #55	@ 0x37
 800cc7e:	b2d2      	uxtb	r2, r2
 800cc80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	011b      	lsls	r3, r3, #4
 800cc86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	4413      	add	r3, r2
 800cc92:	2200      	movs	r2, #0
 800cc94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	75fb      	strb	r3, [r7, #23]
 800cc9c:	7dfa      	ldrb	r2, [r7, #23]
 800cc9e:	79fb      	ldrb	r3, [r7, #7]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d3d3      	bcc.n	800cc4c <IntToUnicode+0x18>
  }
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop
 800cca8:	371c      	adds	r7, #28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
	...

0800ccb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b0a0      	sub	sp, #128	@ 0x80
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccbc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	605a      	str	r2, [r3, #4]
 800ccc6:	609a      	str	r2, [r3, #8]
 800ccc8:	60da      	str	r2, [r3, #12]
 800ccca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cccc:	f107 0310 	add.w	r3, r7, #16
 800ccd0:	225c      	movs	r2, #92	@ 0x5c
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fb99 	bl	800d40c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cce2:	d149      	bne.n	800cd78 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cce8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800ccea:	2300      	movs	r3, #0
 800ccec:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ccee:	f107 0310 	add.w	r3, r7, #16
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7f8 fd80 	bl	80057f8 <HAL_RCCEx_PeriphCLKConfig>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800ccfe:	f7f4 fe01 	bl	8001904 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd02:	2300      	movs	r3, #0
 800cd04:	60fb      	str	r3, [r7, #12]
 800cd06:	4b1e      	ldr	r3, [pc, #120]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd0a:	4a1d      	ldr	r2, [pc, #116]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd0c:	f043 0301 	orr.w	r3, r3, #1
 800cd10:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd12:	4b1b      	ldr	r3, [pc, #108]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cd22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd24:	2302      	movs	r3, #2
 800cd26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd30:	230a      	movs	r3, #10
 800cd32:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4812      	ldr	r0, [pc, #72]	@ (800cd84 <HAL_PCD_MspInit+0xd0>)
 800cd3c:	f7f5 ffc2 	bl	8002cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd40:	4b0f      	ldr	r3, [pc, #60]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd44:	4a0e      	ldr	r2, [pc, #56]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd4a:	6353      	str	r3, [r2, #52]	@ 0x34
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60bb      	str	r3, [r7, #8]
 800cd50:	4b0b      	ldr	r3, [pc, #44]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd54:	4a0a      	ldr	r2, [pc, #40]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cd5a:	6453      	str	r3, [r2, #68]	@ 0x44
 800cd5c:	4b08      	ldr	r3, [pc, #32]	@ (800cd80 <HAL_PCD_MspInit+0xcc>)
 800cd5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd64:	60bb      	str	r3, [r7, #8]
 800cd66:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cd68:	2200      	movs	r2, #0
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	2043      	movs	r0, #67	@ 0x43
 800cd6e:	f7f5 faee 	bl	800234e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd72:	2043      	movs	r0, #67	@ 0x43
 800cd74:	f7f5 fb07 	bl	8002386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd78:	bf00      	nop
 800cd7a:	3780      	adds	r7, #128	@ 0x80
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}
 800cd80:	40023800 	.word	0x40023800
 800cd84:	40020000 	.word	0x40020000

0800cd88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4610      	mov	r0, r2
 800cda0:	f7fe facd 	bl	800b33e <USBD_LL_SetupStage>
}
 800cda4:	bf00      	nop
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cdbe:	78fa      	ldrb	r2, [r7, #3]
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	00db      	lsls	r3, r3, #3
 800cdc6:	4413      	add	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	440b      	add	r3, r1
 800cdcc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	78fb      	ldrb	r3, [r7, #3]
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	f7fe fb07 	bl	800b3e8 <USBD_LL_DataOutStage>
}
 800cdda:	bf00      	nop
 800cddc:	3708      	adds	r7, #8
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	460b      	mov	r3, r1
 800cdec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cdf4:	78fa      	ldrb	r2, [r7, #3]
 800cdf6:	6879      	ldr	r1, [r7, #4]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	4413      	add	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	440b      	add	r3, r1
 800ce02:	3320      	adds	r3, #32
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	78fb      	ldrb	r3, [r7, #3]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	f7fe fba0 	bl	800b54e <USBD_LL_DataInStage>
}
 800ce0e:	bf00      	nop
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe fcda 	bl	800b7de <USBD_LL_SOF>
}
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	79db      	ldrb	r3, [r3, #7]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d102      	bne.n	800ce4c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]
 800ce4a:	e008      	b.n	800ce5e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	79db      	ldrb	r3, [r3, #7]
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d102      	bne.n	800ce5a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ce54:	2301      	movs	r3, #1
 800ce56:	73fb      	strb	r3, [r7, #15]
 800ce58:	e001      	b.n	800ce5e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ce5a:	f7f4 fd53 	bl	8001904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce64:	7bfa      	ldrb	r2, [r7, #15]
 800ce66:	4611      	mov	r1, r2
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe fc74 	bl	800b756 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fe fc1c 	bl	800b6b2 <USBD_LL_Reset>
}
 800ce7a:	bf00      	nop
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
	...

0800ce84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fe fc6f 	bl	800b776 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	6812      	ldr	r2, [r2, #0]
 800cea6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ceaa:	f043 0301 	orr.w	r3, r3, #1
 800ceae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7adb      	ldrb	r3, [r3, #11]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d005      	beq.n	800cec4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceb8:	4b04      	ldr	r3, [pc, #16]	@ (800cecc <HAL_PCD_SuspendCallback+0x48>)
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	4a03      	ldr	r2, [pc, #12]	@ (800cecc <HAL_PCD_SuspendCallback+0x48>)
 800cebe:	f043 0306 	orr.w	r3, r3, #6
 800cec2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cec4:	bf00      	nop
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	e000ed00 	.word	0xe000ed00

0800ced0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fc65 	bl	800b7ae <USBD_LL_Resume>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cefe:	78fa      	ldrb	r2, [r7, #3]
 800cf00:	4611      	mov	r1, r2
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe fcbd 	bl	800b882 <USBD_LL_IsoOUTIncomplete>
}
 800cf08:	bf00      	nop
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf22:	78fa      	ldrb	r2, [r7, #3]
 800cf24:	4611      	mov	r1, r2
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fe fc79 	bl	800b81e <USBD_LL_IsoINIncomplete>
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fccf 	bl	800b8e6 <USBD_LL_DevConnected>
}
 800cf48:	bf00      	nop
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fe fccc 	bl	800b8fc <USBD_LL_DevDisconnected>
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d13c      	bne.n	800cff6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf7c:	4a20      	ldr	r2, [pc, #128]	@ (800d000 <USBD_LL_Init+0x94>)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a1e      	ldr	r2, [pc, #120]	@ (800d000 <USBD_LL_Init+0x94>)
 800cf88:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf8c:	4b1c      	ldr	r3, [pc, #112]	@ (800d000 <USBD_LL_Init+0x94>)
 800cf8e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cf92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800cf94:	4b1a      	ldr	r3, [pc, #104]	@ (800d000 <USBD_LL_Init+0x94>)
 800cf96:	2206      	movs	r2, #6
 800cf98:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf9a:	4b19      	ldr	r3, [pc, #100]	@ (800d000 <USBD_LL_Init+0x94>)
 800cf9c:	2202      	movs	r2, #2
 800cf9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cfa0:	4b17      	ldr	r3, [pc, #92]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cfa6:	4b16      	ldr	r3, [pc, #88]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cfac:	4b14      	ldr	r3, [pc, #80]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfae:	2200      	movs	r2, #0
 800cfb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cfb2:	4b13      	ldr	r3, [pc, #76]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cfb8:	4b11      	ldr	r3, [pc, #68]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cfbe:	4b10      	ldr	r3, [pc, #64]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cfc4:	4b0e      	ldr	r3, [pc, #56]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cfca:	480d      	ldr	r0, [pc, #52]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfcc:	f7f7 f85e 	bl	800408c <HAL_PCD_Init>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cfd6:	f7f4 fc95 	bl	8001904 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cfda:	2180      	movs	r1, #128	@ 0x80
 800cfdc:	4808      	ldr	r0, [pc, #32]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfde:	f7f8 fabc 	bl	800555a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cfe2:	2240      	movs	r2, #64	@ 0x40
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	4806      	ldr	r0, [pc, #24]	@ (800d000 <USBD_LL_Init+0x94>)
 800cfe8:	f7f8 fa70 	bl	80054cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cfec:	2280      	movs	r2, #128	@ 0x80
 800cfee:	2101      	movs	r1, #1
 800cff0:	4803      	ldr	r0, [pc, #12]	@ (800d000 <USBD_LL_Init+0x94>)
 800cff2:	f7f8 fa6b 	bl	80054cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	20001a40 	.word	0x20001a40

0800d004 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d010:	2300      	movs	r3, #0
 800d012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7f7 f94c 	bl	80042b8 <HAL_PCD_Start>
 800d020:	4603      	mov	r3, r0
 800d022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	4618      	mov	r0, r3
 800d028:	f000 f990 	bl	800d34c <USBD_Get_USB_Status>
 800d02c:	4603      	mov	r3, r0
 800d02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d030:	7bbb      	ldrb	r3, [r7, #14]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b084      	sub	sp, #16
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	4608      	mov	r0, r1
 800d044:	4611      	mov	r1, r2
 800d046:	461a      	mov	r2, r3
 800d048:	4603      	mov	r3, r0
 800d04a:	70fb      	strb	r3, [r7, #3]
 800d04c:	460b      	mov	r3, r1
 800d04e:	70bb      	strb	r3, [r7, #2]
 800d050:	4613      	mov	r3, r2
 800d052:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d062:	78bb      	ldrb	r3, [r7, #2]
 800d064:	883a      	ldrh	r2, [r7, #0]
 800d066:	78f9      	ldrb	r1, [r7, #3]
 800d068:	f7f7 fe4d 	bl	8004d06 <HAL_PCD_EP_Open>
 800d06c:	4603      	mov	r3, r0
 800d06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	4618      	mov	r0, r3
 800d074:	f000 f96a 	bl	800d34c <USBD_Get_USB_Status>
 800d078:	4603      	mov	r3, r0
 800d07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d096:	2300      	movs	r3, #0
 800d098:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0a0:	78fa      	ldrb	r2, [r7, #3]
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7f7 fe96 	bl	8004dd6 <HAL_PCD_EP_Close>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 f94b 	bl	800d34c <USBD_Get_USB_Status>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0de:	78fa      	ldrb	r2, [r7, #3]
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7f7 ff4e 	bl	8004f84 <HAL_PCD_EP_SetStall>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 f92c 	bl	800d34c <USBD_Get_USB_Status>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	460b      	mov	r3, r1
 800d10c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d11c:	78fa      	ldrb	r2, [r7, #3]
 800d11e:	4611      	mov	r1, r2
 800d120:	4618      	mov	r0, r3
 800d122:	f7f7 ff92 	bl	800504a <HAL_PCD_EP_ClrStall>
 800d126:	4603      	mov	r3, r0
 800d128:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d12a:	7bfb      	ldrb	r3, [r7, #15]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f000 f90d 	bl	800d34c <USBD_Get_USB_Status>
 800d132:	4603      	mov	r3, r0
 800d134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d136:	7bbb      	ldrb	r3, [r7, #14]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	460b      	mov	r3, r1
 800d14a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d152:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	da0b      	bge.n	800d174 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d15c:	78fb      	ldrb	r3, [r7, #3]
 800d15e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d162:	68f9      	ldr	r1, [r7, #12]
 800d164:	4613      	mov	r3, r2
 800d166:	00db      	lsls	r3, r3, #3
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	440b      	add	r3, r1
 800d16e:	3316      	adds	r3, #22
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	e00b      	b.n	800d18c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d174:	78fb      	ldrb	r3, [r7, #3]
 800d176:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d17a:	68f9      	ldr	r1, [r7, #12]
 800d17c:	4613      	mov	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d18a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1b2:	78fa      	ldrb	r2, [r7, #3]
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f7 fd81 	bl	8004cbe <HAL_PCD_SetAddress>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 f8c2 	bl	800d34c <USBD_Get_USB_Status>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b086      	sub	sp, #24
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	60f8      	str	r0, [r7, #12]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d1f4:	7af9      	ldrb	r1, [r7, #11]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	f7f7 fe89 	bl	8004f10 <HAL_PCD_EP_Transmit>
 800d1fe:	4603      	mov	r3, r0
 800d200:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d202:	7dfb      	ldrb	r3, [r7, #23]
 800d204:	4618      	mov	r0, r3
 800d206:	f000 f8a1 	bl	800d34c <USBD_Get_USB_Status>
 800d20a:	4603      	mov	r3, r0
 800d20c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d20e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	607a      	str	r2, [r7, #4]
 800d222:	603b      	str	r3, [r7, #0]
 800d224:	460b      	mov	r3, r1
 800d226:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d236:	7af9      	ldrb	r1, [r7, #11]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	f7f7 fe15 	bl	8004e6a <HAL_PCD_EP_Receive>
 800d240:	4603      	mov	r3, r0
 800d242:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 f880 	bl	800d34c <USBD_Get_USB_Status>
 800d24c:	4603      	mov	r3, r0
 800d24e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d250:	7dbb      	ldrb	r3, [r7, #22]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3718      	adds	r7, #24
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	460b      	mov	r3, r1
 800d264:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d26c:	78fa      	ldrb	r2, [r7, #3]
 800d26e:	4611      	mov	r1, r2
 800d270:	4618      	mov	r0, r3
 800d272:	f7f7 fe35 	bl	8004ee0 <HAL_PCD_EP_GetRxCount>
 800d276:	4603      	mov	r3, r0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	460b      	mov	r3, r1
 800d28a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d28c:	78fb      	ldrb	r3, [r7, #3]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d002      	beq.n	800d298 <HAL_PCDEx_LPM_Callback+0x18>
 800d292:	2b01      	cmp	r3, #1
 800d294:	d01f      	beq.n	800d2d6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d296:	e03b      	b.n	800d310 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	7adb      	ldrb	r3, [r3, #11]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d007      	beq.n	800d2b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d2a0:	f7f4 fac4 	bl	800182c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d318 <HAL_PCDEx_LPM_Callback+0x98>)
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	4a1b      	ldr	r2, [pc, #108]	@ (800d318 <HAL_PCDEx_LPM_Callback+0x98>)
 800d2aa:	f023 0306 	bic.w	r3, r3, #6
 800d2ae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	6812      	ldr	r2, [r2, #0]
 800d2be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d2c2:	f023 0301 	bic.w	r3, r3, #1
 800d2c6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fe fa6d 	bl	800b7ae <USBD_LL_Resume>
    break;
 800d2d4:	e01c      	b.n	800d310 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	6812      	ldr	r2, [r2, #0]
 800d2e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d2e8:	f043 0301 	orr.w	r3, r3, #1
 800d2ec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe fa3e 	bl	800b776 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	7adb      	ldrb	r3, [r3, #11]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d005      	beq.n	800d30e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d302:	4b05      	ldr	r3, [pc, #20]	@ (800d318 <HAL_PCDEx_LPM_Callback+0x98>)
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	4a04      	ldr	r2, [pc, #16]	@ (800d318 <HAL_PCDEx_LPM_Callback+0x98>)
 800d308:	f043 0306 	orr.w	r3, r3, #6
 800d30c:	6113      	str	r3, [r2, #16]
    break;
 800d30e:	bf00      	nop
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	e000ed00 	.word	0xe000ed00

0800d31c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d324:	4b03      	ldr	r3, [pc, #12]	@ (800d334 <USBD_static_malloc+0x18>)
}
 800d326:	4618      	mov	r0, r3
 800d328:	370c      	adds	r7, #12
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	20001f24 	.word	0x20001f24

0800d338 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]

}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	4603      	mov	r3, r0
 800d354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d35a:	79fb      	ldrb	r3, [r7, #7]
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d817      	bhi.n	800d390 <USBD_Get_USB_Status+0x44>
 800d360:	a201      	add	r2, pc, #4	@ (adr r2, 800d368 <USBD_Get_USB_Status+0x1c>)
 800d362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d366:	bf00      	nop
 800d368:	0800d379 	.word	0x0800d379
 800d36c:	0800d37f 	.word	0x0800d37f
 800d370:	0800d385 	.word	0x0800d385
 800d374:	0800d38b 	.word	0x0800d38b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	73fb      	strb	r3, [r7, #15]
    break;
 800d37c:	e00b      	b.n	800d396 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d37e:	2303      	movs	r3, #3
 800d380:	73fb      	strb	r3, [r7, #15]
    break;
 800d382:	e008      	b.n	800d396 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d384:	2301      	movs	r3, #1
 800d386:	73fb      	strb	r3, [r7, #15]
    break;
 800d388:	e005      	b.n	800d396 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d38a:	2303      	movs	r3, #3
 800d38c:	73fb      	strb	r3, [r7, #15]
    break;
 800d38e:	e002      	b.n	800d396 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d390:	2303      	movs	r3, #3
 800d392:	73fb      	strb	r3, [r7, #15]
    break;
 800d394:	bf00      	nop
  }
  return usb_status;
 800d396:	7bfb      	ldrb	r3, [r7, #15]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3714      	adds	r7, #20
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <sniprintf>:
 800d3a4:	b40c      	push	{r2, r3}
 800d3a6:	b530      	push	{r4, r5, lr}
 800d3a8:	4b17      	ldr	r3, [pc, #92]	@ (800d408 <sniprintf+0x64>)
 800d3aa:	1e0c      	subs	r4, r1, #0
 800d3ac:	681d      	ldr	r5, [r3, #0]
 800d3ae:	b09d      	sub	sp, #116	@ 0x74
 800d3b0:	da08      	bge.n	800d3c4 <sniprintf+0x20>
 800d3b2:	238b      	movs	r3, #139	@ 0x8b
 800d3b4:	602b      	str	r3, [r5, #0]
 800d3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ba:	b01d      	add	sp, #116	@ 0x74
 800d3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3c0:	b002      	add	sp, #8
 800d3c2:	4770      	bx	lr
 800d3c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d3c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d3cc:	bf14      	ite	ne
 800d3ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d3d2:	4623      	moveq	r3, r4
 800d3d4:	9304      	str	r3, [sp, #16]
 800d3d6:	9307      	str	r3, [sp, #28]
 800d3d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3dc:	9002      	str	r0, [sp, #8]
 800d3de:	9006      	str	r0, [sp, #24]
 800d3e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d3e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d3e6:	ab21      	add	r3, sp, #132	@ 0x84
 800d3e8:	a902      	add	r1, sp, #8
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	f000 f995 	bl	800d71c <_svfiprintf_r>
 800d3f2:	1c43      	adds	r3, r0, #1
 800d3f4:	bfbc      	itt	lt
 800d3f6:	238b      	movlt	r3, #139	@ 0x8b
 800d3f8:	602b      	strlt	r3, [r5, #0]
 800d3fa:	2c00      	cmp	r4, #0
 800d3fc:	d0dd      	beq.n	800d3ba <sniprintf+0x16>
 800d3fe:	9b02      	ldr	r3, [sp, #8]
 800d400:	2200      	movs	r2, #0
 800d402:	701a      	strb	r2, [r3, #0]
 800d404:	e7d9      	b.n	800d3ba <sniprintf+0x16>
 800d406:	bf00      	nop
 800d408:	2000010c 	.word	0x2000010c

0800d40c <memset>:
 800d40c:	4402      	add	r2, r0
 800d40e:	4603      	mov	r3, r0
 800d410:	4293      	cmp	r3, r2
 800d412:	d100      	bne.n	800d416 <memset+0xa>
 800d414:	4770      	bx	lr
 800d416:	f803 1b01 	strb.w	r1, [r3], #1
 800d41a:	e7f9      	b.n	800d410 <memset+0x4>

0800d41c <__errno>:
 800d41c:	4b01      	ldr	r3, [pc, #4]	@ (800d424 <__errno+0x8>)
 800d41e:	6818      	ldr	r0, [r3, #0]
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	2000010c 	.word	0x2000010c

0800d428 <__libc_init_array>:
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	4d0d      	ldr	r5, [pc, #52]	@ (800d460 <__libc_init_array+0x38>)
 800d42c:	4c0d      	ldr	r4, [pc, #52]	@ (800d464 <__libc_init_array+0x3c>)
 800d42e:	1b64      	subs	r4, r4, r5
 800d430:	10a4      	asrs	r4, r4, #2
 800d432:	2600      	movs	r6, #0
 800d434:	42a6      	cmp	r6, r4
 800d436:	d109      	bne.n	800d44c <__libc_init_array+0x24>
 800d438:	4d0b      	ldr	r5, [pc, #44]	@ (800d468 <__libc_init_array+0x40>)
 800d43a:	4c0c      	ldr	r4, [pc, #48]	@ (800d46c <__libc_init_array+0x44>)
 800d43c:	f000 fc66 	bl	800dd0c <_init>
 800d440:	1b64      	subs	r4, r4, r5
 800d442:	10a4      	asrs	r4, r4, #2
 800d444:	2600      	movs	r6, #0
 800d446:	42a6      	cmp	r6, r4
 800d448:	d105      	bne.n	800d456 <__libc_init_array+0x2e>
 800d44a:	bd70      	pop	{r4, r5, r6, pc}
 800d44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d450:	4798      	blx	r3
 800d452:	3601      	adds	r6, #1
 800d454:	e7ee      	b.n	800d434 <__libc_init_array+0xc>
 800d456:	f855 3b04 	ldr.w	r3, [r5], #4
 800d45a:	4798      	blx	r3
 800d45c:	3601      	adds	r6, #1
 800d45e:	e7f2      	b.n	800d446 <__libc_init_array+0x1e>
 800d460:	0800de08 	.word	0x0800de08
 800d464:	0800de08 	.word	0x0800de08
 800d468:	0800de08 	.word	0x0800de08
 800d46c:	0800de0c 	.word	0x0800de0c

0800d470 <__retarget_lock_acquire_recursive>:
 800d470:	4770      	bx	lr

0800d472 <__retarget_lock_release_recursive>:
 800d472:	4770      	bx	lr

0800d474 <_free_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4605      	mov	r5, r0
 800d478:	2900      	cmp	r1, #0
 800d47a:	d041      	beq.n	800d500 <_free_r+0x8c>
 800d47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d480:	1f0c      	subs	r4, r1, #4
 800d482:	2b00      	cmp	r3, #0
 800d484:	bfb8      	it	lt
 800d486:	18e4      	addlt	r4, r4, r3
 800d488:	f000 f8e0 	bl	800d64c <__malloc_lock>
 800d48c:	4a1d      	ldr	r2, [pc, #116]	@ (800d504 <_free_r+0x90>)
 800d48e:	6813      	ldr	r3, [r2, #0]
 800d490:	b933      	cbnz	r3, 800d4a0 <_free_r+0x2c>
 800d492:	6063      	str	r3, [r4, #4]
 800d494:	6014      	str	r4, [r2, #0]
 800d496:	4628      	mov	r0, r5
 800d498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d49c:	f000 b8dc 	b.w	800d658 <__malloc_unlock>
 800d4a0:	42a3      	cmp	r3, r4
 800d4a2:	d908      	bls.n	800d4b6 <_free_r+0x42>
 800d4a4:	6820      	ldr	r0, [r4, #0]
 800d4a6:	1821      	adds	r1, r4, r0
 800d4a8:	428b      	cmp	r3, r1
 800d4aa:	bf01      	itttt	eq
 800d4ac:	6819      	ldreq	r1, [r3, #0]
 800d4ae:	685b      	ldreq	r3, [r3, #4]
 800d4b0:	1809      	addeq	r1, r1, r0
 800d4b2:	6021      	streq	r1, [r4, #0]
 800d4b4:	e7ed      	b.n	800d492 <_free_r+0x1e>
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	b10b      	cbz	r3, 800d4c0 <_free_r+0x4c>
 800d4bc:	42a3      	cmp	r3, r4
 800d4be:	d9fa      	bls.n	800d4b6 <_free_r+0x42>
 800d4c0:	6811      	ldr	r1, [r2, #0]
 800d4c2:	1850      	adds	r0, r2, r1
 800d4c4:	42a0      	cmp	r0, r4
 800d4c6:	d10b      	bne.n	800d4e0 <_free_r+0x6c>
 800d4c8:	6820      	ldr	r0, [r4, #0]
 800d4ca:	4401      	add	r1, r0
 800d4cc:	1850      	adds	r0, r2, r1
 800d4ce:	4283      	cmp	r3, r0
 800d4d0:	6011      	str	r1, [r2, #0]
 800d4d2:	d1e0      	bne.n	800d496 <_free_r+0x22>
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	6053      	str	r3, [r2, #4]
 800d4da:	4408      	add	r0, r1
 800d4dc:	6010      	str	r0, [r2, #0]
 800d4de:	e7da      	b.n	800d496 <_free_r+0x22>
 800d4e0:	d902      	bls.n	800d4e8 <_free_r+0x74>
 800d4e2:	230c      	movs	r3, #12
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	e7d6      	b.n	800d496 <_free_r+0x22>
 800d4e8:	6820      	ldr	r0, [r4, #0]
 800d4ea:	1821      	adds	r1, r4, r0
 800d4ec:	428b      	cmp	r3, r1
 800d4ee:	bf04      	itt	eq
 800d4f0:	6819      	ldreq	r1, [r3, #0]
 800d4f2:	685b      	ldreq	r3, [r3, #4]
 800d4f4:	6063      	str	r3, [r4, #4]
 800d4f6:	bf04      	itt	eq
 800d4f8:	1809      	addeq	r1, r1, r0
 800d4fa:	6021      	streq	r1, [r4, #0]
 800d4fc:	6054      	str	r4, [r2, #4]
 800d4fe:	e7ca      	b.n	800d496 <_free_r+0x22>
 800d500:	bd38      	pop	{r3, r4, r5, pc}
 800d502:	bf00      	nop
 800d504:	20002288 	.word	0x20002288

0800d508 <sbrk_aligned>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	4e0f      	ldr	r6, [pc, #60]	@ (800d548 <sbrk_aligned+0x40>)
 800d50c:	460c      	mov	r4, r1
 800d50e:	6831      	ldr	r1, [r6, #0]
 800d510:	4605      	mov	r5, r0
 800d512:	b911      	cbnz	r1, 800d51a <sbrk_aligned+0x12>
 800d514:	f000 fba6 	bl	800dc64 <_sbrk_r>
 800d518:	6030      	str	r0, [r6, #0]
 800d51a:	4621      	mov	r1, r4
 800d51c:	4628      	mov	r0, r5
 800d51e:	f000 fba1 	bl	800dc64 <_sbrk_r>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	d103      	bne.n	800d52e <sbrk_aligned+0x26>
 800d526:	f04f 34ff 	mov.w	r4, #4294967295
 800d52a:	4620      	mov	r0, r4
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
 800d52e:	1cc4      	adds	r4, r0, #3
 800d530:	f024 0403 	bic.w	r4, r4, #3
 800d534:	42a0      	cmp	r0, r4
 800d536:	d0f8      	beq.n	800d52a <sbrk_aligned+0x22>
 800d538:	1a21      	subs	r1, r4, r0
 800d53a:	4628      	mov	r0, r5
 800d53c:	f000 fb92 	bl	800dc64 <_sbrk_r>
 800d540:	3001      	adds	r0, #1
 800d542:	d1f2      	bne.n	800d52a <sbrk_aligned+0x22>
 800d544:	e7ef      	b.n	800d526 <sbrk_aligned+0x1e>
 800d546:	bf00      	nop
 800d548:	20002284 	.word	0x20002284

0800d54c <_malloc_r>:
 800d54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d550:	1ccd      	adds	r5, r1, #3
 800d552:	f025 0503 	bic.w	r5, r5, #3
 800d556:	3508      	adds	r5, #8
 800d558:	2d0c      	cmp	r5, #12
 800d55a:	bf38      	it	cc
 800d55c:	250c      	movcc	r5, #12
 800d55e:	2d00      	cmp	r5, #0
 800d560:	4606      	mov	r6, r0
 800d562:	db01      	blt.n	800d568 <_malloc_r+0x1c>
 800d564:	42a9      	cmp	r1, r5
 800d566:	d904      	bls.n	800d572 <_malloc_r+0x26>
 800d568:	230c      	movs	r3, #12
 800d56a:	6033      	str	r3, [r6, #0]
 800d56c:	2000      	movs	r0, #0
 800d56e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d572:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d648 <_malloc_r+0xfc>
 800d576:	f000 f869 	bl	800d64c <__malloc_lock>
 800d57a:	f8d8 3000 	ldr.w	r3, [r8]
 800d57e:	461c      	mov	r4, r3
 800d580:	bb44      	cbnz	r4, 800d5d4 <_malloc_r+0x88>
 800d582:	4629      	mov	r1, r5
 800d584:	4630      	mov	r0, r6
 800d586:	f7ff ffbf 	bl	800d508 <sbrk_aligned>
 800d58a:	1c43      	adds	r3, r0, #1
 800d58c:	4604      	mov	r4, r0
 800d58e:	d158      	bne.n	800d642 <_malloc_r+0xf6>
 800d590:	f8d8 4000 	ldr.w	r4, [r8]
 800d594:	4627      	mov	r7, r4
 800d596:	2f00      	cmp	r7, #0
 800d598:	d143      	bne.n	800d622 <_malloc_r+0xd6>
 800d59a:	2c00      	cmp	r4, #0
 800d59c:	d04b      	beq.n	800d636 <_malloc_r+0xea>
 800d59e:	6823      	ldr	r3, [r4, #0]
 800d5a0:	4639      	mov	r1, r7
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	eb04 0903 	add.w	r9, r4, r3
 800d5a8:	f000 fb5c 	bl	800dc64 <_sbrk_r>
 800d5ac:	4581      	cmp	r9, r0
 800d5ae:	d142      	bne.n	800d636 <_malloc_r+0xea>
 800d5b0:	6821      	ldr	r1, [r4, #0]
 800d5b2:	1a6d      	subs	r5, r5, r1
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	f7ff ffa6 	bl	800d508 <sbrk_aligned>
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d03a      	beq.n	800d636 <_malloc_r+0xea>
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	442b      	add	r3, r5
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	bb62      	cbnz	r2, 800d628 <_malloc_r+0xdc>
 800d5ce:	f8c8 7000 	str.w	r7, [r8]
 800d5d2:	e00f      	b.n	800d5f4 <_malloc_r+0xa8>
 800d5d4:	6822      	ldr	r2, [r4, #0]
 800d5d6:	1b52      	subs	r2, r2, r5
 800d5d8:	d420      	bmi.n	800d61c <_malloc_r+0xd0>
 800d5da:	2a0b      	cmp	r2, #11
 800d5dc:	d917      	bls.n	800d60e <_malloc_r+0xc2>
 800d5de:	1961      	adds	r1, r4, r5
 800d5e0:	42a3      	cmp	r3, r4
 800d5e2:	6025      	str	r5, [r4, #0]
 800d5e4:	bf18      	it	ne
 800d5e6:	6059      	strne	r1, [r3, #4]
 800d5e8:	6863      	ldr	r3, [r4, #4]
 800d5ea:	bf08      	it	eq
 800d5ec:	f8c8 1000 	streq.w	r1, [r8]
 800d5f0:	5162      	str	r2, [r4, r5]
 800d5f2:	604b      	str	r3, [r1, #4]
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f000 f82f 	bl	800d658 <__malloc_unlock>
 800d5fa:	f104 000b 	add.w	r0, r4, #11
 800d5fe:	1d23      	adds	r3, r4, #4
 800d600:	f020 0007 	bic.w	r0, r0, #7
 800d604:	1ac2      	subs	r2, r0, r3
 800d606:	bf1c      	itt	ne
 800d608:	1a1b      	subne	r3, r3, r0
 800d60a:	50a3      	strne	r3, [r4, r2]
 800d60c:	e7af      	b.n	800d56e <_malloc_r+0x22>
 800d60e:	6862      	ldr	r2, [r4, #4]
 800d610:	42a3      	cmp	r3, r4
 800d612:	bf0c      	ite	eq
 800d614:	f8c8 2000 	streq.w	r2, [r8]
 800d618:	605a      	strne	r2, [r3, #4]
 800d61a:	e7eb      	b.n	800d5f4 <_malloc_r+0xa8>
 800d61c:	4623      	mov	r3, r4
 800d61e:	6864      	ldr	r4, [r4, #4]
 800d620:	e7ae      	b.n	800d580 <_malloc_r+0x34>
 800d622:	463c      	mov	r4, r7
 800d624:	687f      	ldr	r7, [r7, #4]
 800d626:	e7b6      	b.n	800d596 <_malloc_r+0x4a>
 800d628:	461a      	mov	r2, r3
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	42a3      	cmp	r3, r4
 800d62e:	d1fb      	bne.n	800d628 <_malloc_r+0xdc>
 800d630:	2300      	movs	r3, #0
 800d632:	6053      	str	r3, [r2, #4]
 800d634:	e7de      	b.n	800d5f4 <_malloc_r+0xa8>
 800d636:	230c      	movs	r3, #12
 800d638:	6033      	str	r3, [r6, #0]
 800d63a:	4630      	mov	r0, r6
 800d63c:	f000 f80c 	bl	800d658 <__malloc_unlock>
 800d640:	e794      	b.n	800d56c <_malloc_r+0x20>
 800d642:	6005      	str	r5, [r0, #0]
 800d644:	e7d6      	b.n	800d5f4 <_malloc_r+0xa8>
 800d646:	bf00      	nop
 800d648:	20002288 	.word	0x20002288

0800d64c <__malloc_lock>:
 800d64c:	4801      	ldr	r0, [pc, #4]	@ (800d654 <__malloc_lock+0x8>)
 800d64e:	f7ff bf0f 	b.w	800d470 <__retarget_lock_acquire_recursive>
 800d652:	bf00      	nop
 800d654:	20002280 	.word	0x20002280

0800d658 <__malloc_unlock>:
 800d658:	4801      	ldr	r0, [pc, #4]	@ (800d660 <__malloc_unlock+0x8>)
 800d65a:	f7ff bf0a 	b.w	800d472 <__retarget_lock_release_recursive>
 800d65e:	bf00      	nop
 800d660:	20002280 	.word	0x20002280

0800d664 <__ssputs_r>:
 800d664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d668:	688e      	ldr	r6, [r1, #8]
 800d66a:	461f      	mov	r7, r3
 800d66c:	42be      	cmp	r6, r7
 800d66e:	680b      	ldr	r3, [r1, #0]
 800d670:	4682      	mov	sl, r0
 800d672:	460c      	mov	r4, r1
 800d674:	4690      	mov	r8, r2
 800d676:	d82d      	bhi.n	800d6d4 <__ssputs_r+0x70>
 800d678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d67c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d680:	d026      	beq.n	800d6d0 <__ssputs_r+0x6c>
 800d682:	6965      	ldr	r5, [r4, #20]
 800d684:	6909      	ldr	r1, [r1, #16]
 800d686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d68a:	eba3 0901 	sub.w	r9, r3, r1
 800d68e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d692:	1c7b      	adds	r3, r7, #1
 800d694:	444b      	add	r3, r9
 800d696:	106d      	asrs	r5, r5, #1
 800d698:	429d      	cmp	r5, r3
 800d69a:	bf38      	it	cc
 800d69c:	461d      	movcc	r5, r3
 800d69e:	0553      	lsls	r3, r2, #21
 800d6a0:	d527      	bpl.n	800d6f2 <__ssputs_r+0x8e>
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	f7ff ff52 	bl	800d54c <_malloc_r>
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	b360      	cbz	r0, 800d706 <__ssputs_r+0xa2>
 800d6ac:	6921      	ldr	r1, [r4, #16]
 800d6ae:	464a      	mov	r2, r9
 800d6b0:	f000 fae8 	bl	800dc84 <memcpy>
 800d6b4:	89a3      	ldrh	r3, [r4, #12]
 800d6b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6be:	81a3      	strh	r3, [r4, #12]
 800d6c0:	6126      	str	r6, [r4, #16]
 800d6c2:	6165      	str	r5, [r4, #20]
 800d6c4:	444e      	add	r6, r9
 800d6c6:	eba5 0509 	sub.w	r5, r5, r9
 800d6ca:	6026      	str	r6, [r4, #0]
 800d6cc:	60a5      	str	r5, [r4, #8]
 800d6ce:	463e      	mov	r6, r7
 800d6d0:	42be      	cmp	r6, r7
 800d6d2:	d900      	bls.n	800d6d6 <__ssputs_r+0x72>
 800d6d4:	463e      	mov	r6, r7
 800d6d6:	6820      	ldr	r0, [r4, #0]
 800d6d8:	4632      	mov	r2, r6
 800d6da:	4641      	mov	r1, r8
 800d6dc:	f000 faa8 	bl	800dc30 <memmove>
 800d6e0:	68a3      	ldr	r3, [r4, #8]
 800d6e2:	1b9b      	subs	r3, r3, r6
 800d6e4:	60a3      	str	r3, [r4, #8]
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	4433      	add	r3, r6
 800d6ea:	6023      	str	r3, [r4, #0]
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f2:	462a      	mov	r2, r5
 800d6f4:	f000 fad4 	bl	800dca0 <_realloc_r>
 800d6f8:	4606      	mov	r6, r0
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d1e0      	bne.n	800d6c0 <__ssputs_r+0x5c>
 800d6fe:	6921      	ldr	r1, [r4, #16]
 800d700:	4650      	mov	r0, sl
 800d702:	f7ff feb7 	bl	800d474 <_free_r>
 800d706:	230c      	movs	r3, #12
 800d708:	f8ca 3000 	str.w	r3, [sl]
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d712:	81a3      	strh	r3, [r4, #12]
 800d714:	f04f 30ff 	mov.w	r0, #4294967295
 800d718:	e7e9      	b.n	800d6ee <__ssputs_r+0x8a>
	...

0800d71c <_svfiprintf_r>:
 800d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	4698      	mov	r8, r3
 800d722:	898b      	ldrh	r3, [r1, #12]
 800d724:	061b      	lsls	r3, r3, #24
 800d726:	b09d      	sub	sp, #116	@ 0x74
 800d728:	4607      	mov	r7, r0
 800d72a:	460d      	mov	r5, r1
 800d72c:	4614      	mov	r4, r2
 800d72e:	d510      	bpl.n	800d752 <_svfiprintf_r+0x36>
 800d730:	690b      	ldr	r3, [r1, #16]
 800d732:	b973      	cbnz	r3, 800d752 <_svfiprintf_r+0x36>
 800d734:	2140      	movs	r1, #64	@ 0x40
 800d736:	f7ff ff09 	bl	800d54c <_malloc_r>
 800d73a:	6028      	str	r0, [r5, #0]
 800d73c:	6128      	str	r0, [r5, #16]
 800d73e:	b930      	cbnz	r0, 800d74e <_svfiprintf_r+0x32>
 800d740:	230c      	movs	r3, #12
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	f04f 30ff 	mov.w	r0, #4294967295
 800d748:	b01d      	add	sp, #116	@ 0x74
 800d74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74e:	2340      	movs	r3, #64	@ 0x40
 800d750:	616b      	str	r3, [r5, #20]
 800d752:	2300      	movs	r3, #0
 800d754:	9309      	str	r3, [sp, #36]	@ 0x24
 800d756:	2320      	movs	r3, #32
 800d758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d760:	2330      	movs	r3, #48	@ 0x30
 800d762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d900 <_svfiprintf_r+0x1e4>
 800d766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d76a:	f04f 0901 	mov.w	r9, #1
 800d76e:	4623      	mov	r3, r4
 800d770:	469a      	mov	sl, r3
 800d772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d776:	b10a      	cbz	r2, 800d77c <_svfiprintf_r+0x60>
 800d778:	2a25      	cmp	r2, #37	@ 0x25
 800d77a:	d1f9      	bne.n	800d770 <_svfiprintf_r+0x54>
 800d77c:	ebba 0b04 	subs.w	fp, sl, r4
 800d780:	d00b      	beq.n	800d79a <_svfiprintf_r+0x7e>
 800d782:	465b      	mov	r3, fp
 800d784:	4622      	mov	r2, r4
 800d786:	4629      	mov	r1, r5
 800d788:	4638      	mov	r0, r7
 800d78a:	f7ff ff6b 	bl	800d664 <__ssputs_r>
 800d78e:	3001      	adds	r0, #1
 800d790:	f000 80a7 	beq.w	800d8e2 <_svfiprintf_r+0x1c6>
 800d794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d796:	445a      	add	r2, fp
 800d798:	9209      	str	r2, [sp, #36]	@ 0x24
 800d79a:	f89a 3000 	ldrb.w	r3, [sl]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 809f 	beq.w	800d8e2 <_svfiprintf_r+0x1c6>
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ae:	f10a 0a01 	add.w	sl, sl, #1
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	9307      	str	r3, [sp, #28]
 800d7b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7bc:	4654      	mov	r4, sl
 800d7be:	2205      	movs	r2, #5
 800d7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c4:	484e      	ldr	r0, [pc, #312]	@ (800d900 <_svfiprintf_r+0x1e4>)
 800d7c6:	f7f2 fd2b 	bl	8000220 <memchr>
 800d7ca:	9a04      	ldr	r2, [sp, #16]
 800d7cc:	b9d8      	cbnz	r0, 800d806 <_svfiprintf_r+0xea>
 800d7ce:	06d0      	lsls	r0, r2, #27
 800d7d0:	bf44      	itt	mi
 800d7d2:	2320      	movmi	r3, #32
 800d7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7d8:	0711      	lsls	r1, r2, #28
 800d7da:	bf44      	itt	mi
 800d7dc:	232b      	movmi	r3, #43	@ 0x2b
 800d7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7e8:	d015      	beq.n	800d816 <_svfiprintf_r+0xfa>
 800d7ea:	9a07      	ldr	r2, [sp, #28]
 800d7ec:	4654      	mov	r4, sl
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	f04f 0c0a 	mov.w	ip, #10
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7fa:	3b30      	subs	r3, #48	@ 0x30
 800d7fc:	2b09      	cmp	r3, #9
 800d7fe:	d94b      	bls.n	800d898 <_svfiprintf_r+0x17c>
 800d800:	b1b0      	cbz	r0, 800d830 <_svfiprintf_r+0x114>
 800d802:	9207      	str	r2, [sp, #28]
 800d804:	e014      	b.n	800d830 <_svfiprintf_r+0x114>
 800d806:	eba0 0308 	sub.w	r3, r0, r8
 800d80a:	fa09 f303 	lsl.w	r3, r9, r3
 800d80e:	4313      	orrs	r3, r2
 800d810:	9304      	str	r3, [sp, #16]
 800d812:	46a2      	mov	sl, r4
 800d814:	e7d2      	b.n	800d7bc <_svfiprintf_r+0xa0>
 800d816:	9b03      	ldr	r3, [sp, #12]
 800d818:	1d19      	adds	r1, r3, #4
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	9103      	str	r1, [sp, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	bfbb      	ittet	lt
 800d822:	425b      	neglt	r3, r3
 800d824:	f042 0202 	orrlt.w	r2, r2, #2
 800d828:	9307      	strge	r3, [sp, #28]
 800d82a:	9307      	strlt	r3, [sp, #28]
 800d82c:	bfb8      	it	lt
 800d82e:	9204      	strlt	r2, [sp, #16]
 800d830:	7823      	ldrb	r3, [r4, #0]
 800d832:	2b2e      	cmp	r3, #46	@ 0x2e
 800d834:	d10a      	bne.n	800d84c <_svfiprintf_r+0x130>
 800d836:	7863      	ldrb	r3, [r4, #1]
 800d838:	2b2a      	cmp	r3, #42	@ 0x2a
 800d83a:	d132      	bne.n	800d8a2 <_svfiprintf_r+0x186>
 800d83c:	9b03      	ldr	r3, [sp, #12]
 800d83e:	1d1a      	adds	r2, r3, #4
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	9203      	str	r2, [sp, #12]
 800d844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d848:	3402      	adds	r4, #2
 800d84a:	9305      	str	r3, [sp, #20]
 800d84c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d910 <_svfiprintf_r+0x1f4>
 800d850:	7821      	ldrb	r1, [r4, #0]
 800d852:	2203      	movs	r2, #3
 800d854:	4650      	mov	r0, sl
 800d856:	f7f2 fce3 	bl	8000220 <memchr>
 800d85a:	b138      	cbz	r0, 800d86c <_svfiprintf_r+0x150>
 800d85c:	9b04      	ldr	r3, [sp, #16]
 800d85e:	eba0 000a 	sub.w	r0, r0, sl
 800d862:	2240      	movs	r2, #64	@ 0x40
 800d864:	4082      	lsls	r2, r0
 800d866:	4313      	orrs	r3, r2
 800d868:	3401      	adds	r4, #1
 800d86a:	9304      	str	r3, [sp, #16]
 800d86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d870:	4824      	ldr	r0, [pc, #144]	@ (800d904 <_svfiprintf_r+0x1e8>)
 800d872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d876:	2206      	movs	r2, #6
 800d878:	f7f2 fcd2 	bl	8000220 <memchr>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d036      	beq.n	800d8ee <_svfiprintf_r+0x1d2>
 800d880:	4b21      	ldr	r3, [pc, #132]	@ (800d908 <_svfiprintf_r+0x1ec>)
 800d882:	bb1b      	cbnz	r3, 800d8cc <_svfiprintf_r+0x1b0>
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	3307      	adds	r3, #7
 800d888:	f023 0307 	bic.w	r3, r3, #7
 800d88c:	3308      	adds	r3, #8
 800d88e:	9303      	str	r3, [sp, #12]
 800d890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d892:	4433      	add	r3, r6
 800d894:	9309      	str	r3, [sp, #36]	@ 0x24
 800d896:	e76a      	b.n	800d76e <_svfiprintf_r+0x52>
 800d898:	fb0c 3202 	mla	r2, ip, r2, r3
 800d89c:	460c      	mov	r4, r1
 800d89e:	2001      	movs	r0, #1
 800d8a0:	e7a8      	b.n	800d7f4 <_svfiprintf_r+0xd8>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	3401      	adds	r4, #1
 800d8a6:	9305      	str	r3, [sp, #20]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f04f 0c0a 	mov.w	ip, #10
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b4:	3a30      	subs	r2, #48	@ 0x30
 800d8b6:	2a09      	cmp	r2, #9
 800d8b8:	d903      	bls.n	800d8c2 <_svfiprintf_r+0x1a6>
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0c6      	beq.n	800d84c <_svfiprintf_r+0x130>
 800d8be:	9105      	str	r1, [sp, #20]
 800d8c0:	e7c4      	b.n	800d84c <_svfiprintf_r+0x130>
 800d8c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e7f0      	b.n	800d8ae <_svfiprintf_r+0x192>
 800d8cc:	ab03      	add	r3, sp, #12
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	462a      	mov	r2, r5
 800d8d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d90c <_svfiprintf_r+0x1f0>)
 800d8d4:	a904      	add	r1, sp, #16
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	f3af 8000 	nop.w
 800d8dc:	1c42      	adds	r2, r0, #1
 800d8de:	4606      	mov	r6, r0
 800d8e0:	d1d6      	bne.n	800d890 <_svfiprintf_r+0x174>
 800d8e2:	89ab      	ldrh	r3, [r5, #12]
 800d8e4:	065b      	lsls	r3, r3, #25
 800d8e6:	f53f af2d 	bmi.w	800d744 <_svfiprintf_r+0x28>
 800d8ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8ec:	e72c      	b.n	800d748 <_svfiprintf_r+0x2c>
 800d8ee:	ab03      	add	r3, sp, #12
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	4b05      	ldr	r3, [pc, #20]	@ (800d90c <_svfiprintf_r+0x1f0>)
 800d8f6:	a904      	add	r1, sp, #16
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	f000 f879 	bl	800d9f0 <_printf_i>
 800d8fe:	e7ed      	b.n	800d8dc <_svfiprintf_r+0x1c0>
 800d900:	0800ddcc 	.word	0x0800ddcc
 800d904:	0800ddd6 	.word	0x0800ddd6
 800d908:	00000000 	.word	0x00000000
 800d90c:	0800d665 	.word	0x0800d665
 800d910:	0800ddd2 	.word	0x0800ddd2

0800d914 <_printf_common>:
 800d914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d918:	4616      	mov	r6, r2
 800d91a:	4698      	mov	r8, r3
 800d91c:	688a      	ldr	r2, [r1, #8]
 800d91e:	690b      	ldr	r3, [r1, #16]
 800d920:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d924:	4293      	cmp	r3, r2
 800d926:	bfb8      	it	lt
 800d928:	4613      	movlt	r3, r2
 800d92a:	6033      	str	r3, [r6, #0]
 800d92c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d930:	4607      	mov	r7, r0
 800d932:	460c      	mov	r4, r1
 800d934:	b10a      	cbz	r2, 800d93a <_printf_common+0x26>
 800d936:	3301      	adds	r3, #1
 800d938:	6033      	str	r3, [r6, #0]
 800d93a:	6823      	ldr	r3, [r4, #0]
 800d93c:	0699      	lsls	r1, r3, #26
 800d93e:	bf42      	ittt	mi
 800d940:	6833      	ldrmi	r3, [r6, #0]
 800d942:	3302      	addmi	r3, #2
 800d944:	6033      	strmi	r3, [r6, #0]
 800d946:	6825      	ldr	r5, [r4, #0]
 800d948:	f015 0506 	ands.w	r5, r5, #6
 800d94c:	d106      	bne.n	800d95c <_printf_common+0x48>
 800d94e:	f104 0a19 	add.w	sl, r4, #25
 800d952:	68e3      	ldr	r3, [r4, #12]
 800d954:	6832      	ldr	r2, [r6, #0]
 800d956:	1a9b      	subs	r3, r3, r2
 800d958:	42ab      	cmp	r3, r5
 800d95a:	dc26      	bgt.n	800d9aa <_printf_common+0x96>
 800d95c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d960:	6822      	ldr	r2, [r4, #0]
 800d962:	3b00      	subs	r3, #0
 800d964:	bf18      	it	ne
 800d966:	2301      	movne	r3, #1
 800d968:	0692      	lsls	r2, r2, #26
 800d96a:	d42b      	bmi.n	800d9c4 <_printf_common+0xb0>
 800d96c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d970:	4641      	mov	r1, r8
 800d972:	4638      	mov	r0, r7
 800d974:	47c8      	blx	r9
 800d976:	3001      	adds	r0, #1
 800d978:	d01e      	beq.n	800d9b8 <_printf_common+0xa4>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	6922      	ldr	r2, [r4, #16]
 800d97e:	f003 0306 	and.w	r3, r3, #6
 800d982:	2b04      	cmp	r3, #4
 800d984:	bf02      	ittt	eq
 800d986:	68e5      	ldreq	r5, [r4, #12]
 800d988:	6833      	ldreq	r3, [r6, #0]
 800d98a:	1aed      	subeq	r5, r5, r3
 800d98c:	68a3      	ldr	r3, [r4, #8]
 800d98e:	bf0c      	ite	eq
 800d990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d994:	2500      	movne	r5, #0
 800d996:	4293      	cmp	r3, r2
 800d998:	bfc4      	itt	gt
 800d99a:	1a9b      	subgt	r3, r3, r2
 800d99c:	18ed      	addgt	r5, r5, r3
 800d99e:	2600      	movs	r6, #0
 800d9a0:	341a      	adds	r4, #26
 800d9a2:	42b5      	cmp	r5, r6
 800d9a4:	d11a      	bne.n	800d9dc <_printf_common+0xc8>
 800d9a6:	2000      	movs	r0, #0
 800d9a8:	e008      	b.n	800d9bc <_printf_common+0xa8>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4652      	mov	r2, sl
 800d9ae:	4641      	mov	r1, r8
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	47c8      	blx	r9
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	d103      	bne.n	800d9c0 <_printf_common+0xac>
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c0:	3501      	adds	r5, #1
 800d9c2:	e7c6      	b.n	800d952 <_printf_common+0x3e>
 800d9c4:	18e1      	adds	r1, r4, r3
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	2030      	movs	r0, #48	@ 0x30
 800d9ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d9ce:	4422      	add	r2, r4
 800d9d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d9d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d9d8:	3302      	adds	r3, #2
 800d9da:	e7c7      	b.n	800d96c <_printf_common+0x58>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	4622      	mov	r2, r4
 800d9e0:	4641      	mov	r1, r8
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	47c8      	blx	r9
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	d0e6      	beq.n	800d9b8 <_printf_common+0xa4>
 800d9ea:	3601      	adds	r6, #1
 800d9ec:	e7d9      	b.n	800d9a2 <_printf_common+0x8e>
	...

0800d9f0 <_printf_i>:
 800d9f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f4:	7e0f      	ldrb	r7, [r1, #24]
 800d9f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9f8:	2f78      	cmp	r7, #120	@ 0x78
 800d9fa:	4691      	mov	r9, r2
 800d9fc:	4680      	mov	r8, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	469a      	mov	sl, r3
 800da02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da06:	d807      	bhi.n	800da18 <_printf_i+0x28>
 800da08:	2f62      	cmp	r7, #98	@ 0x62
 800da0a:	d80a      	bhi.n	800da22 <_printf_i+0x32>
 800da0c:	2f00      	cmp	r7, #0
 800da0e:	f000 80d2 	beq.w	800dbb6 <_printf_i+0x1c6>
 800da12:	2f58      	cmp	r7, #88	@ 0x58
 800da14:	f000 80b9 	beq.w	800db8a <_printf_i+0x19a>
 800da18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da20:	e03a      	b.n	800da98 <_printf_i+0xa8>
 800da22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da26:	2b15      	cmp	r3, #21
 800da28:	d8f6      	bhi.n	800da18 <_printf_i+0x28>
 800da2a:	a101      	add	r1, pc, #4	@ (adr r1, 800da30 <_printf_i+0x40>)
 800da2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da30:	0800da89 	.word	0x0800da89
 800da34:	0800da9d 	.word	0x0800da9d
 800da38:	0800da19 	.word	0x0800da19
 800da3c:	0800da19 	.word	0x0800da19
 800da40:	0800da19 	.word	0x0800da19
 800da44:	0800da19 	.word	0x0800da19
 800da48:	0800da9d 	.word	0x0800da9d
 800da4c:	0800da19 	.word	0x0800da19
 800da50:	0800da19 	.word	0x0800da19
 800da54:	0800da19 	.word	0x0800da19
 800da58:	0800da19 	.word	0x0800da19
 800da5c:	0800db9d 	.word	0x0800db9d
 800da60:	0800dac7 	.word	0x0800dac7
 800da64:	0800db57 	.word	0x0800db57
 800da68:	0800da19 	.word	0x0800da19
 800da6c:	0800da19 	.word	0x0800da19
 800da70:	0800dbbf 	.word	0x0800dbbf
 800da74:	0800da19 	.word	0x0800da19
 800da78:	0800dac7 	.word	0x0800dac7
 800da7c:	0800da19 	.word	0x0800da19
 800da80:	0800da19 	.word	0x0800da19
 800da84:	0800db5f 	.word	0x0800db5f
 800da88:	6833      	ldr	r3, [r6, #0]
 800da8a:	1d1a      	adds	r2, r3, #4
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6032      	str	r2, [r6, #0]
 800da90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da98:	2301      	movs	r3, #1
 800da9a:	e09d      	b.n	800dbd8 <_printf_i+0x1e8>
 800da9c:	6833      	ldr	r3, [r6, #0]
 800da9e:	6820      	ldr	r0, [r4, #0]
 800daa0:	1d19      	adds	r1, r3, #4
 800daa2:	6031      	str	r1, [r6, #0]
 800daa4:	0606      	lsls	r6, r0, #24
 800daa6:	d501      	bpl.n	800daac <_printf_i+0xbc>
 800daa8:	681d      	ldr	r5, [r3, #0]
 800daaa:	e003      	b.n	800dab4 <_printf_i+0xc4>
 800daac:	0645      	lsls	r5, r0, #25
 800daae:	d5fb      	bpl.n	800daa8 <_printf_i+0xb8>
 800dab0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dab4:	2d00      	cmp	r5, #0
 800dab6:	da03      	bge.n	800dac0 <_printf_i+0xd0>
 800dab8:	232d      	movs	r3, #45	@ 0x2d
 800daba:	426d      	negs	r5, r5
 800dabc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dac0:	4859      	ldr	r0, [pc, #356]	@ (800dc28 <_printf_i+0x238>)
 800dac2:	230a      	movs	r3, #10
 800dac4:	e011      	b.n	800daea <_printf_i+0xfa>
 800dac6:	6821      	ldr	r1, [r4, #0]
 800dac8:	6833      	ldr	r3, [r6, #0]
 800daca:	0608      	lsls	r0, r1, #24
 800dacc:	f853 5b04 	ldr.w	r5, [r3], #4
 800dad0:	d402      	bmi.n	800dad8 <_printf_i+0xe8>
 800dad2:	0649      	lsls	r1, r1, #25
 800dad4:	bf48      	it	mi
 800dad6:	b2ad      	uxthmi	r5, r5
 800dad8:	2f6f      	cmp	r7, #111	@ 0x6f
 800dada:	4853      	ldr	r0, [pc, #332]	@ (800dc28 <_printf_i+0x238>)
 800dadc:	6033      	str	r3, [r6, #0]
 800dade:	bf14      	ite	ne
 800dae0:	230a      	movne	r3, #10
 800dae2:	2308      	moveq	r3, #8
 800dae4:	2100      	movs	r1, #0
 800dae6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800daea:	6866      	ldr	r6, [r4, #4]
 800daec:	60a6      	str	r6, [r4, #8]
 800daee:	2e00      	cmp	r6, #0
 800daf0:	bfa2      	ittt	ge
 800daf2:	6821      	ldrge	r1, [r4, #0]
 800daf4:	f021 0104 	bicge.w	r1, r1, #4
 800daf8:	6021      	strge	r1, [r4, #0]
 800dafa:	b90d      	cbnz	r5, 800db00 <_printf_i+0x110>
 800dafc:	2e00      	cmp	r6, #0
 800dafe:	d04b      	beq.n	800db98 <_printf_i+0x1a8>
 800db00:	4616      	mov	r6, r2
 800db02:	fbb5 f1f3 	udiv	r1, r5, r3
 800db06:	fb03 5711 	mls	r7, r3, r1, r5
 800db0a:	5dc7      	ldrb	r7, [r0, r7]
 800db0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db10:	462f      	mov	r7, r5
 800db12:	42bb      	cmp	r3, r7
 800db14:	460d      	mov	r5, r1
 800db16:	d9f4      	bls.n	800db02 <_printf_i+0x112>
 800db18:	2b08      	cmp	r3, #8
 800db1a:	d10b      	bne.n	800db34 <_printf_i+0x144>
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	07df      	lsls	r7, r3, #31
 800db20:	d508      	bpl.n	800db34 <_printf_i+0x144>
 800db22:	6923      	ldr	r3, [r4, #16]
 800db24:	6861      	ldr	r1, [r4, #4]
 800db26:	4299      	cmp	r1, r3
 800db28:	bfde      	ittt	le
 800db2a:	2330      	movle	r3, #48	@ 0x30
 800db2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db30:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db34:	1b92      	subs	r2, r2, r6
 800db36:	6122      	str	r2, [r4, #16]
 800db38:	f8cd a000 	str.w	sl, [sp]
 800db3c:	464b      	mov	r3, r9
 800db3e:	aa03      	add	r2, sp, #12
 800db40:	4621      	mov	r1, r4
 800db42:	4640      	mov	r0, r8
 800db44:	f7ff fee6 	bl	800d914 <_printf_common>
 800db48:	3001      	adds	r0, #1
 800db4a:	d14a      	bne.n	800dbe2 <_printf_i+0x1f2>
 800db4c:	f04f 30ff 	mov.w	r0, #4294967295
 800db50:	b004      	add	sp, #16
 800db52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	f043 0320 	orr.w	r3, r3, #32
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	4833      	ldr	r0, [pc, #204]	@ (800dc2c <_printf_i+0x23c>)
 800db60:	2778      	movs	r7, #120	@ 0x78
 800db62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	6831      	ldr	r1, [r6, #0]
 800db6a:	061f      	lsls	r7, r3, #24
 800db6c:	f851 5b04 	ldr.w	r5, [r1], #4
 800db70:	d402      	bmi.n	800db78 <_printf_i+0x188>
 800db72:	065f      	lsls	r7, r3, #25
 800db74:	bf48      	it	mi
 800db76:	b2ad      	uxthmi	r5, r5
 800db78:	6031      	str	r1, [r6, #0]
 800db7a:	07d9      	lsls	r1, r3, #31
 800db7c:	bf44      	itt	mi
 800db7e:	f043 0320 	orrmi.w	r3, r3, #32
 800db82:	6023      	strmi	r3, [r4, #0]
 800db84:	b11d      	cbz	r5, 800db8e <_printf_i+0x19e>
 800db86:	2310      	movs	r3, #16
 800db88:	e7ac      	b.n	800dae4 <_printf_i+0xf4>
 800db8a:	4827      	ldr	r0, [pc, #156]	@ (800dc28 <_printf_i+0x238>)
 800db8c:	e7e9      	b.n	800db62 <_printf_i+0x172>
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	f023 0320 	bic.w	r3, r3, #32
 800db94:	6023      	str	r3, [r4, #0]
 800db96:	e7f6      	b.n	800db86 <_printf_i+0x196>
 800db98:	4616      	mov	r6, r2
 800db9a:	e7bd      	b.n	800db18 <_printf_i+0x128>
 800db9c:	6833      	ldr	r3, [r6, #0]
 800db9e:	6825      	ldr	r5, [r4, #0]
 800dba0:	6961      	ldr	r1, [r4, #20]
 800dba2:	1d18      	adds	r0, r3, #4
 800dba4:	6030      	str	r0, [r6, #0]
 800dba6:	062e      	lsls	r6, r5, #24
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	d501      	bpl.n	800dbb0 <_printf_i+0x1c0>
 800dbac:	6019      	str	r1, [r3, #0]
 800dbae:	e002      	b.n	800dbb6 <_printf_i+0x1c6>
 800dbb0:	0668      	lsls	r0, r5, #25
 800dbb2:	d5fb      	bpl.n	800dbac <_printf_i+0x1bc>
 800dbb4:	8019      	strh	r1, [r3, #0]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	6123      	str	r3, [r4, #16]
 800dbba:	4616      	mov	r6, r2
 800dbbc:	e7bc      	b.n	800db38 <_printf_i+0x148>
 800dbbe:	6833      	ldr	r3, [r6, #0]
 800dbc0:	1d1a      	adds	r2, r3, #4
 800dbc2:	6032      	str	r2, [r6, #0]
 800dbc4:	681e      	ldr	r6, [r3, #0]
 800dbc6:	6862      	ldr	r2, [r4, #4]
 800dbc8:	2100      	movs	r1, #0
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f7f2 fb28 	bl	8000220 <memchr>
 800dbd0:	b108      	cbz	r0, 800dbd6 <_printf_i+0x1e6>
 800dbd2:	1b80      	subs	r0, r0, r6
 800dbd4:	6060      	str	r0, [r4, #4]
 800dbd6:	6863      	ldr	r3, [r4, #4]
 800dbd8:	6123      	str	r3, [r4, #16]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dbe0:	e7aa      	b.n	800db38 <_printf_i+0x148>
 800dbe2:	6923      	ldr	r3, [r4, #16]
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	4640      	mov	r0, r8
 800dbea:	47d0      	blx	sl
 800dbec:	3001      	adds	r0, #1
 800dbee:	d0ad      	beq.n	800db4c <_printf_i+0x15c>
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	079b      	lsls	r3, r3, #30
 800dbf4:	d413      	bmi.n	800dc1e <_printf_i+0x22e>
 800dbf6:	68e0      	ldr	r0, [r4, #12]
 800dbf8:	9b03      	ldr	r3, [sp, #12]
 800dbfa:	4298      	cmp	r0, r3
 800dbfc:	bfb8      	it	lt
 800dbfe:	4618      	movlt	r0, r3
 800dc00:	e7a6      	b.n	800db50 <_printf_i+0x160>
 800dc02:	2301      	movs	r3, #1
 800dc04:	4632      	mov	r2, r6
 800dc06:	4649      	mov	r1, r9
 800dc08:	4640      	mov	r0, r8
 800dc0a:	47d0      	blx	sl
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	d09d      	beq.n	800db4c <_printf_i+0x15c>
 800dc10:	3501      	adds	r5, #1
 800dc12:	68e3      	ldr	r3, [r4, #12]
 800dc14:	9903      	ldr	r1, [sp, #12]
 800dc16:	1a5b      	subs	r3, r3, r1
 800dc18:	42ab      	cmp	r3, r5
 800dc1a:	dcf2      	bgt.n	800dc02 <_printf_i+0x212>
 800dc1c:	e7eb      	b.n	800dbf6 <_printf_i+0x206>
 800dc1e:	2500      	movs	r5, #0
 800dc20:	f104 0619 	add.w	r6, r4, #25
 800dc24:	e7f5      	b.n	800dc12 <_printf_i+0x222>
 800dc26:	bf00      	nop
 800dc28:	0800dddd 	.word	0x0800dddd
 800dc2c:	0800ddee 	.word	0x0800ddee

0800dc30 <memmove>:
 800dc30:	4288      	cmp	r0, r1
 800dc32:	b510      	push	{r4, lr}
 800dc34:	eb01 0402 	add.w	r4, r1, r2
 800dc38:	d902      	bls.n	800dc40 <memmove+0x10>
 800dc3a:	4284      	cmp	r4, r0
 800dc3c:	4623      	mov	r3, r4
 800dc3e:	d807      	bhi.n	800dc50 <memmove+0x20>
 800dc40:	1e43      	subs	r3, r0, #1
 800dc42:	42a1      	cmp	r1, r4
 800dc44:	d008      	beq.n	800dc58 <memmove+0x28>
 800dc46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc4e:	e7f8      	b.n	800dc42 <memmove+0x12>
 800dc50:	4402      	add	r2, r0
 800dc52:	4601      	mov	r1, r0
 800dc54:	428a      	cmp	r2, r1
 800dc56:	d100      	bne.n	800dc5a <memmove+0x2a>
 800dc58:	bd10      	pop	{r4, pc}
 800dc5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc62:	e7f7      	b.n	800dc54 <memmove+0x24>

0800dc64 <_sbrk_r>:
 800dc64:	b538      	push	{r3, r4, r5, lr}
 800dc66:	4d06      	ldr	r5, [pc, #24]	@ (800dc80 <_sbrk_r+0x1c>)
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	602b      	str	r3, [r5, #0]
 800dc70:	f7f4 f8ba 	bl	8001de8 <_sbrk>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_sbrk_r+0x1a>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_sbrk_r+0x1a>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	2000227c 	.word	0x2000227c

0800dc84 <memcpy>:
 800dc84:	440a      	add	r2, r1
 800dc86:	4291      	cmp	r1, r2
 800dc88:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc8c:	d100      	bne.n	800dc90 <memcpy+0xc>
 800dc8e:	4770      	bx	lr
 800dc90:	b510      	push	{r4, lr}
 800dc92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc9a:	4291      	cmp	r1, r2
 800dc9c:	d1f9      	bne.n	800dc92 <memcpy+0xe>
 800dc9e:	bd10      	pop	{r4, pc}

0800dca0 <_realloc_r>:
 800dca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca4:	4680      	mov	r8, r0
 800dca6:	4615      	mov	r5, r2
 800dca8:	460c      	mov	r4, r1
 800dcaa:	b921      	cbnz	r1, 800dcb6 <_realloc_r+0x16>
 800dcac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	f7ff bc4b 	b.w	800d54c <_malloc_r>
 800dcb6:	b92a      	cbnz	r2, 800dcc4 <_realloc_r+0x24>
 800dcb8:	f7ff fbdc 	bl	800d474 <_free_r>
 800dcbc:	2400      	movs	r4, #0
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc4:	f000 f81a 	bl	800dcfc <_malloc_usable_size_r>
 800dcc8:	4285      	cmp	r5, r0
 800dcca:	4606      	mov	r6, r0
 800dccc:	d802      	bhi.n	800dcd4 <_realloc_r+0x34>
 800dcce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dcd2:	d8f4      	bhi.n	800dcbe <_realloc_r+0x1e>
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	4640      	mov	r0, r8
 800dcd8:	f7ff fc38 	bl	800d54c <_malloc_r>
 800dcdc:	4607      	mov	r7, r0
 800dcde:	2800      	cmp	r0, #0
 800dce0:	d0ec      	beq.n	800dcbc <_realloc_r+0x1c>
 800dce2:	42b5      	cmp	r5, r6
 800dce4:	462a      	mov	r2, r5
 800dce6:	4621      	mov	r1, r4
 800dce8:	bf28      	it	cs
 800dcea:	4632      	movcs	r2, r6
 800dcec:	f7ff ffca 	bl	800dc84 <memcpy>
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	4640      	mov	r0, r8
 800dcf4:	f7ff fbbe 	bl	800d474 <_free_r>
 800dcf8:	463c      	mov	r4, r7
 800dcfa:	e7e0      	b.n	800dcbe <_realloc_r+0x1e>

0800dcfc <_malloc_usable_size_r>:
 800dcfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd00:	1f18      	subs	r0, r3, #4
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	bfbc      	itt	lt
 800dd06:	580b      	ldrlt	r3, [r1, r0]
 800dd08:	18c0      	addlt	r0, r0, r3
 800dd0a:	4770      	bx	lr

0800dd0c <_init>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr

0800dd18 <_fini>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr
